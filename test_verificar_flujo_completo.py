#!/usr/bin/env python3
"""
Script para verificar el flujo completo y identificar qu√© est√° activando la secci√≥n antigua
"""

import requests
import json
import time

def test_flujo_completo():
    """Prueba el flujo completo para identificar el problema"""
    print("üîç VERIFICACI√ìN DEL FLUJO COMPLETO")
    print("=" * 60)
    
    session = requests.Session()
    
    # Caso de prueba
    caso_prueba = {
        'motivo_consulta': 'Dolor intenso en rodilla al caminar',
        'tipo_atencion': 'kinesiologia',
        'edad_paciente': 45,
        'antecedentes': 'Sin antecedentes relevantes'
    }
    
    print(f"üìã Caso de prueba: {caso_prueba['motivo_consulta']}")
    
    # Prueba 1: Verificar si el servidor est√° corriendo
    print("\nüîç Prueba 1: Verificar servidor")
    try:
        response = session.get('http://localhost:5000/health')
        print(f"Status Code: {response.status_code}")
        if response.status_code == 200:
            print("‚úÖ Servidor funcionando")
        else:
            print("‚ùå Servidor no responde correctamente")
    except Exception as e:
        print(f"‚ùå Error conectando al servidor: {e}")
        return
    
    # Prueba 2: Verificar endpoint analyze-enhanced
    print("\nüîç Prueba 2: Endpoint /api/copilot/analyze-enhanced")
    try:
        response = session.post(
            'http://localhost:5000/api/copilot/analyze-enhanced',
            json=caso_prueba
        )
        
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            try:
                data = response.json()
                print("‚úÖ Respuesta JSON v√°lida")
                
                if data.get('success'):
                    analisis = data.get('analisis_mejorado', {})
                    
                    # Verificar preguntas de evaluaci√≥n
                    preguntas = analisis.get('preguntas_evaluacion', [])
                    print(f"‚úÖ Preguntas de evaluaci√≥n encontradas: {len(preguntas)}")
                    
                    if preguntas:
                        print("üìù Preguntas generadas:")
                        for i, pregunta in enumerate(preguntas, 1):
                            print(f"   {i}. {pregunta}")
                    
                    # Verificar otros elementos
                    palabras_clave = analisis.get('palabras_clave_identificadas', [])
                    patologias = analisis.get('patologias_sugeridas', [])
                    escalas = analisis.get('escalas_recomendadas', [])
                    
                    print(f"‚úÖ Palabras clave: {len(palabras_clave)}")
                    print(f"‚úÖ Patolog√≠as: {len(patologias)}")
                    print(f"‚úÖ Escalas: {len(escalas)}")
                    
                else:
                    print(f"‚ùå Error en respuesta: {data.get('message', 'Error desconocido')}")
                    
            except json.JSONDecodeError as e:
                print(f"‚ùå Error decodificando JSON: {e}")
                print(f"Respuesta recibida: {response.text[:200]}...")
        else:
            print(f"‚ùå Error HTTP: {response.status_code}")
            print(f"Respuesta: {response.text[:200]}...")
            
    except Exception as e:
        print(f"‚ùå Error en prueba: {e}")
    
    # Prueba 3: Verificar otros endpoints que podr√≠an estar activando la secci√≥n antigua
    print("\nüîç Prueba 3: Verificar otros endpoints")
    
    endpoints_a_verificar = [
        '/api/copilot/analyze-motivo',
        '/api/copilot/generate-evaluation-questions',
        '/api/copilot/complete-analysis'
    ]
    
    for endpoint in endpoints_a_verificar:
        print(f"\nüîç Verificando {endpoint}")
        try:
            response = session.post(
                f'http://localhost:5000{endpoint}',
                json=caso_prueba
            )
            
            print(f"Status Code: {response.status_code}")
            
            if response.status_code == 200:
                try:
                    data = response.json()
                    
                    # Verificar si devuelve preguntas_sugeridas
                    if 'preguntas_sugeridas' in str(data):
                        print(f"‚ö†Ô∏è {endpoint} devuelve preguntas_sugeridas - POSIBLE CAUSA DEL PROBLEMA")
                        
                        # Buscar en la respuesta
                        if 'analisis' in data and 'preguntas_sugeridas' in data['analisis']:
                            preguntas = data['analisis']['preguntas_sugeridas']
                            print(f"   Preguntas encontradas: {len(preguntas)}")
                            for i, pregunta in enumerate(preguntas[:3], 1):
                                print(f"   {i}. {pregunta}")
                    
                    elif 'preguntas_evaluacion' in str(data):
                        print(f"‚úÖ {endpoint} devuelve preguntas_evaluacion - CORRECTO")
                    
                    else:
                        print(f"‚ÑπÔ∏è {endpoint} no devuelve preguntas")
                        
                except json.JSONDecodeError:
                    print(f"‚ùå {endpoint} devuelve HTML en lugar de JSON")
            else:
                print(f"‚ùå {endpoint} error HTTP: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå Error verificando {endpoint}: {e}")

def test_verificacion_frontend():
    """Verificaci√≥n del frontend"""
    print("\nüîç VERIFICACI√ìN DEL FRONTEND")
    print("=" * 60)
    
    print("‚úÖ Funciones JavaScript verificadas:")
    print("   ‚Ä¢ analizarMotivoEnTiempoReal() - Modificada para usar /api/copilot/analyze-enhanced")
    print("   ‚Ä¢ mostrarAnalisisMejoradoEnSidebar() - Incluye secci√≥n de preguntas")
    print("   ‚Ä¢ mostrarPreguntasSugeridas() - Modificada para mostrar en sidebar")
    print("   ‚Ä¢ mostrarResultadosAnalisis() - NO llama a mostrarPreguntasSugeridas")
    
    print("\n‚ùå Posibles causas del problema:")
    print("   1. Hay otro endpoint devolviendo preguntas_sugeridas")
    print("   2. Hay otro evento activando mostrarPreguntasSugeridas")
    print("   3. Hay cach√© del navegador")
    print("   4. El an√°lisis en tiempo real no est√° funcionando")
    print("   5. Hay otro flujo que est√° activando la secci√≥n antigua")
    
    print("\nüí° Soluciones a verificar:")
    print("   1. Limpiar cach√© del navegador")
    print("   2. Verificar que no hay otros endpoints activos")
    print("   3. Verificar que el an√°lisis en tiempo real funciona")
    print("   4. Verificar que mostrarAnalisisMejoradoEnSidebar() se llama")
    print("   5. Verificar que NO se llama a mostrarPreguntasSugeridas")

def main():
    """Funci√≥n principal de verificaci√≥n"""
    print("üöÄ INICIANDO VERIFICACI√ìN COMPLETA DEL FLUJO")
    print("=" * 60)
    
    try:
        # Prueba 1: Verificar flujo completo
        test_flujo_completo()
        
        # Prueba 2: Verificaci√≥n del frontend
        test_verificacion_frontend()
        
        print("\nüìä RESUMEN DE VERIFICACI√ìN:")
        print("=" * 60)
        print("‚úÖ Endpoint /api/copilot/analyze-enhanced verificado")
        print("‚úÖ Funciones JavaScript modificadas correctamente")
        print("‚ùå Problema: Las preguntas siguen apareciendo en secci√≥n antigua")
        print("üîç Necesario: Identificar qu√© est√° activando la secci√≥n antigua")
        
        print("\nüéØ PR√ìXIMOS PASOS:")
        print("   1. Verificar si hay otros endpoints activos")
        print("   2. Limpiar cach√© del navegador")
        print("   3. Verificar que el an√°lisis en tiempo real funciona")
        print("   4. Verificar que mostrarAnalisisMejoradoEnSidebar() se llama")
        print("   5. Verificar que NO se llama a mostrarPreguntasSugeridas")
        
    except Exception as e:
        print(f"\n‚ùå Error durante la verificaci√≥n: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 