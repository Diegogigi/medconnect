#!/usr/bin/env python3
"""
Script de diagn√≥stico para Railway PostgreSQL
"""

import os
import psycopg2
from psycopg2.extras import RealDictCursor
import sys

def diagnose_railway_database():
    """Diagnostica la conexi√≥n y estructura de la base de datos"""
    
    print("üîç Diagn√≥stico de Railway PostgreSQL...")
    print("=" * 60)
    
    # Variables de conexi√≥n a Railway
    database_url = "postgresql://postgres:SBbyfurhbJUJsFbelYJCcOvkSpXDCNZd@hopper.proxy.rlwy.net:51396/railway"
    
    print(f"üîó Conectando a Railway PostgreSQL...")
    print(f"   URL: {database_url[:50]}...")
    
    try:
        # Conectar a PostgreSQL
        conn = psycopg2.connect(database_url)
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        
        print("‚úÖ Conexi√≥n a PostgreSQL exitosa")
        
        # 1. Verificar versi√≥n de PostgreSQL
        print(f"\n1Ô∏è‚É£ Verificando versi√≥n de PostgreSQL...")
        try:
            cursor.execute("SELECT version();")
            result = cursor.fetchone()
            if result:
                version = result[0]
                print(f"   ‚úÖ Versi√≥n: {version[:100]}...")
            else:
                print(f"   ‚ö†Ô∏è No se pudo obtener la versi√≥n")
        except Exception as e:
            print(f"   ‚ùå Error obteniendo versi√≥n: {e}")
        
        # 2. Verificar tablas existentes
        print(f"\n2Ô∏è‚É£ Verificando tablas existentes...")
        try:
            cursor.execute("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name;
            """)
            tables = cursor.fetchall()
            print(f"   üìã Tablas encontradas: {len(tables)}")
            for table in tables:
                print(f"     - {table['table_name']}")
        except Exception as e:
            print(f"   ‚ùå Error obteniendo tablas: {e}")
        
        # 3. Verificar tabla usuarios
        print(f"\n3Ô∏è‚É£ Verificando tabla usuarios...")
        try:
            cursor.execute("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    AND table_name = 'usuarios'
                );
            """)
            result = cursor.fetchone()
            usuarios_exists = result[0] if result else False
            print(f"   üìã Tabla usuarios existe: {usuarios_exists}")
            
            if usuarios_exists:
                # Verificar columnas de usuarios
                cursor.execute("""
                    SELECT column_name, data_type, is_nullable
                    FROM information_schema.columns 
                    WHERE table_name = 'usuarios'
                    ORDER BY ordinal_position;
                """)
                columns = cursor.fetchall()
                print(f"   üìã Columnas en usuarios: {len(columns)}")
                for col in columns:
                    print(f"     - {col['column_name']} ({col['data_type']})")
                
                # Verificar usuarios existentes
                cursor.execute("""
                    SELECT id, email, nombre, apellido, tipo_usuario, activo
                    FROM usuarios 
                    ORDER BY tipo_usuario, apellido, nombre;
                """)
                users = cursor.fetchall()
                print(f"   üë• Usuarios encontrados: {len(users)}")
                for user in users:
                    status = "‚úÖ" if user['activo'] else "‚ùå"
                    print(f"     {status} {user['nombre']} {user['apellido']} ({user['tipo_usuario']}) - {user['email']}")
        except Exception as e:
            print(f"   ‚ùå Error verificando tabla usuarios: {e}")
        
        # 4. Verificar tabla pacientes_profesional
        print(f"\n4Ô∏è‚É£ Verificando tabla pacientes_profesional...")
        try:
            cursor.execute("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    AND table_name = 'pacientes_profesional'
                );
            """)
            result = cursor.fetchone()
            pp_exists = result[0] if result else False
            print(f"   üìã Tabla pacientes_profesional existe: {pp_exists}")
            
            if pp_exists:
                # Verificar columnas de pacientes_profesional
                cursor.execute("""
                    SELECT column_name, data_type, is_nullable
                    FROM information_schema.columns 
                    WHERE table_name = 'pacientes_profesional'
                    ORDER BY ordinal_position;
                """)
                columns = cursor.fetchall()
                print(f"   üìã Columnas en pacientes_profesional: {len(columns)}")
                for col in columns:
                    print(f"     - {col['column_name']} ({col['data_type']})")
                
                # Verificar relaciones existentes
                cursor.execute("""
                    SELECT COUNT(*) as total
                    FROM pacientes_profesional;
                """)
                result = cursor.fetchone()
                total = result['total'] if result else 0
                print(f"   üîó Relaciones existentes: {total}")
        except Exception as e:
            print(f"   ‚ùå Error verificando tabla pacientes_profesional: {e}")
        
        # 5. Verificar permisos
        print(f"\n5Ô∏è‚É£ Verificando permisos...")
        try:
            cursor.execute("""
                SELECT current_user, session_user;
            """)
            user_info = cursor.fetchone()
            print(f"   üë§ Usuario actual: {user_info['current_user']}")
            print(f"   üë§ Usuario de sesi√≥n: {user_info['session_user']}")
        except Exception as e:
            print(f"   ‚ùå Error verificando permisos: {e}")
        
        cursor.close()
        conn.close()
        
        print(f"\nüéâ Diagn√≥stico completado exitosamente")
        return True
        
    except psycopg2.OperationalError as e:
        print(f"‚ùå Error de conexi√≥n a PostgreSQL: {e}")
        return False
    except psycopg2.Error as e:
        print(f"‚ùå Error de PostgreSQL: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ DIAGN√ìSTICO RAILWAY DATABASE")
    print("=" * 60)
    
    success = diagnose_railway_database()
    
    if success:
        print(f"\nüéâ ¬°Diagn√≥stico exitoso!")
    else:
        print(f"\n‚ùå Error en el diagn√≥stico")
        sys.exit(1)
