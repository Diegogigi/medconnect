#!/usr/bin/env python3
"""
Script para probar el caso espec√≠fico de Fonoaudiolog√≠a con lactancia y frenillo lingual
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from medical_apis_integration import MedicalAPIsIntegration
import time

def test_caso_fonoaudiologia():
    """Prueba el caso espec√≠fico de fonoaudiolog√≠a con lactancia y frenillo lingual"""
    print("üè• PRUEBA CASO ESPEC√çFICO: FONOAUDIOLOG√çA - LACTANCIA Y FRENILLO LINGUAL")
    print("=" * 80)
    
    try:
        apis = MedicalAPIsIntegration()
        print("‚úÖ APIs m√©dicas inicializadas correctamente")
        
        # Caso espec√≠fico de fonoaudiolog√≠a
        caso = {
            "especialidad": "fonoaudiologia",
            "motivo_consulta": "Dificultad de lactancia, posible frenillo lingual corto, hiperbilirrubina por hipoalimentaci√≥n",
            "evaluacion": "Trenes de succi√≥n cortos, fatiga, se desacopla del pecho, chasquido lingual al succionar",
            "edad": "1 a√±o",
            "descripcion": "Paciente de 1 a√±o con problemas de lactancia y frenillo lingual"
        }
        
        print(f"\nüìã CASO CL√çNICO:")
        print(f"   Especialidad: '{caso['especialidad']}'")
        print(f"   Edad: '{caso['edad']}'")
        print(f"   Motivo de consulta: '{caso['motivo_consulta']}'")
        print(f"   Evaluaci√≥n: '{caso['evaluacion']}'")
        print("-" * 80)
        
        # Combinar toda la informaci√≥n cl√≠nica
        condicion_completa = f"{caso['motivo_consulta']} {caso['evaluacion']} {caso['edad']}"
        
        print(f"\nüîç Analizando informaci√≥n cl√≠nica completa...")
        print(f"   Condici√≥n combinada: '{condicion_completa}'")
        
        # Probar generaci√≥n de t√©rminos MeSH espec√≠ficos
        print(f"\nüîç Generando t√©rminos MeSH espec√≠ficos...")
        terminos_mesh = apis._generar_terminos_mesh_especificos(condicion_completa, caso['especialidad'])
        print(f"üìã T√©rminos MeSH generados: {terminos_mesh}")
        
        # Probar b√∫squeda en PubMed
        print(f"\nüîç Realizando b√∫squeda PubMed con t√©rminos espec√≠ficos...")
        start_time = time.time()
        
        tratamientos_pubmed = apis.buscar_tratamiento_pubmed(condicion_completa, caso['especialidad'])
        
        end_time = time.time()
        search_time = end_time - start_time
        
        if tratamientos_pubmed:
            print(f"‚úÖ Encontrados {len(tratamientos_pubmed)} tratamientos en PubMed")
            print(f"‚è±Ô∏è Tiempo de b√∫squeda: {search_time:.2f} segundos")
            
            for i, tratamiento in enumerate(tratamientos_pubmed[:5], 1):  # Mostrar 5 ejemplos
                print(f"\nüìã Tratamiento {i}:")
                print(f"   T√≠tulo: {tratamiento.titulo}")
                print(f"   DOI: {tratamiento.doi}")
                print(f"   Fecha: {tratamiento.fecha_publicacion}")
                print(f"   Nivel de evidencia: {tratamiento.nivel_evidencia}")
                
                if tratamiento.doi and tratamiento.doi != "Sin DOI":
                    print(f"   üîó Link: https://doi.org/{tratamiento.doi}")
                
                if tratamiento.autores:
                    print(f"   üë• Autores: {', '.join(tratamiento.autores[:3])}")
                
                if tratamiento.resumen:
                    print(f"   üìù Resumen: {tratamiento.resumen[:150]}...")
                
                # Verificar relevancia para el caso espec√≠fico
                relevancia = verificar_relevancia(tratamiento, caso)
                print(f"   üéØ Relevancia: {relevancia}")
        else:
            print(f"‚ùå No se encontraron tratamientos en PubMed")
            print(f"‚è±Ô∏è Tiempo de b√∫squeda: {search_time:.2f} segundos")
        
        # Probar b√∫squeda en Europe PMC
        print(f"\nüîç Realizando b√∫squeda Europe PMC...")
        start_time = time.time()
        
        tratamientos_europepmc = apis.buscar_europepmc(condicion_completa, caso['especialidad'])
        
        end_time = time.time()
        search_time = end_time - start_time
        
        if tratamientos_europepmc:
            print(f"‚úÖ Encontrados {len(tratamientos_europepmc)} tratamientos en Europe PMC")
            print(f"‚è±Ô∏è Tiempo de b√∫squeda: {search_time:.2f} segundos")
            
            for i, tratamiento in enumerate(tratamientos_europepmc[:3], 1):
                print(f"\nüìã Tratamiento {i}:")
                print(f"   T√≠tulo: {tratamiento.titulo}")
                print(f"   DOI: {tratamiento.doi}")
                print(f"   Fecha: {tratamiento.fecha_publicacion}")
                print(f"   Nivel de evidencia: {tratamiento.nivel_evidencia}")
                
                if tratamiento.doi and tratamiento.doi != "Sin DOI":
                    print(f"   üîó Link: https://doi.org/{tratamiento.doi}")
                
                if tratamiento.autores:
                    print(f"   üë• Autores: {', '.join(tratamiento.autores[:3])}")
                
                if tratamiento.resumen:
                    print(f"   üìù Resumen: {tratamiento.resumen[:150]}...")
                
                # Verificar relevancia para el caso espec√≠fico
                relevancia = verificar_relevancia(tratamiento, caso)
                print(f"   üéØ Relevancia: {relevancia}")
        else:
            print(f"‚ùå No se encontraron tratamientos en Europe PMC")
            print(f"‚è±Ô∏è Tiempo de b√∫squeda: {search_time:.2f} segundos")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en prueba de caso fonoaudiolog√≠a: {e}")
        return False

def verificar_relevancia(tratamiento, caso):
    """Verifica la relevancia del tratamiento para el caso espec√≠fico"""
    texto_completo = f"{tratamiento.titulo} {tratamiento.resumen}".lower()
    
    # Palabras clave espec√≠ficas del caso
    palabras_clave_caso = [
        'lactancia', 'lactation', 'breast feeding', 'breastfeeding',
        'frenillo', 'frenulum', 'ankyloglossia', 'tongue tie',
        'succion', 'suction', 'sucking',
        'hiperbilirrubina', 'hyperbilirubinemia', 'bilirubin',
        'hipoalimentacion', 'underfeeding', 'malnutrition',
        'fatiga', 'fatigue', 'desacopla', 'disconnect',
        'chasquido', 'clicking', 'lingual',
        'infant', 'baby', 'pediatric', 'child'
    ]
    
    # Contar coincidencias
    coincidencias = sum(1 for palabra in palabras_clave_caso if palabra in texto_completo)
    
    if coincidencias >= 3:
        return "üéØ MUY RELEVANTE - M√∫ltiples coincidencias con el caso"
    elif coincidencias >= 2:
        return "‚úÖ RELEVANTE - Algunas coincidencias con el caso"
    elif coincidencias >= 1:
        return "‚ö†Ô∏è PARCIALMENTE RELEVANTE - Pocas coincidencias"
    else:
        return "‚ùå NO RELEVANTE - Sin coincidencias espec√≠ficas"

def test_terminos_especificos_fonoaudiologia():
    """Prueba t√©rminos MeSH espec√≠ficos para fonoaudiolog√≠a"""
    print("\nüéØ PRUEBA DE T√âRMINOS MeSH ESPEC√çFICOS PARA FONOAUDIOLOG√çA")
    print("=" * 70)
    
    try:
        apis = MedicalAPIsIntegration()
        
        # Casos espec√≠ficos de fonoaudiolog√≠a
        casos_especificos = [
            "Dificultad de lactancia, posible frenillo lingual corto, hiperbilirrubina por hipoalimentaci√≥n. Trenes de succi√≥n cortos, fatiga, se desacopla del pecho, chasquido lingual al succionar. Paciente de 1 a√±o",
            "Problemas de degluci√≥n en ni√±o de 2 a√±os",
            "Trastornos del habla en paciente pedi√°trico",
            "Frenillo lingual corto y dificultades de alimentaci√≥n",
            "Hiperbilirrubinemia neonatal y problemas de lactancia"
        ]
        
        for i, condicion in enumerate(casos_especificos, 1):
            print(f"\nüìã Caso {i}: {condicion[:50]}...")
            
            # Probar generaci√≥n de t√©rminos MeSH
            terminos_mesh = apis._generar_terminos_mesh_especificos(condicion, "fonoaudiologia")
            print(f"   üîç T√©rminos MeSH: {terminos_mesh}")
            
            # Verificar que los t√©rminos son espec√≠ficos y relevantes
            terminos_relevantes = [
                'Breast Feeding', 'Lactation Disorders', 'Tongue', 'Ankyloglossia',
                'Deglutition Disorders', 'Dysphagia', 'Hyperbilirubinemia', 'Jaundice',
                'Malnutrition', 'Infant Nutrition Disorders', 'Fatigue', 'Feeding and Eating Disorders',
                'Tongue', 'Oral Manifestations', 'Infant', 'Child Development'
            ]
            
            for termino in terminos_mesh:
                if any(termino_relevante in termino for termino_relevante in terminos_relevantes):
                    print(f"   ‚úÖ T√©rmino relevante: {termino}")
                else:
                    print(f"   ‚ö†Ô∏è T√©rmino general: {termino}")
        
    except Exception as e:
        print(f"‚ùå Error en pruebas de t√©rminos espec√≠ficos: {e}")
        return False
    
    return True

def main():
    """Funci√≥n principal"""
    print("üöÄ PRUEBA CASO ESPEC√çFICO FONOAUDIOLOG√çA")
    print("=" * 80)
    
    try:
        # Probar t√©rminos espec√≠ficos
        success1 = test_terminos_especificos_fonoaudiologia()
        
        # Probar caso espec√≠fico completo
        success2 = test_caso_fonoaudiologia()
        
        if success1 and success2:
            print("\n\nüéâ ¬°PRUEBA CASO ESPEC√çFICO EXITOSA!")
            print("‚úÖ El sistema MeSH espec√≠fico est√° funcionando para casos complejos")
            
            print("\nüìä RESUMEN DE MEJORAS:")
            print("   ‚úÖ An√°lisis completo de informaci√≥n cl√≠nica")
            print("   ‚úÖ T√©rminos MeSH espec√≠ficos para lactancia y frenillo")
            print("   ‚úÖ Consideraci√≥n de edad del paciente (1 a√±o)")
            print("   ‚úÖ An√°lisis de s√≠ntomas espec√≠ficos (fatiga, desacoplamiento)")
            print("   ‚úÖ T√©rminos relevantes para hiperbilirrubinemia")
            print("   ‚úÖ Verificaci√≥n de relevancia de resultados")
            
            print("\nüéØ BENEFICIOS OBTENIDOS:")
            print("   ‚úÖ B√∫squedas m√°s espec√≠ficas y relevantes")
            print("   ‚úÖ Consideraci√≥n de toda la informaci√≥n cl√≠nica")
            print("   ‚úÖ T√©rminos MeSH alineados con el caso espec√≠fico")
            print("   ‚úÖ Resultados m√°s precisos para el diagn√≥stico")
            print("   ‚úÖ Cobertura de condiciones pedi√°tricas espec√≠ficas")
            
            print("\nüöÄ SISTEMA MEJORADO PARA CASOS COMPLEJOS")
            print("   ‚úÖ An√°lisis inteligente de informaci√≥n cl√≠nica")
            print("   ‚úÖ T√©rminos MeSH espec√≠ficos por condici√≥n")
            print("   ‚úÖ Resultados m√°s relevantes y precisos")
            print("   ‚úÖ Cobertura de casos pedi√°tricos complejos")
            
        else:
            print("\n‚ùå ALGUNAS PRUEBAS FALLARON")
            return False
        
    except Exception as e:
        print(f"\n‚ùå ERROR EN LAS PRUEBAS: {e}")
        return False
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 