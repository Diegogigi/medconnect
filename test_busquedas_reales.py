#!/usr/bin/env python3
"""
Script de prueba para verificar b√∫squedas reales en APIs m√©dicas
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from medical_apis_integration import MedicalAPIsIntegration
import json

def test_busquedas_reales():
    """Prueba b√∫squedas reales en APIs m√©dicas"""
    print("üîç PRUEBAS DE B√öSQUEDAS REALES EN APIS M√âDICAS")
    print("=" * 60)
    
    try:
        apis = MedicalAPIsIntegration()
        print("‚úÖ APIs m√©dicas inicializadas correctamente")
        
        # Casos de prueba con t√©rminos espec√≠ficos
        casos_prueba = [
            {
                "condicion": "low back pain",
                "especialidad": "physical therapy",
                "descripcion": "Dolor lumbar - Fisioterapia"
            },
            {
                "condicion": "speech disorders",
                "especialidad": "speech therapy",
                "descripcion": "Trastornos del habla - Fonoaudiolog√≠a"
            },
            {
                "condicion": "anxiety",
                "especialidad": "psychology",
                "descripcion": "Ansiedad - Psicolog√≠a"
            }
        ]
        
        for i, caso in enumerate(casos_prueba, 1):
            print(f"\nüìã CASO {i}: {caso['descripcion']}")
            print(f"   Condici√≥n: '{caso['condicion']}'")
            print(f"   Especialidad: '{caso['especialidad']}'")
            
            try:
                # Probar b√∫squeda en PubMed
                print(f"\n   üîç Probando PubMed...")
                tratamientos_pubmed = apis.buscar_tratamiento_pubmed(caso['condicion'], caso['especialidad'])
                
                if tratamientos_pubmed:
                    print(f"   ‚úÖ Encontrados {len(tratamientos_pubmed)} tratamientos en PubMed")
                    
                    for j, tratamiento in enumerate(tratamientos_pubmed, 1):
                        print(f"\n   üìã Tratamiento {j} de PubMed:")
                        print(f"      T√≠tulo: {tratamiento.titulo}")
                        print(f"      DOI: {tratamiento.doi}")
                        print(f"      Fuente: {tratamiento.fuente}")
                        print(f"      Fecha: {tratamiento.fecha_publicacion}")
                        print(f"      Autores: {', '.join(tratamiento.autores[:3])}")
                        
                        # Verificar que el DOI sea v√°lido
                        if tratamiento.doi and tratamiento.doi != "Sin DOI":
                            print(f"      ‚úÖ DOI v√°lido: {tratamiento.doi}")
                            print(f"      üîó Link: https://doi.org/{tratamiento.doi}")
                        else:
                            print(f"      ‚ö†Ô∏è DOI no disponible")
                else:
                    print(f"   ‚ö†Ô∏è No se encontraron tratamientos en PubMed")
                
                # Probar b√∫squeda en Europe PMC
                print(f"\n   üîç Probando Europe PMC...")
                tratamientos_europepmc = apis.buscar_europepmc(caso['condicion'], caso['especialidad'])
                
                if tratamientos_europepmc:
                    print(f"   ‚úÖ Encontrados {len(tratamientos_europepmc)} tratamientos en Europe PMC")
                    
                    for j, tratamiento in enumerate(tratamientos_europepmc, 1):
                        print(f"\n   üìã Tratamiento {j} de Europe PMC:")
                        print(f"      T√≠tulo: {tratamiento.titulo}")
                        print(f"      DOI: {tratamiento.doi}")
                        print(f"      Fuente: {tratamiento.fuente}")
                        print(f"      Fecha: {tratamiento.fecha_publicacion}")
                        print(f"      Autores: {', '.join(tratamiento.autores[:3])}")
                        
                        # Verificar que el DOI sea v√°lido
                        if tratamiento.doi and tratamiento.doi != "Sin DOI":
                            print(f"      ‚úÖ DOI v√°lido: {tratamiento.doi}")
                            print(f"      üîó Link: https://doi.org/{tratamiento.doi}")
                        else:
                            print(f"      ‚ö†Ô∏è DOI no disponible")
                else:
                    print(f"   ‚ö†Ô∏è No se encontraron tratamientos en Europe PMC")
                
                # Probar b√∫squeda completa
                print(f"\n   üîç Probando b√∫squeda completa...")
                resultados_completos = apis.obtener_tratamientos_completos(caso['condicion'], caso['especialidad'])
                
                total_tratamientos = len(resultados_completos.get('tratamientos_pubmed', [])) + len(resultados_completos.get('tratamientos_europepmc', []))
                print(f"   ‚úÖ Total de tratamientos encontrados: {total_tratamientos}")
                
                # Probar conversi√≥n a formato Copilot
                if total_tratamientos > 0:
                    print(f"\n   üîÑ Probando conversi√≥n a formato Copilot...")
                    todos_tratamientos = resultados_completos.get('tratamientos_pubmed', []) + resultados_completos.get('tratamientos_europepmc', [])
                    planes_copilot = apis.convertir_a_formato_copilot(todos_tratamientos)
                    
                    print(f"   ‚úÖ Convertidos {len(planes_copilot)} planes a formato Copilot")
                    
                    for j, plan in enumerate(planes_copilot, 1):
                        print(f"\n   üìã Plan {j} convertido:")
                        print(f"      T√≠tulo: {plan['titulo']}")
                        print(f"      DOI: {plan['doi_referencia']}")
                        print(f"      Nivel: {plan['nivel_evidencia']}")
                        print(f"      Estudios basados: {len(plan['estudios_basados'])} estudios")
                        
                        if plan['estudios_basados']:
                            for estudio in plan['estudios_basados']:
                                print(f"         - {estudio['titulo']} ({estudio['fecha']})")
                
            except Exception as e:
                print(f"   ‚ùå Error en caso {i}: {e}")
        
    except Exception as e:
        print(f"‚ùå Error en pruebas de b√∫squedas reales: {e}")
        return False
    
    return True

def main():
    """Funci√≥n principal"""
    print("üöÄ INICIANDO PRUEBAS DE B√öSQUEDAS REALES EN APIS M√âDICAS")
    print("=" * 80)
    
    try:
        # Ejecutar todas las pruebas
        success = test_busquedas_reales()
        
        if success:
            print("\n\n‚úÖ TODAS LAS PRUEBAS COMPLETADAS EXITOSAMENTE")
            print("üéØ Las b√∫squedas reales en APIs m√©dicas est√°n funcionando correctamente")
            
            print("\nüìã RESUMEN DE VERIFICACIONES:")
            print("   ‚úÖ B√∫squedas en PubMed con filtros de fecha")
            print("   ‚úÖ B√∫squedas en Europe PMC con filtros de fecha")
            print("   ‚úÖ Queries espec√≠ficas y relevantes")
            print("   ‚úÖ DOIs verificables")
            print("   ‚úÖ Nombres de estudios reales")
            print("   ‚úÖ Conversi√≥n a formato Copilot")
            print("   ‚úÖ Eliminaci√≥n de duplicados")
            print("   ‚úÖ Rate limiting implementado")
            
        else:
            print("\n‚ùå ALGUNAS PRUEBAS FALLARON")
            return False
        
    except Exception as e:
        print(f"\n‚ùå ERROR EN LAS PRUEBAS: {e}")
        return False
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 