#!/usr/bin/env python3
"""
Script para corregir el problema espec√≠fico del JavaScript mostr√°ndose en la interfaz
"""


def fix_javascript_issue():
    """Corrige el problema del JavaScript mostr√°ndose en la interfaz"""

    template_path = "templates/professional.html"

    # Leer el archivo
    with open(template_path, "r", encoding="utf-8") as f:
        content = f.read()

    print("üîç Analizando el problema del JavaScript...")

    # Verificar si hay JavaScript suelto (fuera de etiquetas script)
    lines = content.split("\n")
    javascript_outside_script = []

    for i, line in enumerate(lines, 1):
        if line.strip().startswith("//") and not line.strip().startswith("// "):
            # Buscar si esta l√≠nea est√° dentro de un bloque script
            script_start = content.find("<script>", 0, content.find(line))
            script_end = content.find("</script>", 0, content.find(line))

            if script_start == -1 or script_end == -1 or script_start > script_end:
                javascript_outside_script.append((i, line))

    if javascript_outside_script:
        print(
            f"‚ùå Se encontraron {len(javascript_outside_script)} l√≠neas de JavaScript fuera de etiquetas script:"
        )
        for line_num, line in javascript_outside_script:
            print(f"   L√≠nea {line_num}: {line.strip()}")

        # Corregir el problema
        print("üîß Corrigiendo el problema...")

        # Buscar y reemplazar el JavaScript mal formateado
        # Buscar el patr√≥n espec√≠fico que est√° causando el problema
        problematic_patterns = [
            "// Funciones de utilidad para la IA",
            "window.showAINotification",
            "window.updateAIStatus",
            "window.showAIProgress",
            "window.hideAIProgress",
        ]

        # Verificar si el JavaScript est√° correctamente dentro de etiquetas script
        script_start = content.find("<script>")
        script_end = content.find("</script>")

        if script_start != -1 and script_end != -1:
            script_content = content[script_start:script_end]

            # Verificar si todas las funciones est√°n dentro del script
            all_functions_in_script = all(
                pattern in script_content for pattern in problematic_patterns
            )

            if all_functions_in_script:
                print(
                    "‚úÖ El JavaScript est√° correctamente dentro de etiquetas <script>"
                )
                print("üîç El problema puede estar en el navegador o en el CSS")

                # Verificar si hay alg√∫n problema con el CSS
                css_link = (
                    '<link rel="stylesheet" href="/static/css/enhanced-sidebar-ai.css">'
                )
                if css_link in content:
                    print("‚úÖ CSS de la sidebar est√° incluido")
                else:
                    print("‚ùå CSS de la sidebar no est√° incluido")
                    # Agregar el CSS
                    content = content.replace(
                        '<link rel="stylesheet" href="/static/css/patient-styles.css">',
                        '<link rel="stylesheet" href="/static/css/patient-styles.css">\n    <link rel="stylesheet" href="/static/css/enhanced-sidebar-ai.css">',
                    )

                # Verificar si el JavaScript est√° siendo cargado correctamente
                js_script = '<script src="/static/js/enhanced-sidebar-ai.js"></script>'
                if js_script in content:
                    print("‚úÖ JavaScript de la sidebar est√° incluido")
                else:
                    print("‚ùå JavaScript de la sidebar no est√° incluido")

                # Escribir el archivo corregido
                with open(template_path, "w", encoding="utf-8") as f:
                    f.write(content)

                print("‚úÖ Archivo corregido")
                return True
            else:
                print("‚ùå Algunas funciones no est√°n dentro de etiquetas script")
                return False
        else:
            print("‚ùå No se encontraron etiquetas script")
            return False
    else:
        print("‚úÖ No se encontr√≥ JavaScript fuera de etiquetas script")
        print("üîç El problema puede estar en el navegador")
        return True


def create_debug_script():
    """Crea un script de debug para verificar el problema"""

    debug_script = """
// Script de debug para verificar el problema del JavaScript
console.log('üîç Debug: Verificando JavaScript de la sidebar...');

// Verificar si las funciones est√°n disponibles
console.log('showAINotification disponible:', typeof window.showAINotification);
console.log('updateAIStatus disponible:', typeof window.updateAIStatus);
console.log('showAIProgress disponible:', typeof window.showAIProgress);
console.log('hideAIProgress disponible:', typeof window.hideAIProgress);

// Verificar si EnhancedSidebarAI est√° disponible
console.log('EnhancedSidebarAI disponible:', typeof window.enhancedAI);

// Verificar elementos del DOM
console.log('aiStatusDot:', document.getElementById('aiStatusDot'));
console.log('aiStatusText:', document.getElementById('aiStatusText'));
console.log('aiProgress:', document.getElementById('aiProgress'));

// Probar una funci√≥n
if (typeof window.showAINotification === 'function') {
    console.log('‚úÖ Funci√≥n showAINotification funciona');
    window.showAINotification('Prueba de notificaci√≥n', 'success');
} else {
    console.log('‚ùå Funci√≥n showAINotification no est√° disponible');
}

console.log('üîç Debug completado');
"""

    with open("static/js/debug-sidebar.js", "w", encoding="utf-8") as f:
        f.write(debug_script)

    print("‚úÖ Script de debug creado: static/js/debug-sidebar.js")


def main():
    """Funci√≥n principal"""
    print("üîß Corrigiendo problema del JavaScript en la interfaz...")

    if fix_javascript_issue():
        print("\n‚úÖ Problema corregido o no encontrado")

        # Crear script de debug
        create_debug_script()

        print("\nüìã Instrucciones para debug:")
        print("1. Abre la consola del navegador (F12)")
        print("2. Recarga la p√°gina")
        print("3. Busca mensajes de error relacionados con JavaScript")
        print(
            "4. Si ves c√≥digo JavaScript en la p√°gina, puede ser un problema de cach√©"
        )
        print("5. Intenta Ctrl+F5 para recarga forzada")

        print("\nüîß Si el problema persiste:")
        print("- Limpia la cach√© del navegador")
        print("- Verifica que no haya errores en la consola")
        print("- Aseg√∫rate de que el servidor est√© ejecut√°ndose")

    else:
        print("\n‚ùå No se pudo corregir el problema")


if __name__ == "__main__":
    main()
