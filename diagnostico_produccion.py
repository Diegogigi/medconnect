#!/usr/bin/env python3
"""
Script para diagnosticar el problema en producci√≥n
Verificar si la API key est√° configurada correctamente en Railway
"""

import os
import requests
import json
from datetime import datetime


def check_production_environment():
    """Verificar el entorno de producci√≥n"""
    print("üîç Diagn√≥stico de Producci√≥n - Railway")
    print(f"üìÖ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)

    # Verificar variables de entorno
    print("üìã Verificando variables de entorno...")
    print("=" * 50)

    env_vars = [
        "RAILWAY_ENVIRONMENT",
        "RAILWAY_STATIC_URL",
        "DOMAIN",
        "FLASK_ENV",
        "OPENROUTER_API_KEY",
    ]

    for var in env_vars:
        value = os.getenv(var)
        if value:
            if var == "OPENROUTER_API_KEY":
                masked_value = (
                    f"{value[:10]}...{value[-10:]}" if len(value) > 20 else "***"
                )
                print(f"‚úÖ {var}: {masked_value}")
            else:
                print(f"‚úÖ {var}: {value}")
        else:
            print(f"‚ùå {var}: NO CONFIGURADA")

    return os.getenv("OPENROUTER_API_KEY")


def test_production_api_key():
    """Probar la API key en producci√≥n"""
    print("\nüîó Probando API key de producci√≥n...")
    print("=" * 50)

    api_key = os.getenv("OPENROUTER_API_KEY")

    if not api_key:
        print("‚ùå OPENROUTER_API_KEY no est√° configurada en Railway")
        return False, None

    # Probar con la nueva API key
    new_api_key = (
        "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"
    )

    if api_key == new_api_key:
        print("‚úÖ API key correcta configurada")
    else:
        print(f"‚ùå API key incorrecta: {api_key[:10]}...{api_key[-10:]}")
        print(f"   Deber√≠a ser: {new_api_key[:10]}...{new_api_key[-10:]}")
        return False, api_key

    # Probar conexi√≥n
    try:
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json",
        }

        payload = {
            "model": "deepseek/deepseek-r1:free",
            "messages": [
                {
                    "role": "system",
                    "content": "Eres un asistente de prueba. Responde solo 'OK' si recibes este mensaje.",
                },
                {"role": "user", "content": "Test de conexi√≥n"},
            ],
            "max_tokens": 10,
            "temperature": 0.1,
        }

        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json=payload,
            timeout=30,
        )

        if response.status_code == 200:
            print("‚úÖ Conexi√≥n exitosa con OpenRouter")
            return True, api_key
        else:
            print(f"‚ùå Error de conexi√≥n: {response.status_code}")
            print(f"   Respuesta: {response.text[:200]}")
            return False, api_key

    except Exception as e:
        print(f"‚ùå Error probando conexi√≥n: {e}")
        return False, api_key


def check_railway_deployment():
    """Verificar el despliegue en Railway"""
    print("\nüöÇ Verificando despliegue en Railway...")
    print("=" * 50)

    # Obtener URL del servicio
    railway_url = os.getenv("RAILWAY_STATIC_URL") or os.getenv("DOMAIN")

    if not railway_url:
        print("‚ùå No se pudo determinar la URL del servicio")
        return False

    if not railway_url.startswith(("http://", "https://")):
        railway_url = f"https://{railway_url}"

    print(f"üåê URL del servicio: {railway_url}")

    try:
        # Probar health check
        health_url = f"{railway_url}/health"
        print(f"üîç Probando: {health_url}")

        response = requests.get(health_url, timeout=10)

        if response.status_code == 200:
            print("‚úÖ Health check exitoso")

            # Probar endpoint de chat
            chat_url = f"{railway_url}/api/copilot/chat"
            print(f"üîç Probando endpoint de chat...")

            test_payload = {"message": "Test de conexi√≥n", "context": {}}

            chat_response = requests.post(chat_url, json=test_payload, timeout=30)

            if chat_response.status_code == 200:
                print("‚úÖ Endpoint de chat funcionando")
                return True
            else:
                print(f"‚ùå Endpoint de chat: {chat_response.status_code}")
                print(f"   Respuesta: {chat_response.text[:200]}")
                return False
        else:
            print(f"‚ùå Health check fall√≥: {response.status_code}")
            return False

    except Exception as e:
        print(f"‚ùå Error verificando Railway: {e}")
        return False


def generate_railway_fix_instructions():
    """Generar instrucciones para arreglar Railway"""
    print("\nüîß INSTRUCCIONES PARA ARREGLAR RAILWAY")
    print("=" * 50)

    print("1Ô∏è‚É£ Ir a Railway Dashboard:")
    print("   https://railway.app/dashboard")

    print("\n2Ô∏è‚É£ Seleccionar proyecto MedConnect")

    print("\n3Ô∏è‚É£ Ir a la pesta√±a 'Variables'")

    print("\n4Ô∏è‚É£ Buscar y actualizar OPENROUTER_API_KEY:")
    print("   - Si existe: Actualizar el valor")
    print("   - Si no existe: Crear nueva variable")
    print("   - Nombre: OPENROUTER_API_KEY")
    print(
        "   - Valor: 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"
    )

    print("\n5Ô∏è‚É£ Verificar otras variables:")
    print("   - RAILWAY_ENVIRONMENT = production")
    print("   - FLASK_ENV = production")
    print("   - SECRET_KEY = [tu-clave-secreta]")

    print("\n6Ô∏è‚É£ Hacer redeploy:")
    print("   - Click en 'Deploy'")
    print("   - Esperar que termine el despliegue")
    print("   - Verificar logs")

    print("\n7Ô∏è‚É£ Probar la aplicaci√≥n:")
    print("   - Ir a la URL de Railway")
    print("   - Probar el chat de Copilot Health")
    print("   - Verificar que no aparezcan errores")


def main():
    """Funci√≥n principal"""
    print("üöÄ Diagn√≥stico de Problema en Producci√≥n")
    print("=" * 60)

    # 1. Verificar entorno
    current_api_key = check_production_environment()

    # 2. Probar API key
    api_ok, api_key = test_production_api_key()

    # 3. Verificar Railway
    railway_ok = check_railway_deployment()

    # Resumen
    print("\n" + "=" * 60)
    print("üìä RESUMEN DEL DIAGN√ìSTICO")
    print("=" * 60)

    if api_ok and railway_ok:
        print("‚úÖ TODO FUNCIONANDO CORRECTAMENTE")
        print("   - API key configurada y funcionando")
        print("   - Railway desplegado correctamente")
    elif api_ok:
        print("‚ö†Ô∏è API key OK, pero Railway puede tener problemas")
    elif railway_ok:
        print("‚ö†Ô∏è Railway OK, pero API key no configurada")
    else:
        print("‚ùå PROBLEMAS DETECTADOS")
        print("   - API key no configurada o incorrecta")
        print("   - Railway puede tener problemas")

    print("\nüîß PROBLEMA PRINCIPAL:")
    if not current_api_key:
        print("   ‚ùå OPENROUTER_API_KEY no est√° configurada en Railway")
        print(
            "   üí° La aplicaci√≥n est√° usando la API key hardcodeada (que puede estar expirada)"
        )
    elif not api_ok:
        print("   ‚ùå API key configurada pero no funciona")
        print("   üí° Verificar que sea la correcta")
    else:
        print("   ‚úÖ API key configurada correctamente")

    print("\nüí° SOLUCI√ìN:")
    if not current_api_key or not api_ok:
        generate_railway_fix_instructions()
    else:
        print("   - El problema puede estar en otro lugar")
        print("   - Verificar logs de Railway")
        print("   - Revisar configuraci√≥n de la aplicaci√≥n")

    print("=" * 60)


if __name__ == "__main__":
    main()
