#!/usr/bin/env python3
"""
Script de debug para verificar la generaci√≥n de planes de intervenci√≥n
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from medical_apis_integration import MedicalAPIsIntegration

def test_deteccion_condiciones():
    """Prueba la detecci√≥n de condiciones espec√≠ficas"""
    print("üîç Probando detecci√≥n de condiciones espec√≠ficas...")
    
    apis = MedicalAPIsIntegration()
    
    casos_prueba = [
        "Lactante con s√≠ndrome moebius con dificultad en lactancia materna y bajo peso",
        "Paciente con frenillo lingual corto y dificultad para tragar",
        "Adulto con dolor lumbar cr√≥nico de 3 meses",
        "Paciente con disfagia post-ictus"
    ]
    
    for i, caso in enumerate(casos_prueba, 1):
        print(f"\nüìã Caso {i}: {caso}")
        condiciones = apis._detectar_condiciones_especificas(caso)
        print(f"   Condiciones detectadas: {condiciones}")
        
        # Verificar t√©rminos espec√≠ficos
        for condicion in condiciones:
            if condicion in apis.condiciones_especificas:
                info = apis.condiciones_especificas[condicion]
                print(f"   ‚úÖ {condicion}: {len(info['terminos'])} t√©rminos, {len(info['mesh_terms'])} t√©rminos MeSH")

def test_generacion_planes():
    """Prueba la generaci√≥n de planes de intervenci√≥n"""
    print("\nüíä Probando generaci√≥n de planes de intervenci√≥n...")
    
    apis = MedicalAPIsIntegration()
    
    casos_prueba = [
        {
            'condicion': "Lactante con s√≠ndrome moebius con dificultad en lactancia materna y bajo peso",
            'especialidad': 'fonoaudiologia'
        },
        {
            'condicion': "Paciente con frenillo lingual corto y dificultad para tragar",
            'especialidad': 'fonoaudiologia'
        },
        {
            'condicion': "Adulto con dolor lumbar cr√≥nico de 3 meses",
            'especialidad': 'fisioterapia'
        }
    ]
    
    for i, caso in enumerate(casos_prueba, 1):
        print(f"\nüìã Caso {i}: {caso['condicion']}")
        print(f"   Especialidad: {caso['especialidad']}")
        
        # Detectar condiciones
        condiciones = apis._detectar_condiciones_especificas(caso['condicion'])
        print(f"   Condiciones detectadas: {condiciones}")
        
        # Generar plan de intervenci√≥n
        plan = apis._generar_plan_intervencion_especifico(
            caso['condicion'], 
            caso['especialidad'], 
            []
        )
        
        print(f"   ‚úÖ Plan generado: {plan.titulo}")
        print(f"   T√©cnicas espec√≠ficas: {len(plan.tecnicas_especificas)}")
        print(f"   Aplicaciones pr√°cticas: {len(plan.aplicaciones_practicas)}")
        print(f"   T√©cnicas de masaje: {len(plan.masajes_tecnicas)}")
        print(f"   Ejercicios espec√≠ficos: {len(plan.ejercicios_especificos)}")
        print(f"   Protocolo: {len(plan.protocolo_tratamiento)} pasos")
        
        # Mostrar algunas t√©cnicas
        if plan.tecnicas_especificas:
            print(f"   T√©cnicas: {plan.tecnicas_especificas[:3]}")

def test_busqueda_mejorada():
    """Prueba la b√∫squeda mejorada con condiciones espec√≠ficas"""
    print("\nüîç Probando b√∫squeda mejorada...")
    
    apis = MedicalAPIsIntegration()
    
    condicion = "Lactante con s√≠ndrome moebius con dificultad en lactancia materna y bajo peso"
    especialidad = "fonoaudiologia"
    
    print(f"üìã Condici√≥n: {condicion}")
    print(f"üè• Especialidad: {especialidad}")
    
    # Obtener tratamientos completos
    resultados = apis.obtener_tratamientos_completos(condicion, especialidad)
    
    print(f"\n‚úÖ Resultados obtenidos:")
    print(f"   Tratamientos PubMed: {len(resultados.get('tratamientos_pubmed', []))}")
    print(f"   Tratamientos Europe PMC: {len(resultados.get('tratamientos_europepmc', []))}")
    print(f"   Plan de intervenci√≥n: {'S√≠' if resultados.get('plan_intervencion') else 'No'}")
    
    if resultados.get('plan_intervencion'):
        plan = resultados['plan_intervencion']
        print(f"\nüéØ PLAN DE INTERVENCI√ìN GENERADO:")
        print(f"   T√≠tulo: {plan.titulo}")
        print(f"   T√©cnicas espec√≠ficas: {len(plan.tecnicas_especificas)}")
        print(f"   Aplicaciones pr√°cticas: {len(plan.aplicaciones_practicas)}")
        print(f"   T√©cnicas de masaje: {len(plan.masajes_tecnicas)}")
        print(f"   Ejercicios espec√≠ficos: {len(plan.ejercicios_especificos)}")
        
        # Mostrar t√©cnicas espec√≠ficas
        print(f"\nüí° T√âCNICAS ESPEC√çFICAS:")
        for i, tecnica in enumerate(plan.tecnicas_especificas, 1):
            print(f"   {i}. {tecnica}")
        
        print(f"\nüîß APLICACIONES PR√ÅCTICAS:")
        for i, aplicacion in enumerate(plan.aplicaciones_practicas, 1):
            print(f"   {i}. {aplicacion}")
        
        print(f"\nüíÜ T√âCNICAS DE MASAJE:")
        for i, masaje in enumerate(plan.masajes_tecnicas, 1):
            print(f"   {i}. {masaje}")
        
        print(f"\nüèÉ EJERCICIOS ESPEC√çFICOS:")
        for i, ejercicio in enumerate(plan.ejercicios_especificos, 1):
            print(f"   {i}. {ejercicio}")
        
        print(f"\nüìã PROTOCOLO DE TRATAMIENTO:")
        for i, paso in enumerate(plan.protocolo_tratamiento, 1):
            print(f"   {i}. {paso}")
        
        print(f"\n‚è∞ FRECUENCIA: {plan.frecuencia_sesiones}")
        print(f"üìÖ DURACI√ìN: {plan.duracion_tratamiento}")

def main():
    """Funci√≥n principal de debug"""
    print("üîß DEBUG DEL SISTEMA DE PLANES DE INTERVENCI√ìN")
    print("=" * 60)
    
    try:
        # Prueba 1: Detecci√≥n de condiciones
        test_deteccion_condiciones()
        
        # Prueba 2: Generaci√≥n de planes
        test_generacion_planes()
        
        # Prueba 3: B√∫squeda mejorada
        test_busqueda_mejorada()
        
        print("\n‚úÖ Debug completado!")
        
    except Exception as e:
        print(f"\n‚ùå Error durante el debug: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 