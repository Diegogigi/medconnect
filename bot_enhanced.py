#!/usr/bin/env python3
"""
Bot Mejorado de MedConnect - Experiencia de Usuario Excepcional
"""

import os
import requests
import time
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import re

# Importar el gestor de base de datos
from backend.database.sheets_manager import SheetsManager

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class EnhancedMedConnectBot:
    def __init__(self):
        self.bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
        self.last_update_id = 0
        self.db = None
        self.user_states = {}  # Para manejar conversaciones inteligentes
        self.temp_data = {}    # Para almacenar datos temporales
        
        if not self.bot_token:
            logger.error("‚ùå TELEGRAM_BOT_TOKEN no configurado")
            exit(1)
        
        # Inicializar base de datos
        try:
            self.db = SheetsManager()
            logger.info("‚úÖ Base de datos conectada")
        except Exception as e:
            logger.error(f"‚ùå Error conectando base de datos: {e}")
            self.db = None
        
        logger.info("‚úÖ Bot mejorado iniciado")
    
    def send_message(self, chat_id, text, reply_markup=None):
        """Env√≠a un mensaje con opciones de teclado"""
        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            data = {
                'chat_id': chat_id,
                'text': text,
                'parse_mode': 'HTML'
            }
            
            if reply_markup:
                data['reply_markup'] = reply_markup
            
            response = requests.post(url, json=data, timeout=10)
            response.raise_for_status()
            logger.info(f"‚úÖ Mensaje enviado a {chat_id}")
            return True
        except Exception as e:
            logger.error(f"‚ùå Error enviando mensaje: {e}")
            return False
    
    def create_keyboard(self, options, one_time=True, inline=False):
        """Crea un teclado personalizado"""
        if inline:
            keyboard = []
            for option in options:
                keyboard.append([{"text": option, "callback_data": option.lower().replace(' ', '_')}])
            return {"inline_keyboard": keyboard}
        else:
            keyboard = []
            for option in options:
                keyboard.append([{"text": option}])
            return {
                "keyboard": keyboard,
                "one_time_keyboard": one_time,
                "resize_keyboard": True
            }
    
    def get_user_info(self, telegram_id):
        """Obtiene informaci√≥n del usuario desde la base de datos"""
        if not self.db:
            logger.error("‚ùå Base de datos no disponible")
            return None
            
        try:
            user = self.db.get_user_by_telegram_id(str(telegram_id))
            if user:
                logger.info(f"‚úÖ Usuario encontrado: {user.get('nombre', 'N/A')}")
            else:
                logger.info(f"‚ùå Usuario no encontrado para Telegram ID: {telegram_id}")
            return user
        except Exception as e:
            logger.error(f"Error obteniendo usuario: {e}")
            return None
    
    def register_user(self, telegram_id, username, first_name, last_name):
        """Registra un nuevo usuario"""
        if not self.db:
            logger.error("‚ùå Base de datos no disponible")
            return None
            
        try:
            user_data = {
                'telegram_id': str(telegram_id),
                'nombre': first_name or username,
                'apellido': last_name or '',
                'fecha_registro': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
            user_id = self.db.create_user(user_data)
            logger.info(f"Usuario registrado: {user_id}")
            return user_id
        except Exception as e:
            logger.error(f"Error registrando usuario: {e}")
            return None
    
    def save_exam(self, user_id, exam_data):
        """Guarda un examen en la base de datos"""
        if not self.db:
            return None
            
        try:
            exam_id = self.db.create_examen({
                'user_id': user_id,
                'tipo_examen': exam_data.get('tipo', ''),
                'nombre_examen': exam_data.get('nombre', ''),
                'fecha_realizacion': exam_data.get('fecha', ''),
                'resultado': exam_data.get('resultado', ''),
                'observaciones': exam_data.get('observaciones', '')
            })
            logger.info(f"Examen guardado: {exam_id}")
            return exam_id
        except Exception as e:
            logger.error(f"Error guardando examen: {e}")
            return None
    
    def save_medication(self, user_id, med_data):
        """Guarda un medicamento en la base de datos"""
        if not self.db:
            return None
            
        try:
            med_id = self.db.create_medicamento({
                'user_id': user_id,
                'nombre_medicamento': med_data.get('nombre', ''),
                'dosis': med_data.get('dosis', ''),
                'frecuencia': med_data.get('frecuencia', ''),
                'duracion': med_data.get('duracion', ''),
                'indicaciones': med_data.get('indicaciones', ''),
                'fecha_inicio': datetime.now().strftime('%Y-%m-%d')
            })
            logger.info(f"Medicamento guardado: {med_id}")
            return med_id
        except Exception as e:
            logger.error(f"Error guardando medicamento: {e}")
            return None
    
    def get_user_state(self, chat_id):
        """Obtiene el estado actual del usuario"""
        return self.user_states.get(chat_id, {'state': 'idle', 'data': {}})
    
    def set_user_state(self, chat_id, state, data=None):
        """Establece el estado del usuario"""
        if data is None:
            data = {}
        self.user_states[chat_id] = {'state': state, 'data': data}
        logger.info(f"Estado de usuario {chat_id}: {state}")
    
    def clear_user_state(self, chat_id):
        """Limpia el estado del usuario"""
        if chat_id in self.user_states:
            del self.user_states[chat_id]
        if chat_id in self.temp_data:
            del self.temp_data[chat_id]
    
    def process_message(self, message):
        """Procesa mensajes con l√≥gica mejorada"""
        try:
            text = message.get('text', '').strip()
            chat_id = message['chat']['id']
            user_id = message['from']['id']
            username = message['from'].get('username', 'Usuario')
            first_name = message['from'].get('first_name', '')
            last_name = message['from'].get('last_name', '')
            
            logger.info(f"üì® Mensaje de {username} ({user_id}): {text}")
            
            # Verificar si el usuario est√° registrado
            user = self.get_user_info(user_id)
            
            # Obtener estado actual
            current_state = self.get_user_state(chat_id)
            
            # Procesar comandos principales (siempre disponibles)
            if text == '/start':
                self.clear_user_state(chat_id)
                self.handle_start(chat_id, user, first_name, username)
            elif text == '/registro':
                self.clear_user_state(chat_id)
                self.handle_registration(chat_id, user_id, username, first_name, last_name)
            elif text == '/ayuda':
                self.clear_user_state(chat_id)
                self.handle_help(chat_id)
            elif text == '/estado':
                self.handle_status(chat_id)
            elif text == '/cancelar':
                self.clear_user_state(chat_id)
                self.send_message(chat_id, "‚úÖ Operaci√≥n cancelada. ¬øEn qu√© puedo ayudarte?")
            else:
                # Procesar seg√∫n el estado actual
                self.handle_state_based_message(chat_id, text, user, current_state)
            
        except Exception as e:
            logger.error(f"‚ùå Error procesando mensaje: {e}")
            try:
                self.send_message(chat_id, "‚ùå Error procesando tu mensaje. Intenta m√°s tarde.")
            except:
                pass
    
    def handle_state_based_message(self, chat_id, text, user, current_state):
        """Maneja mensajes seg√∫n el estado actual del usuario"""
        state = current_state['state']
        data = current_state['data']
        
        # Si el usuario no est√° registrado, pedir registro
        if not user and state != 'registering':
            self.send_message(chat_id, "üîê Primero debes registrarte con /registro para usar esta funci√≥n.")
            return
        
        # Procesar seg√∫n el estado
        if state == 'idle':
            self.handle_natural_language(chat_id, text, user)
        elif state == 'registering':
            self.handle_registration_flow(chat_id, text, user)
        elif state == 'adding_exam':
            self.handle_exam_flow(chat_id, text, user, data)
        elif state == 'adding_medication':
            self.handle_medication_flow(chat_id, text, user, data)
        elif state == 'adding_appointment':
            self.handle_appointment_flow(chat_id, text, user, data)
        else:
            # Estado desconocido, volver a idle
            self.set_user_state(chat_id, 'idle')
            self.handle_natural_language(chat_id, text, user)
    
    def handle_start(self, chat_id, user, first_name, username):
        """Maneja el comando /start con experiencia mejorada"""
        if user:
            # Usuario registrado
            user_name = user.get('nombre', first_name or username)
            response = f"""ü§ñ <b>¬°Bienvenido de vuelta, {user_name}! üëã</b>

üè• <b>Tu asistente m√©dico personal</b>

üí° <b>¬øQu√© te gustar√≠a hacer hoy?</b>

üìã <b>Gestionar informaci√≥n:</b>
‚Ä¢ Ver mi historial m√©dico
‚Ä¢ Registrar un nuevo examen
‚Ä¢ Agregar un medicamento
‚Ä¢ Programar una consulta

üîç <b>Consultar datos:</b>
‚Ä¢ Ver mis medicamentos activos
‚Ä¢ Revisar mis ex√°menes
‚Ä¢ Ver pr√≥ximas citas

‚öôÔ∏è <b>Configuraci√≥n:</b>
‚Ä¢ Gestionar familiares
‚Ä¢ Configurar recordatorios

üí¨ <b>Tambi√©n puedes escribir de forma natural:</b>
‚Ä¢ "Tengo un eco abdominal"
‚Ä¢ "Necesito registrar un medicamento"
‚Ä¢ "Mu√©strame mi historial"

üåê <b>Sitio web:</b> https://www.medconnect.cl

¬°Estoy aqu√≠ para ayudarte! ü©∫"""
        else:
            # Usuario no registrado
            response = """ü§ñ <b>¬°Bienvenido a MedConnect! üëã</b>

üè• <b>Tu asistente m√©dico personal</b>

üéØ <b>¬øQu√© es MedConnect?</b>
Es tu compa√±ero digital para gestionar toda tu informaci√≥n m√©dica de forma segura y organizada.

üîê <b>Para comenzar, necesitas registrarte:</b>

üìù <b>Opciones de registro:</b>
‚Ä¢ /registro - Registrarte aqu√≠ mismo (r√°pido y f√°cil)
‚Ä¢ üåê <a href="https://www.medconnect.cl/register">Registrarte en la web</a> (m√°s opciones)

üéÅ <b>Una vez registrado podr√°s:</b>
‚Ä¢ üìã Ver tu historial m√©dico completo
‚Ä¢ üíä Gestionar medicamentos con recordatorios
‚Ä¢ üî¨ Subir y organizar resultados de ex√°menes
‚Ä¢ üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Compartir informaci√≥n con familiares
‚Ä¢ ‚è∞ Recibir alertas y recordatorios
‚Ä¢ üè• Programar y gestionar citas m√©dicas

üí° <b>¬øPor qu√© registrarse?</b>
‚Ä¢ Informaci√≥n centralizada y segura
‚Ä¢ Acceso desde cualquier dispositivo
‚Ä¢ Historial m√©dico completo
‚Ä¢ Recordatorios autom√°ticos
‚Ä¢ Compartir con profesionales de la salud

¬øQuieres registrarte ahora? Es r√°pido y gratuito! üìù"""
        
        keyboard = self.create_keyboard([
            "üìã Ver Historial",
            "üî¨ Registrar Examen", 
            "üíä Agregar Medicamento",
            "üè• Programar Cita",
            "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Gestionar Familia",
            "‚öôÔ∏è Configuraci√≥n"
        ])
        
        self.send_message(chat_id, response, keyboard)
    
    def handle_registration(self, chat_id, telegram_id, username, first_name, last_name):
        """Inicia el flujo de registro mejorado"""
        self.set_user_state(chat_id, 'registering', {
            'telegram_id': telegram_id,
            'username': username,
            'first_name': first_name,
            'last_name': last_name
        })
        
        response = """üìù <b>¬°Perfecto! Vamos a registrarte en MedConnect</b>

üë§ <b>Informaci√≥n que tengo de ti:</b>
‚Ä¢ Nombre: {first_name or username}
‚Ä¢ Usuario: @{username}

‚úÖ <b>¬øEs correcta esta informaci√≥n?</b>

Si es correcta, escribe "S√≠" o "Correcto"
Si quieres modificarla, escribe "No" o "Cambiar"

üí° <b>Tambi√©n puedes:</b>
‚Ä¢ Escribir tu nombre completo
‚Ä¢ Agregar tu apellido
‚Ä¢ Cancelar con /cancelar

¬øC√≥mo quieres proceder? ü§î""".format(
            first_name=first_name or username,
            username=username or "sin_usuario"
        )
        
        keyboard = self.create_keyboard([
            "‚úÖ S√≠, es correcto",
            "‚ùå No, cambiar",
            "üö´ Cancelar"
        ])
        
        self.send_message(chat_id, response, keyboard)
    
    def handle_registration_flow(self, chat_id, text, user):
        """Maneja el flujo de registro paso a paso"""
        data = self.get_user_state(chat_id)['data']
        
        if any(word in text.lower() for word in ['s√≠', 'si', 'correcto', 'ok', 'bien']):
            # Confirmar registro
            try:
                user_id = self.register_user(
                    data['telegram_id'],
                    data['username'],
                    data['first_name'],
                    data['last_name']
                )
                
                if user_id:
                    self.clear_user_state(chat_id)
                    response = f"""üéâ <b>¬°Registro exitoso!</b>

‚úÖ <b>¬°Bienvenido a MedConnect!</b>

üë§ <b>Usuario:</b> {data['first_name'] or data['username']}
üÜî <b>ID:</b> {user_id}

üéÅ <b>¬°Ya tienes acceso a todas las funciones!</b>

üí° <b>¬øQu√© te gustar√≠a hacer primero?</b>
‚Ä¢ "Mu√©strame mi historial" - Ver tu informaci√≥n
‚Ä¢ "Tengo un examen" - Registrar un examen
‚Ä¢ "Necesito un medicamento" - Agregar medicamento
‚Ä¢ "Programar consulta" - Agendar cita m√©dica

üåê <b>Tambi√©n puedes usar la web:</b> https://www.medconnect.cl

¬°Estoy aqu√≠ para ayudarte! ü©∫"""
                    
                    keyboard = self.create_keyboard([
                        "üìã Ver Historial",
                        "üî¨ Registrar Examen",
                        "üíä Agregar Medicamento",
                        "üè• Programar Cita"
                    ])
                    
                    self.send_message(chat_id, response, keyboard)
                else:
                    self.send_message(chat_id, "‚ùå Error en el registro. Intenta m√°s tarde.")
            except Exception as e:
                logger.error(f"Error en registro: {e}")
                self.send_message(chat_id, "‚ùå Error en el registro. Intenta m√°s tarde.")
        
        elif any(word in text.lower() for word in ['no', 'cambiar', 'modificar']):
            response = """üìù <b>Perfecto, vamos a personalizar tu informaci√≥n</b>

Por favor, escribe tu nombre completo:

üí° <b>Ejemplo:</b>
"Diego Castro"
"Mar√≠a Jos√© Gonz√°lez"
"Juan Carlos P√©rez"

O si prefieres cancelar, escribe /cancelar

¬øCu√°l es tu nombre completo? üë§"""
            self.send_message(chat_id, response)
        
        else:
            # Asumir que es el nombre completo
            full_name = text.strip()
            if len(full_name.split()) >= 2:
                names = full_name.split()
                data['first_name'] = names[0]
                data['last_name'] = ' '.join(names[1:])
                self.set_user_state(chat_id, 'registering', data)
                
                response = f"""‚úÖ <b>¬°Perfecto! Informaci√≥n actualizada</b>

üë§ <b>Tu informaci√≥n:</b>
‚Ä¢ Nombre: {data['first_name']}
‚Ä¢ Apellido: {data['last_name']}
‚Ä¢ Usuario: @{data['username']}

¬øEs correcta esta informaci√≥n?

Escribe "S√≠" para confirmar el registro
O "No" para hacer m√°s cambios""".format(
                    first_name=data['first_name'],
                    last_name=data['last_name'],
                    username=data['username'] or "sin_usuario"
                )
                
                keyboard = self.create_keyboard([
                    "‚úÖ S√≠, confirmar",
                    "‚ùå No, cambiar"
                ])
                
                self.send_message(chat_id, response, keyboard)
            else:
                self.send_message(chat_id, "‚ùå Por favor, escribe tu nombre completo (nombre y apellido).")
    
    def handle_natural_language(self, chat_id, text, user):
        """Procesa lenguaje natural con experiencia mejorada"""
        text_lower = text.lower()
        
        # Procesar ex√°menes con reconocimiento avanzado
        if any(word in text_lower for word in ['examen', 'resultado', 'laboratorio', 'an√°lisis', 'eco', 'ecograf√≠a', 'radiograf√≠a', 'tomograf√≠a', 'resonancia']):
            self.start_exam_flow(chat_id, text, user)
        
        # Procesar medicamentos
        elif any(word in text_lower for word in ['medicamento', 'medicina', 'p√≠ldora', 'pastilla', 'f√°rmaco', 'tratamiento']):
            self.start_medication_flow(chat_id, text, user)
        
        # Procesar historial
        elif any(word in text_lower for word in ['historial', 'historia', 'informaci√≥n', 'datos', 'muestra', 'mu√©strame', 'ver']):
            self.show_medical_history(chat_id, user)
        
        # Procesar consultas
        elif any(word in text_lower for word in ['consulta', 'cita', 'm√©dico', 'doctor', 'atenci√≥n', 'programar']):
            self.start_appointment_flow(chat_id, text, user)
        
        # Procesar familia
        elif any(word in text_lower for word in ['familia', 'familiar', 'familiares']):
            self.handle_family_management(chat_id, user)
        
        # Procesar recordatorios
        elif any(word in text_lower for word in ['recordatorio', 'recordar', 'alarma', 'recordar']):
            self.handle_reminders(chat_id, user)
        
        # Respuesta por defecto con sugerencias
        else:
            self.send_smart_suggestions(chat_id, text)
    
    def start_exam_flow(self, chat_id, text, user):
        """Inicia el flujo de registro de examen"""
        text_lower = text.lower()
        
        # Detectar tipo de examen autom√°ticamente
        exam_type = "Examen"
        exam_name = "Examen m√©dico"
        
        if 'eco' in text_lower or 'ecograf√≠a' in text_lower:
            exam_type = "Ecograf√≠a"
            exam_name = "Ecograf√≠a Abdominal"
        elif 'sangre' in text_lower or 'an√°lisis' in text_lower:
            exam_type = "An√°lisis"
            exam_name = "An√°lisis de Sangre"
        elif 'radiograf√≠a' in text_lower or 'rayos' in text_lower:
            exam_type = "Radiograf√≠a"
            exam_name = "Radiograf√≠a"
        elif 'tomograf√≠a' in text_lower or 'tac' in text_lower:
            exam_type = "Tomograf√≠a"
            exam_name = "Tomograf√≠a Computarizada"
        elif 'resonancia' in text_lower or 'rmn' in text_lower:
            exam_type = "Resonancia"
            exam_name = "Resonancia Magn√©tica"
        
        # Guardar datos temporales
        exam_data = {
            'tipo': exam_type,
            'nombre': exam_name,
            'fecha': datetime.now().strftime('%Y-%m-%d'),
            'resultado': 'Pendiente',
            'observaciones': f'Examen detectado autom√°ticamente: {text}'
        }
        
        self.set_user_state(chat_id, 'adding_exam', exam_data)
        
        response = f"""üî¨ <b>¬°Perfecto! Detect√© que quieres registrar un examen</b>

üìã <b>Informaci√≥n detectada:</b>
‚Ä¢ Tipo: {exam_type}
‚Ä¢ Nombre: {exam_name}
‚Ä¢ Fecha: {datetime.now().strftime('%d/%m/%Y')}

‚úÖ <b>¬øEs correcta esta informaci√≥n?</b>

Si es correcta, escribe "S√≠" o "Correcto"
Si quieres modificarla, escribe "No" o "Cambiar"

üí° <b>Tambi√©n puedes:</b>
‚Ä¢ Escribir el nombre exacto del examen
‚Ä¢ Especificar la fecha
‚Ä¢ Agregar observaciones

¬øC√≥mo quieres proceder? ü§î"""
        
        keyboard = self.create_keyboard([
            "‚úÖ S√≠, es correcto",
            "‚ùå No, cambiar",
            "üìÖ Cambiar fecha",
            "üìù Agregar detalles"
        ])
        
        self.send_message(chat_id, response, keyboard)
    
    def handle_exam_flow(self, chat_id, text, user, data):
        """Maneja el flujo de registro de examen"""
        if any(word in text.lower() for word in ['s√≠', 'si', 'correcto', 'ok', 'bien']):
            # Confirmar y guardar examen
            exam_id = self.save_exam(user['user_id'], data)
            
            if exam_id:
                self.clear_user_state(chat_id)
                response = f"""‚úÖ <b>¬°Examen registrado exitosamente!</b>

üî¨ <b>Detalles guardados:</b>
‚Ä¢ Tipo: {data['tipo']}
‚Ä¢ Nombre: {data['nombre']}
‚Ä¢ Fecha: {data['fecha']}
‚Ä¢ Estado: Registrado

üìä <b>Guardado en tu historial m√©dico</b>

üí° <b>¬øQu√© m√°s quieres hacer?</b>
‚Ä¢ "Agregar otro examen"
‚Ä¢ "Ver mi historial"
‚Ä¢ "Registrar medicamento"
‚Ä¢ "Programar consulta"

üåê <b>Ver en la web:</b> https://www.medconnect.cl

¬°Gracias por mantener tu historial actualizado! ü©∫"""
                
                keyboard = self.create_keyboard([
                    "üî¨ Otro Examen",
                    "üìã Ver Historial",
                    "üíä Agregar Medicamento",
                    "üè• Programar Cita"
                ])
                
                self.send_message(chat_id, response, keyboard)
            else:
                self.send_message(chat_id, "‚ùå Error guardando el examen. Intenta m√°s tarde.")
        
        elif any(word in text.lower() for word in ['no', 'cambiar', 'modificar']):
            response = """üìù <b>Perfecto, vamos a personalizar tu examen</b>

Por favor, escribe el nombre exacto del examen:

üí° <b>Ejemplos:</b>
‚Ä¢ "Ecograf√≠a Abdominal Completa"
‚Ä¢ "An√°lisis de Sangre General"
‚Ä¢ "Radiograf√≠a de T√≥rax"
‚Ä¢ "Tomograf√≠a de Cr√°neo"

¬øCu√°l es el nombre exacto de tu examen? üî¨"""
            self.send_message(chat_id, response)
        
        else:
            # Asumir que es el nombre del examen
            data['nombre'] = text.strip()
            self.set_user_state(chat_id, 'adding_exam', data)
            
            response = f"""‚úÖ <b>¬°Perfecto! Nombre actualizado</b>

üî¨ <b>Informaci√≥n del examen:</b>
‚Ä¢ Tipo: {data['tipo']}
‚Ä¢ Nombre: {data['nombre']}
‚Ä¢ Fecha: {data['fecha']}

¬øEs correcta esta informaci√≥n?

Escribe "S√≠" para confirmar
O "No" para hacer m√°s cambios"""
            
            keyboard = self.create_keyboard([
                "‚úÖ S√≠, confirmar",
                "‚ùå No, cambiar",
                "üìÖ Cambiar fecha"
            ])
            
            self.send_message(chat_id, response, keyboard)
    
    def start_medication_flow(self, chat_id, text, user):
        """Inicia el flujo de registro de medicamento"""
        self.set_user_state(chat_id, 'adding_medication', {})
        
        response = """üíä <b>¬°Perfecto! Vamos a registrar tu medicamento</b>

üìã <b>Necesito la siguiente informaci√≥n:</b>

1Ô∏è‚É£ <b>Nombre del medicamento</b>
2Ô∏è‚É£ <b>Dosis</b> (ej: 500mg, 10ml)
3Ô∏è‚É£ <b>Frecuencia</b> (ej: Cada 8 horas, 2 veces al d√≠a)
4Ô∏è‚É£ <b>Duraci√≥n</b> (ej: 7 d√≠as, 1 mes)

üí° <b>Ejemplo completo:</b>
"Paracetamol 500mg cada 8 horas por 7 d√≠as"

O puedes ir paso a paso. ¬øC√≥mo prefieres hacerlo?

Escribe el medicamento completo o solo el nombre para empezar üíä"""
        
        keyboard = self.create_keyboard([
            "üíä Escribir completo",
            "üìù Paso a paso",
            "üö´ Cancelar"
        ])
        
        self.send_message(chat_id, response, keyboard)
    
    def handle_medication_flow(self, chat_id, text, user, data):
        """Maneja el flujo de registro de medicamento"""
        # Implementar l√≥gica de medicamentos paso a paso
        self.send_message(chat_id, "üíä Funcionalidad de medicamentos en desarrollo. Pronto disponible!")
        self.clear_user_state(chat_id)
    
    def start_appointment_flow(self, chat_id, text, user):
        """Inicia el flujo de programaci√≥n de consulta"""
        self.set_user_state(chat_id, 'adding_appointment', {})
        
        response = """üè• <b>¬°Perfecto! Vamos a programar tu consulta</b>

üìã <b>Necesito la siguiente informaci√≥n:</b>

1Ô∏è‚É£ <b>Fecha</b> (ej: 15/01/2025)
2Ô∏è‚É£ <b>Hora</b> (ej: 14:30)
3Ô∏è‚É£ <b>Especialidad</b> (ej: Cardiolog√≠a)
4Ô∏è‚É£ <b>Centro m√©dico</b> (ej: Hospital Cl√≠nico)

üí° <b>Ejemplo completo:</b>
"Consulta el 15/01/2025 a las 14:30 en Cardiolog√≠a del Hospital Cl√≠nico"

O puedes ir paso a paso. ¬øC√≥mo prefieres hacerlo?

Escribe la consulta completa o solo la fecha para empezar üè•"""
        
        keyboard = self.create_keyboard([
            "üè• Escribir completo",
            "üìù Paso a paso",
            "üö´ Cancelar"
        ])
        
        self.send_message(chat_id, response, keyboard)
    
    def handle_appointment_flow(self, chat_id, text, user, data):
        """Maneja el flujo de programaci√≥n de consulta"""
        # Implementar l√≥gica de consultas paso a paso
        self.send_message(chat_id, "üè• Funcionalidad de consultas en desarrollo. Pronto disponible!")
        self.clear_user_state(chat_id)
    
    def show_medical_history(self, chat_id, user):
        """Muestra el historial m√©dico del usuario"""
        try:
            # Obtener resumen m√©dico
            summary = self.db.get_medical_summary(user['user_id'])
            
            response = f"""üìã <b>Historial M√©dico de {user.get('nombre', 'Usuario')}</b>

üë§ <b>Informaci√≥n Personal:</b>
‚Ä¢ Nombre: {user.get('nombre', 'N/A')} {user.get('apellido', '')}
‚Ä¢ Edad: {user.get('edad', 'N/A')} a√±os
‚Ä¢ RUT: {user.get('rut', 'N/A')}

üìä <b>Resumen M√©dico:</b>
‚Ä¢ Consultas: {summary.get('total_consultas', 0)}
‚Ä¢ Medicamentos activos: {summary.get('medicamentos_activos', 0)}
‚Ä¢ Ex√°menes: {summary.get('total_examenes', 0)}
‚Ä¢ Familiares autorizados: {summary.get('familiares', 0)}

üìÖ <b>√öltima actualizaci√≥n:</b> {datetime.now().strftime('%d/%m/%Y')}

üí° <b>¬øQu√© quieres ver en detalle?</b>

üåê <b>Ver completo en la web:</b> https://www.medconnect.cl

¬øQu√© informaci√≥n espec√≠fica necesitas? ü§î"""
            
            keyboard = self.create_keyboard([
                "üìã Ver Consultas",
                "üíä Ver Medicamentos",
                "üî¨ Ver Ex√°menes",
                "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Ver Familiares"
            ])
            
            self.send_message(chat_id, response, keyboard)
            
        except Exception as e:
            logger.error(f"Error obteniendo historial: {e}")
            self.send_message(chat_id, "‚ùå Error obteniendo tu historial. Intenta m√°s tarde.")
    
    def handle_family_management(self, chat_id, user):
        """Maneja la gesti√≥n de familiares"""
        response = """üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <b>Gesti√≥n de Familiares</b>

üìã <b>¬øQu√© quieres hacer?</b>

‚Ä¢ Agregar familiar autorizado
‚Ä¢ Ver familiares actuales
‚Ä¢ Gestionar permisos
‚Ä¢ Configurar notificaciones

üí° <b>Los familiares autorizados pueden:</b>
‚Ä¢ Ver tu informaci√≥n m√©dica
‚Ä¢ Recibir notificaciones
‚Ä¢ Acceder a tu historial

¬øQu√© opci√≥n prefieres? üë§"""
        
        keyboard = self.create_keyboard([
            "üë§ Agregar Familiar",
            "üìã Ver Familiares",
            "üîê Gestionar Permisos",
            "üö´ Cancelar"
        ])
        
        self.send_message(chat_id, response, keyboard)
    
    def handle_reminders(self, chat_id, user):
        """Maneja la configuraci√≥n de recordatorios"""
        response = """‚è∞ <b>Configuraci√≥n de Recordatorios</b>

üìã <b>¬øQu√© tipo de recordatorio quieres configurar?</b>

‚Ä¢ Recordatorio de medicamentos
‚Ä¢ Recordatorio de citas
‚Ä¢ Recordatorio de ex√°menes
‚Ä¢ Recordatorio personalizado

üí° <b>Los recordatorios te ayudar√°n a:</b>
‚Ä¢ No olvidar tomar medicamentos
‚Ä¢ Llegar a tiempo a las citas
‚Ä¢ Realizar ex√°menes programados

¬øQu√© recordatorio necesitas? ‚è∞"""
        
        keyboard = self.create_keyboard([
            "üíä Medicamentos",
            "üè• Citas",
            "üî¨ Ex√°menes",
            "üìù Personalizado"
        ])
        
        self.send_message(chat_id, response, keyboard)
    
    def send_smart_suggestions(self, chat_id, text):
        """Env√≠a sugerencias inteligentes basadas en el texto"""
        text_lower = text.lower()
        
        # Analizar el texto para dar sugerencias relevantes
        suggestions = []
        
        if any(word in text_lower for word in ['hola', 'hello', 'hi', 'buenas']):
            response = """üëã <b>¬°Hola! ¬øC√≥mo est√°s?</b>

üí° <b>¬øEn qu√© puedo ayudarte hoy?</b>

‚Ä¢ üìã Ver tu historial m√©dico
‚Ä¢ üî¨ Registrar un examen
‚Ä¢ üíä Agregar un medicamento
‚Ä¢ üè• Programar una consulta
‚Ä¢ üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Gestionar familiares

O simplemente dime qu√© necesitas y te ayudo! üòä"""
        
        elif any(word in text_lower for word in ['gracias', 'thank', 'perfecto', 'excelente']):
            response = """üòä <b>¬°De nada! Me alegra poder ayudarte</b>

üí° <b>¬øHay algo m√°s en lo que pueda asistirte?</b>

‚Ä¢ üìã Ver tu historial m√©dico
‚Ä¢ üî¨ Registrar un examen
‚Ä¢ üíä Agregar un medicamento
‚Ä¢ üè• Programar una consulta

¬°Estoy aqu√≠ para cuidar de tu salud! ü©∫"""
        
        else:
            response = """ü§ñ <b>No estoy seguro de entenderte</b>

üí° <b>¬øTe refieres a algo de esto?</b>

‚Ä¢ üìã <b>Historial m√©dico</b> - "Mu√©strame mi historial"
‚Ä¢ üî¨ <b>Ex√°menes</b> - "Tengo un eco abdominal"
‚Ä¢ üíä <b>Medicamentos</b> - "Necesito registrar un medicamento"
‚Ä¢ üè• <b>Consultas</b> - "Programar una cita"
‚Ä¢ üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <b>Familia</b> - "Gestionar familiares"

üí¨ <b>O puedes escribir de forma natural:</b>
‚Ä¢ "Tengo un examen nuevo"
‚Ä¢ "Necesito un medicamento"
‚Ä¢ "Quiero ver mi informaci√≥n"

üìã <b>Comandos disponibles:</b>
‚Ä¢ /start - Men√∫ principal
‚Ä¢ /ayuda - Ver opciones
‚Ä¢ /cancelar - Cancelar operaci√≥n

¬øEn qu√© puedo ayudarte? ü§î"""
        
        keyboard = self.create_keyboard([
            "üìã Ver Historial",
            "üî¨ Registrar Examen",
            "üíä Agregar Medicamento",
            "üè• Programar Cita"
        ])
        
        self.send_message(chat_id, response, keyboard)
    
    def handle_help(self, chat_id):
        """Maneja el comando de ayuda mejorado"""
        response = """üìã <b>Ayuda de MedConnect</b>

üè• <b>¬øQu√© puedo hacer por ti?</b>

üìã <b>Gestionar Informaci√≥n:</b>
‚Ä¢ Ver tu historial m√©dico completo
‚Ä¢ Registrar nuevos ex√°menes
‚Ä¢ Agregar medicamentos con recordatorios
‚Ä¢ Programar citas m√©dicas

üîç <b>Consultar Datos:</b>
‚Ä¢ Ver medicamentos activos
‚Ä¢ Revisar resultados de ex√°menes
‚Ä¢ Consultar pr√≥ximas citas
‚Ä¢ Ver resumen m√©dico

üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <b>Gesti√≥n Familiar:</b>
‚Ä¢ Agregar familiares autorizados
‚Ä¢ Gestionar permisos de acceso
‚Ä¢ Configurar notificaciones familiares
‚Ä¢ Compartir informaci√≥n m√©dica

‚è∞ <b>Recordatorios:</b>
‚Ä¢ Alertas de medicamentos
‚Ä¢ Recordatorios de citas
‚Ä¢ Notificaciones de ex√°menes
‚Ä¢ Recordatorios personalizados

üí¨ <b>Lenguaje Natural:</b>
Puedes escribir de forma natural, por ejemplo:
‚Ä¢ "Tengo un eco abdominal"
‚Ä¢ "Necesito registrar un medicamento"
‚Ä¢ "Mu√©strame mi historial"
‚Ä¢ "Programar una consulta"

üéØ <b>Comandos R√°pidos:</b>
‚Ä¢ /start - Men√∫ principal
‚Ä¢ /ayuda - Esta ayuda
‚Ä¢ /estado - Estado del sistema
‚Ä¢ /cancelar - Cancelar operaci√≥n

üåê <b>Sitio web:</b> https://www.medconnect.cl

¬øEn qu√© puedo ayudarte? ü§î"""
        
        self.send_message(chat_id, response)
    
    def handle_status(self, chat_id):
        """Maneja el comando de estado"""
        db_status = "‚úÖ Conectada" if self.db else "‚ùå No disponible"
        
        response = f"""‚úÖ <b>Estado del Sistema MedConnect</b>

ü§ñ <b>Bot:</b> Funcionando correctamente
üåê <b>Web:</b> https://www.medconnect.cl
üìä <b>Base de datos:</b> {db_status}
‚è∞ <b>√öltima actualizaci√≥n:</b> Ahora

üîÑ <b>Servicios:</b>
‚Ä¢ ‚úÖ Telegram Bot
‚Ä¢ ‚úÖ Web App
‚Ä¢ {'‚úÖ' if self.db else '‚ùå'} Base de datos
‚Ä¢ ‚úÖ Notificaciones

üéØ <b>Funciones activas:</b>
‚Ä¢ ‚úÖ Reconocimiento de usuarios
‚Ä¢ ‚úÖ Registro de ex√°menes
‚Ä¢ ‚úÖ Gesti√≥n de medicamentos
‚Ä¢ ‚úÖ Historial m√©dico
‚Ä¢ ‚úÖ Conversaciones inteligentes

¬°Todo funcionando perfectamente! üéâ"""
        
        self.send_message(chat_id, response)
    
    def get_updates(self):
        """Obtiene actualizaciones del bot"""
        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/getUpdates"
            params = {'offset': self.last_update_id + 1, 'timeout': 30}
            
            response = requests.get(url, params=params, timeout=35)
            response.raise_for_status()
            
            data = response.json()
            
            if data['ok']:
                return data['result']
            else:
                logger.error(f"Error en getUpdates: {data}")
                return []
                
        except Exception as e:
            logger.error(f"Error obteniendo updates: {e}")
            return []
    
    def run(self):
        """Ejecuta el bot en bucle infinito"""
        logger.info("üöÄ Bot mejorado iniciado y ejecut√°ndose...")
        
        while True:
            try:
                updates = self.get_updates()
                
                for update in updates:
                    self.last_update_id = update['update_id']
                    
                    if 'message' in update:
                        message = update['message']
                        
                        # Procesar mensajes de texto
                        if 'text' in message:
                            self.process_message(message)
                
                time.sleep(1)
                
            except KeyboardInterrupt:
                logger.info("üõë Bot detenido por el usuario")
                break
            except Exception as e:
                logger.error(f"Error en bucle principal: {e}")
                time.sleep(5)

if __name__ == "__main__":
    bot = EnhancedMedConnectBot()
    bot.run() 