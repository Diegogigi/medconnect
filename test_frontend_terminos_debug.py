#!/usr/bin/env python3
"""
Script para debuggear el problema de t√©rminos que no aparecen en el frontend
"""

import requests
import json

def test_endpoint_generate_terms():
    """Prueba el endpoint de generaci√≥n de t√©rminos directamente"""
    print("üîç PRUEBA DIRECTA DEL ENDPOINT DE T√âRMINOS")
    print("=" * 50)
    
    # Simular una sesi√≥n autenticada (esto es solo para prueba)
    session = requests.Session()
    
    # Datos de prueba
    test_data = {
        'condicion': 'Dolor lumbar de 3 semanas',
        'especialidad': 'kinesiologia',
        'edad': 70
    }
    
    print(f"üìã Datos de prueba: {test_data}")
    
    try:
        # Intentar llamar al endpoint
        response = session.post(
            "http://localhost:5000/api/copilot/generate-search-terms",
            json=test_data,
            timeout=10
        )
        
        print(f"üìä Status Code: {response.status_code}")
        print(f"üìä Content-Type: {response.headers.get('Content-Type', 'No especificado')}")
        
        if response.status_code == 200:
            try:
                data = response.json()
                print("‚úÖ Respuesta JSON v√°lida")
                
                if data.get('success'):
                    terminos = data.get('terminos_disponibles', {})
                    print("‚úÖ T√©rminos generados exitosamente")
                    
                    # Mostrar estructura de t√©rminos
                    print(f"\nüìã Estructura de t√©rminos:")
                    print(f"   - T√©rminos b√°sicos: {len(terminos.get('terminos_basicos', []))}")
                    print(f"   - T√©rminos de especialidad: {len(terminos.get('terminos_especialidad', []))}")
                    print(f"   - T√©rminos por edad: {len(terminos.get('terminos_edad', []))}")
                    print(f"   - T√©rminos recomendados: {len(terminos.get('terminos_recomendados', []))}")
                    
                    # Mostrar algunos t√©rminos recomendados
                    recomendados = terminos.get('terminos_recomendados', [])
                    if recomendados:
                        print(f"\n‚≠ê T√©rminos recomendados:")
                        for i, termino in enumerate(recomendados[:5], 1):
                            print(f"   {i}. {termino}")
                    
                    return True
                else:
                    print(f"‚ùå Error en respuesta: {data.get('message', 'Error desconocido')}")
                    return False
                    
            except json.JSONDecodeError:
                print("‚ùå Respuesta no es JSON v√°lido")
                print(f"Respuesta: {response.text[:200]}...")
                return False
        else:
            print(f"‚ùå Error HTTP {response.status_code}")
            print(f"Respuesta: {response.text[:200]}...")
            return False
            
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False

def test_frontend_flow():
    """Simula el flujo completo del frontend"""
    print("\nüñ•Ô∏è SIMULACI√ìN DEL FLUJO FRONTEND")
    print("=" * 50)
    
    # Simular los pasos que har√≠a el frontend
    print("1Ô∏è‚É£ Simulando llenado de formulario...")
    diagnostico = "Dolor lumbar de 3 semanas"
    especialidad = "kinesiologia"
    edad = 70
    
    print(f"   Diagn√≥stico: {diagnostico}")
    print(f"   Especialidad: {especialidad}")
    print(f"   Edad: {edad}")
    
    print("\n2Ô∏è‚É£ Simulando llamada a API...")
    session = requests.Session()
    
    try:
        response = session.post(
            "http://localhost:5000/api/copilot/generate-search-terms",
            json={
                'condicion': diagnostico,
                'especialidad': especialidad,
                'edad': edad
            },
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                terminos = data.get('terminos_disponibles', {})
                print("‚úÖ API respondi√≥ correctamente")
                
                print("\n3Ô∏è‚É£ Simulando renderizado de t√©rminos...")
                print("   Los t√©rminos deber√≠an mostrarse en el frontend:")
                
                # Simular lo que deber√≠a mostrar el frontend
                if terminos.get('terminos_recomendados'):
                    print("   ‚≠ê T√©rminos Recomendados:")
                    for termino in terminos['terminos_recomendados'][:3]:
                        print(f"      ‚òê {termino}")
                
                if terminos.get('terminos_especialidad'):
                    print("   üè• T√©rminos de Especialidad:")
                    for termino in terminos['terminos_especialidad'][:2]:
                        print(f"      ‚òê {termino}")
                
                if terminos.get('terminos_edad'):
                    print("   üë§ T√©rminos por Edad:")
                    for termino in terminos['terminos_edad'][:2]:
                        print(f"      ‚òê {termino}")
                
                print("\n‚úÖ Flujo simulado exitoso")
                return True
            else:
                print(f"‚ùå Error en API: {data.get('message')}")
                return False
        else:
            print(f"‚ùå Error HTTP: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en flujo: {e}")
        return False

def check_html_elements():
    """Verifica que los elementos HTML est√©n presentes"""
    print("\nüèóÔ∏è VERIFICACI√ìN DE ELEMENTOS HTML")
    print("=" * 50)
    
    try:
        response = requests.get("http://localhost:5000/professional", timeout=10)
        
        if response.status_code == 200:
            html_content = response.text
            
            # Verificar elementos cr√≠ticos
            elementos_criticos = [
                'sugerenciasTratamiento',
                'listaSugerenciasTratamiento',
                'sugerirTratamientoConIA'
            ]
            
            for elemento in elementos_criticos:
                if elemento in html_content:
                    print(f"‚úÖ {elemento} presente en HTML")
                else:
                    print(f"‚ùå {elemento} NO presente en HTML")
            
            # Verificar si es p√°gina de login
            if 'login' in html_content.lower():
                print("\n‚ö†Ô∏è P√ÅGINA DE LOGIN DETECTADA")
                print("üí° Esto explica por qu√© no se ven los elementos")
                return False
            else:
                print("\n‚úÖ NO ES P√ÅGINA DE LOGIN")
                return True
                
        else:
            print(f"‚ùå Error HTTP: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üîç DEBUGGEO COMPLETO - T√âRMINOS NO APARECEN")
    print("=" * 60)
    
    # Ejecutar todas las verificaciones
    resultados = []
    
    # Verificar endpoint
    resultados.append(("Endpoint API", test_endpoint_generate_terms()))
    
    # Verificar flujo frontend
    resultados.append(("Flujo Frontend", test_frontend_flow()))
    
    # Verificar elementos HTML
    resultados.append(("Elementos HTML", check_html_elements()))
    
    # Mostrar resumen
    print("\nüìä RESUMEN DE DEBUGGEO")
    print("=" * 40)
    
    exitos = 0
    for nombre, resultado in resultados:
        if resultado:
            print(f"‚úÖ {nombre}: OK")
            exitos += 1
        else:
            print(f"‚ùå {nombre}: FALLO")
    
    print(f"\nüéØ Resultado: {exitos}/{len(resultados)} verificaciones exitosas")
    
    if exitos == len(resultados):
        print("‚úÖ TODAS LAS VERIFICACIONES EXITOSAS")
        print("üí° El problema puede ser:")
        print("   1. JavaScript no se ejecuta en el navegador")
        print("   2. Error en la consola del navegador")
        print("   3. Problema de autenticaci√≥n en el navegador")
    else:
        print("‚ùå PROBLEMAS IDENTIFICADOS")
        print("‚ùå Revisa los errores anteriores")

if __name__ == "__main__":
    main() 