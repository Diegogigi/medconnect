#!/usr/bin/env python3
"""
Script de prueba para verificar las mejoras de b√∫squeda contextual
para todas las profesiones en el Copilot Health Assistant.
"""

import requests
import json
import time

def test_mejoras_busqueda_profesiones():
    """Prueba las mejoras de b√∫squeda para todas las profesiones."""
    
    print("üß™ PRUEBA DE MEJORAS DE B√öSQUEDA PARA TODAS LAS PROFESIONES")
    print("=" * 70)
    
    # Casos de prueba para cada profesi√≥n
    casos_prueba = [
        {
            "profesion": "Kinesiolog√≠a",
            "tipo_atencion": "kinesiologia",
            "motivo_consulta": "Dolor de rodilla por golpe en el trabajo",
            "evaluacion": "¬øEn qu√© momento del d√≠a es peor el dolor? cuando me levanto ¬øQu√© actividades agravan el dolor? pasar mucho tiempo de pie ¬øQu√© actividades alivian el dolor? tener la rodilla en reposo ¬øHay hinchaz√≥n o calor en la rodilla? hay hinchaz√≥n ¬øHa tenido lesiones previas en la rodilla? no ¬øEl dolor es constante o intermitente? es intermitente ¬øHay bloqueos o sensaci√≥n de inestabilidad? sensaci√≥n de inestabilidad ¬øPuede subir y bajar escaleras sin dolor? bajar duele la rodilla",
            "edad": "35"
        },
        {
            "profesion": "Medicina General",
            "tipo_atencion": "medicina_general",
            "motivo_consulta": "Dolor de cabeza intenso con n√°useas",
            "evaluacion": "¬øCu√°ndo comenz√≥ el dolor? hace 2 d√≠as ¬øEl dolor es constante o intermitente? constante ¬øHay otros s√≠ntomas? n√°useas y sensibilidad a la luz ¬øHa tenido dolores de cabeza similares antes? s√≠ ¬øQu√© medicamentos ha tomado? paracetamol sin alivio",
            "edad": "45"
        },
        {
            "profesion": "Psicolog√≠a",
            "tipo_atencion": "psicologia",
            "motivo_consulta": "Ansiedad y estr√©s por problemas laborales",
            "evaluacion": "¬øCu√°ndo comenz√≥ la ansiedad? hace 3 semanas ¬øQu√© s√≠ntomas experimenta? palpitaciones, sudoraci√≥n, dificultad para dormir ¬øHa tenido episodios similares antes? s√≠ ¬øQu√© situaciones la agravan? reuniones de trabajo ¬øHa recibido tratamiento psicol√≥gico previo? no",
            "edad": "28"
        },
        {
            "profesion": "Fonoaudiolog√≠a",
            "tipo_atencion": "fonoaudiologia",
            "motivo_consulta": "Dificultad para hablar despu√©s de un accidente",
            "evaluacion": "¬øCu√°ndo comenz√≥ la dificultad? despu√©s del accidente ¬øQu√© tipo de dificultad experimenta? articulaci√≥n de palabras ¬øHa notado cambios en la voz? s√≠, m√°s ronca ¬øHay dificultad para tragar? no ¬øHa recibido terapia del lenguaje antes? no",
            "edad": "52"
        }
    ]
    
    resultados = []
    
    for i, caso in enumerate(casos_prueba, 1):
        print(f"\nüìã CASO {i}: {caso['profesion']}")
        print("-" * 50)
        
        # Simular datos del formulario
        datos_formulario = {
            "tipoAtencion": caso["tipo_atencion"],
            "motivoConsulta": caso["motivo_consulta"],
            "evaluacion": caso["evaluacion"],
            "edad": caso["edad"]
        }
        
        print(f"üéØ Tipo de atenci√≥n: {caso['tipo_atencion']}")
        print(f"üìù Motivo de consulta: {caso['motivo_consulta']}")
        print(f"üìä Evaluaci√≥n: {caso['evaluacion'][:100]}...")
        print(f"üë§ Edad: {caso['edad']} a√±os")
        
        # Simular la funci√≥n generarTerminosBusquedaMejorados
        terminos_esperados = simular_generar_terminos(datos_formulario)
        
        print(f"\nüîç T√âRMINOS GENERADOS:")
        print(f"   Especialidad: {terminos_esperados['especialidad']}")
        print(f"   T√©rminos clave: {', '.join(terminos_esperados['terminosClave'][:5])}")
        print(f"   Contexto cl√≠nico: {', '.join(terminos_esperados['contextoClinico'][:3])}")
        print(f"   Query completa: {terminos_esperados['queryCompleta'][:100]}...")
        
        # Verificar que los t√©rminos sean apropiados para la profesi√≥n
        verificacion = verificar_terminos_profesion(caso['profesion'], terminos_esperados)
        
        if verificacion['exito']:
            print(f"‚úÖ VERIFICACI√ìN EXITOSA: {verificacion['mensaje']}")
        else:
            print(f"‚ùå VERIFICACI√ìN FALLIDA: {verificacion['mensaje']}")
        
        resultados.append({
            "caso": caso['profesion'],
            "terminos": terminos_esperados,
            "verificacion": verificacion
        })
    
    # Resumen final
    print("\n" + "=" * 70)
    print("üìä RESUMEN DE PRUEBAS")
    print("=" * 70)
    
    exitos = sum(1 for r in resultados if r['verificacion']['exito'])
    total = len(resultados)
    
    print(f"‚úÖ Casos exitosos: {exitos}/{total}")
    print(f"‚ùå Casos fallidos: {total - exitos}/{total}")
    
    for resultado in resultados:
        estado = "‚úÖ" if resultado['verificacion']['exito'] else "‚ùå"
        print(f"{estado} {resultado['caso']}: {resultado['verificacion']['mensaje']}")
    
    if exitos == total:
        print("\nüéâ ¬°TODAS LAS MEJORAS FUNCIONAN CORRECTAMENTE!")
        print("   El sistema de b√∫squeda contextual est√° optimizado para todas las profesiones.")
    else:
        print("\n‚ö†Ô∏è  HAY MEJORAS PENDIENTES")
        print("   Algunas profesiones necesitan ajustes adicionales.")
    
    return resultados

def simular_generar_terminos(datos):
    """Simula la funci√≥n generarTerminosBusquedaMejorados del frontend."""
    
    terminosClave = []
    contextoClinico = []
    especialidad = 'general'
    edad = 'adulto'
    
    # 1. Analizar tipo de atenci√≥n para especialidad
    if datos.get('tipoAtencion'):
        tipoLower = datos['tipoAtencion'].lower()
        
        if 'kinesiologia' in tipoLower or 'fisioterapia' in tipoLower or 'kinesio' in tipoLower:
            especialidad = 'fisioterapia'
            terminosClave.extend(['fisioterapia', 'kinesiolog√≠a', 'rehabilitaci√≥n', 'terapia f√≠sica', 'movimiento'])
            contextoClinico.append('intervenci√≥n fisioterap√©utica')
        elif 'medicina' in tipoLower or 'general' in tipoLower:
            especialidad = 'medicina'
            terminosClave.extend(['medicina cl√≠nica', 'medicina general', 'diagn√≥stico m√©dico', 'tratamiento m√©dico'])
            contextoClinico.append('evaluaci√≥n m√©dica integral')
        elif 'psicologia' in tipoLower or 'psicoterapia' in tipoLower:
            especialidad = 'psicolog√≠a'
            terminosClave.extend(['psicolog√≠a', 'salud mental', 'terapia psicol√≥gica', 'intervenci√≥n psicol√≥gica', 'bienestar emocional'])
            contextoClinico.append('evaluaci√≥n psicol√≥gica')
        elif 'fonoaudiologia' in tipoLower or 'logopedia' in tipoLower:
            especialidad = 'fonoaudiolog√≠a'
            terminosClave.extend(['fonoaudiolog√≠a', 'terapia del lenguaje', 'comunicaci√≥n', 'habla', 'lenguaje', 'degluci√≥n'])
            contextoClinico.append('evaluaci√≥n fonoaudiol√≥gica')
    
    # 2. Analizar motivo de consulta
    if datos.get('motivoConsulta'):
        motivo = datos['motivoConsulta'].lower()
        
        # T√©rminos espec√≠ficos por profesi√≥n
        if especialidad == 'fonoaudiolog√≠a':
            terminosFono = ['voz', 'habla', 'lenguaje', 'comunicaci√≥n', 'degluci√≥n', 'respiraci√≥n', 'articulaci√≥n', 'disfon√≠a', 'afasia', 'disfagia']
            for termino in terminosFono:
                if termino in motivo:
                    terminosClave.append(termino)
                    contextoClinico.append(f'dificultad en {termino}')
        
        if especialidad == 'psicolog√≠a':
            terminosPsico = ['ansiedad', 'depresi√≥n', 'estr√©s', 'trauma', 'miedo', 'p√°nico', 'obsesi√≥n', 'compulsi√≥n', 'trastorno', 'bipolar', 'esquizofrenia']
            for termino in terminosPsico:
                if termino in motivo:
                    terminosClave.append(termino)
                    contextoClinico.append(f's√≠ntoma psicol√≥gico: {termino}')
        
        # T√©rminos anat√≥micos
        terminosAnatomicos = [
            'rodilla', 'hombro', 'espalda', 'cuello', 'cabeza', 'brazo', 'pierna',
            'tobillo', 'mu√±eca', 'codo', 'cadera', 'columna', 'lumbar', 'cervical',
            'articulaci√≥n', 'm√∫sculo', 'tend√≥n', 'ligamento', 'menisco', 'cart√≠lago'
        ]
        
        for termino in terminosAnatomicos:
            if termino in motivo:
                terminosClave.append(termino)
                contextoClinico.append(f'dolor en {termino}')
        
        # T√©rminos de causa
        if 'golpe' in motivo or 'trauma' in motivo:
            terminosClave.extend(['trauma', 'lesi√≥n traum√°tica'])
            contextoClinico.append('lesi√≥n por trauma')
        if 'trabajo' in motivo or 'laboral' in motivo:
            terminosClave.extend(['lesi√≥n laboral', 'accidente de trabajo'])
            contextoClinico.append('lesi√≥n relacionada con el trabajo')
        if 'deporte' in motivo or 'ejercicio' in motivo:
            terminosClave.extend(['lesi√≥n deportiva', 'deporte'])
            contextoClinico.append('lesi√≥n relacionada con actividad f√≠sica')
    
    # 3. Analizar evaluaci√≥n
    if datos.get('evaluacion'):
        evaluacion = datos['evaluacion'].lower()
        
        # S√≠ntomas espec√≠ficos por profesi√≥n
        if especialidad == 'fonoaudiolog√≠a':
            if any(termino in evaluacion for termino in ['voz', 'habla', 'lenguaje']):
                terminosClave.extend(['disfon√≠a', 'disfagia', 'afasia'])
                contextoClinico.append('dificultad en comunicaci√≥n')
        
        if especialidad == 'psicolog√≠a':
            if 'ansiedad' in evaluacion or 'miedo' in evaluacion or 'p√°nico' in evaluacion:
                terminosClave.extend(['trastorno de ansiedad', 'ataque de p√°nico'])
                contextoClinico.append('s√≠ntomas de ansiedad')
            if 'depresi√≥n' in evaluacion or 'tristeza' in evaluacion or 'des√°nimo' in evaluacion:
                terminosClave.extend(['trastorno depresivo', 'depresi√≥n'])
                contextoClinico.append('s√≠ntomas depresivos')
    
    # 4. Analizar edad
    if datos.get('edad'):
        edadNum = int(datos['edad'])
        if edadNum < 18:
            edad = 'pedi√°trico'
            terminosClave.extend(['pediatr√≠a', 'ni√±o', 'adolescente'])
        elif edadNum > 65:
            edad = 'geri√°trico'
            terminosClave.extend(['geriatr√≠a', 'adulto mayor', 'envejecimiento'])
    
    # 5. Crear query completa
    queryCompleta = ' '.join([
        datos.get('motivoConsulta', ''),
        *terminosClave[:5],
        especialidad
    ])
    
    # 6. Eliminar duplicados
    terminosUnicos = list(set(terminosClave))
    contextoUnico = list(set(contextoClinico))
    
    return {
        'queryCompleta': queryCompleta,
        'terminosClave': terminosUnicos,
        'especialidad': especialidad,
        'edad': edad,
        'contextoClinico': contextoUnico
    }

def verificar_terminos_profesion(profesion, terminos):
    """Verifica que los t√©rminos generados sean apropiados para la profesi√≥n."""
    
    verificaciones = {
        'Kinesiolog√≠a': {
            'terminos_requeridos': ['fisioterapia', 'kinesiolog√≠a', 'rehabilitaci√≥n'],
            'terminos_anatomicos': ['rodilla', 'hombro', 'espalda', 'articulaci√≥n'],
            'mensaje_exito': 'T√©rminos fisioterap√©uticos y anat√≥micos identificados correctamente'
        },
        'Medicina General': {
            'terminos_requeridos': ['medicina', 'diagn√≥stico', 'tratamiento'],
            'terminos_anatomicos': ['cabeza', 'dolor'],
            'mensaje_exito': 'T√©rminos m√©dicos generales identificados correctamente'
        },
        'Psicolog√≠a': {
            'terminos_requeridos': ['psicolog√≠a', 'salud mental', 'terapia psicol√≥gica'],
            'terminos_especificos': ['ansiedad', 'estr√©s', 'depresi√≥n'],
            'mensaje_exito': 'T√©rminos psicol√≥gicos y de salud mental identificados correctamente'
        },
        'Fonoaudiolog√≠a': {
            'terminos_requeridos': ['fonoaudiolog√≠a', 'terapia del lenguaje', 'comunicaci√≥n'],
            'terminos_especificos': ['habla', 'lenguaje', 'voz', 'degluci√≥n'],
            'mensaje_exito': 'T√©rminos fonoaudiol√≥gicos y de comunicaci√≥n identificados correctamente'
        }
    }
    
    if profesion not in verificaciones:
        return {'exito': False, 'mensaje': f'Profesi√≥n {profesion} no soportada'}
    
    verificacion = verificaciones[profesion]
    terminos_clave = terminos['terminosClave']
    
    # Verificar t√©rminos requeridos
    terminos_encontrados = sum(1 for termino in verificacion['terminos_requeridos'] 
                              if any(termino in t for t in terminos_clave))
    
    # Verificar t√©rminos espec√≠ficos
    if 'terminos_especificos' in verificacion:
        terminos_especificos_encontrados = sum(1 for termino in verificacion['terminos_especificos'] 
                                              if any(termino in t for t in terminos_clave))
    else:
        terminos_especificos_encontrados = 1  # No aplica para todas las profesiones
    
    # Verificar t√©rminos anat√≥micos si aplica
    if 'terminos_anatomicos' in verificacion:
        terminos_anatomicos_encontrados = sum(1 for termino in verificacion['terminos_anatomicos'] 
                                             if any(termino in t for t in terminos_clave))
    else:
        terminos_anatomicos_encontrados = 1  # No aplica para todas las profesiones
    
    # Criterio de √©xito: al menos 2 t√©rminos requeridos y 1 espec√≠fico/anat√≥mico
    exito = (terminos_encontrados >= 2 and 
             terminos_especificos_encontrados >= 1 and 
             terminos_anatomicos_encontrados >= 1)
    
    if exito:
        return {'exito': True, 'mensaje': verificacion['mensaje_exito']}
    else:
        return {'exito': False, 'mensaje': f'Faltan t√©rminos espec√≠ficos para {profesion}'}

if __name__ == "__main__":
    print("üöÄ Iniciando pruebas de mejoras para todas las profesiones...")
    resultados = test_mejoras_busqueda_profesiones()
    print("\n‚úÖ Pruebas completadas.") 