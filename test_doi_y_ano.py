#!/usr/bin/env python3
"""
Script para probar la extracci√≥n y visualizaci√≥n de DOI y a√±o
"""

import requests
import json
import time

def test_doi_y_ano_extraccion():
    """Prueba la extracci√≥n de DOI y a√±o de los papers"""
    print("üîç PRUEBA DE EXTRACCI√ìN DOI Y A√ëO")
    print("=" * 50)
    
    # 1. Verificar que el servidor est√© funcionando
    print("üîç Verificando servidor...")
    try:
        response = requests.get("http://localhost:5000/health", timeout=10)
        if response.status_code == 200:
            print("‚úÖ Servidor funcionando")
        else:
            print(f"‚ùå Servidor respondi√≥ con c√≥digo {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Error conectando al servidor: {e}")
        return False
    
    # 2. Crear sesi√≥n autenticada
    print("\nüîê Creando sesi√≥n autenticada...")
    session = requests.Session()
    
    try:
        # Obtener p√°gina de login
        response = session.get("http://localhost:5000/login", timeout=10)
        if response.status_code != 200:
            print(f"‚ùå Error obteniendo p√°gina de login: {response.status_code}")
            return False
        
        # Intentar login
        login_data = {
            'username': 'admin@medconnect.cl',
            'password': 'admin123',
            'remember': 'on'
        }
        
        response = session.post("http://localhost:5000/login", data=login_data, timeout=10)
        
        if response.status_code == 200:
            print("‚úÖ Sesi√≥n creada")
        else:
            print(f"‚ùå Error en login: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error durante login: {e}")
        return False
    
    # 3. Probar b√∫squeda con t√©rminos clave
    print("\nüîç Probando b√∫squeda con t√©rminos clave...")
    url = "http://localhost:5000/api/copilot/search-with-key-terms"
    
    test_data = {
        "condicion": "Dolor lumbar cr√≥nico",
        "especialidad": "kinesiologia",
        "edad": 45,
        "terminos_clave": ["physical therapy", "rehabilitation", "exercise", "pain management"]
    }
    
    try:
        print(f"üì§ Enviando b√∫squeda con t√©rminos clave...")
        response = session.post(url, json=test_data, timeout=60)
        
        print(f"üì• C√≥digo de respuesta: {response.status_code}")
        
        if response.status_code == 200:
            try:
                data = response.json()
                if data.get('success'):
                    planes = data.get('planes_tratamiento', [])
                    print("‚úÖ B√∫squeda con t√©rminos clave completada")
                    print(f"üìÑ Planes de tratamiento encontrados: {len(planes)}")
                    
                    if planes:
                        # Analizar el primer plan para verificar DOI y a√±o
                        primer_plan = planes[0]
                        print(f"\nüìã AN√ÅLISIS DEL PRIMER PLAN:")
                        print(f"   T√≠tulo: {primer_plan.get('titulo', 'Sin t√≠tulo')}")
                        print(f"   DOI: {primer_plan.get('doi_referencia', 'No disponible')}")
                        print(f"   A√±o: {primer_plan.get('a√±o_publicacion', 'No disponible')}")
                        print(f"   Fecha: {primer_plan.get('fecha_publicacion', 'No disponible')}")
                        
                        # Verificar si el DOI es v√°lido
                        doi = primer_plan.get('doi_referencia')
                        if doi and doi != 'Sin DOI' and doi != 'No disponible':
                            print(f"   ‚úÖ DOI v√°lido: {doi}")
                            print(f"   üîó Link: https://doi.org/{doi}")
                        else:
                            print(f"   ‚ùå DOI no disponible")
                        
                        # Verificar si el a√±o es v√°lido
                        a√±o = primer_plan.get('a√±o_publicacion')
                        if a√±o and a√±o != 'N/A':
                            print(f"   ‚úÖ A√±o v√°lido: {a√±o}")
                        else:
                            print(f"   ‚ùå A√±o no disponible")
                        
                        return True
                    else:
                        print("‚ùå No se encontraron planes de tratamiento")
                        return False
                else:
                    print(f"‚ùå Error en b√∫squeda: {data.get('message', 'Error desconocido')}")
                    return False
            except json.JSONDecodeError as e:
                print(f"‚ùå Error decodificando JSON: {e}")
                print(f"üìÑ Contenido de respuesta: {response.text[:500]}")
                return False
        else:
            print(f"‚ùå Error HTTP {response.status_code}")
            try:
                error_data = response.json()
                print(f"üìÑ Error: {error_data}")
            except:
                print(f"üìÑ Contenido: {response.text[:500]}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en b√∫squeda: {e}")
        return False

def test_visualizacion_frontend():
    """Prueba la visualizaci√≥n en el frontend"""
    print("\nüé® PRUEBA DE VISUALIZACI√ìN FRONTEND")
    print("=" * 50)
    
    print("‚úÖ Para probar la visualizaci√≥n:")
    print("   1. Inicia sesi√≥n en el navegador")
    print("   2. Ve a la p√°gina professional")
    print("   3. Completa el formulario de atenci√≥n")
    print("   4. Haz clic en 'Activar Copilot Health'")
    print("   5. Verifica que en la sidebar aparezcan:")
    print("      ‚Ä¢ DOI con link clickeable")
    print("      ‚Ä¢ A√±o del estudio")
    print("      ‚Ä¢ Informaci√≥n completa del paper")
    
    return True

def main():
    """Funci√≥n principal"""
    print("üöÄ INICIANDO PRUEBAS DE DOI Y A√ëO")
    print("=" * 50)
    
    # Prueba 1: Extracci√≥n de DOI y a√±o
    extraccion_ok = test_doi_y_ano_extraccion()
    
    if not extraccion_ok:
        print("\n‚ùå Problema con la extracci√≥n de DOI y a√±o")
        return
    
    # Prueba 2: Visualizaci√≥n frontend
    visualizacion_ok = test_visualizacion_frontend()
    
    if not visualizacion_ok:
        print("\n‚ùå Problema con la visualizaci√≥n frontend")
        return
    
    print("\n‚úÖ TODAS LAS PRUEBAS PASARON EXITOSAMENTE")
    print("üéâ El sistema ahora muestra correctamente:")
    print("   ‚Ä¢ DOI con link para ir al paper")
    print("   ‚Ä¢ A√±o del estudio")
    print("   ‚Ä¢ Informaci√≥n completa de los papers")

if __name__ == "__main__":
    main() 