#!/usr/bin/env python3
"""
Script de prueba para verificar la mejora del sistema con s√≠ndrome de Moebius
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from copilot_health import copilot_health

def test_sindrome_moebius():
    """Prueba el an√°lisis del caso espec√≠fico de s√≠ndrome de Moebius"""
    print("üß™ Probando an√°lisis de s√≠ndrome de Moebius...")
    
    # Caso espec√≠fico mencionado por el usuario
    motivo_consulta = "Lactante con s√≠ndrome moebius con dificultad en lactancia materna y bajo peso"
    tipo_atencion = "fonoaudiologia"
    
    print(f"üìã Motivo de consulta: {motivo_consulta}")
    print(f"üè• Tipo de atenci√≥n: {tipo_atencion}")
    
    # Analizar el motivo de consulta
    resultado = copilot_health.analizar_motivo_consulta(motivo_consulta, tipo_atencion)
    
    print(f"\n‚úÖ AN√ÅLISIS DEL MOTIVO DE CONSULTA:")
    print(f"   Especialidad detectada: {resultado.especialidad_detectada}")
    print(f"   Categor√≠a: {resultado.categoria}")
    print(f"   Urgencia: {resultado.urgencia}")
    print(f"   S√≠ntomas principales: {', '.join(resultado.sintomas_principales)}")
    print(f"   Preguntas sugeridas: {len(resultado.preguntas_sugeridas)} preguntas")
    
    # Mostrar algunas preguntas espec√≠ficas
    print(f"\n‚ùì PREGUNTAS SUGERIDAS:")
    for i, pregunta in enumerate(resultado.preguntas_sugeridas[:5], 1):
        print(f"   {i}. {pregunta}")
    
    # Generar planes de tratamiento
    print(f"\nüíä GENERANDO PLANES DE TRATAMIENTO...")
    planes = copilot_health.sugerir_planes_tratamiento(
        diagnostico=motivo_consulta,
        especialidad=resultado.especialidad_detectada,
        edad=6  # Lactante de 6 meses
    )
    
    print(f"\n‚úÖ PLANES DE TRATAMIENTO GENERADOS: {len(planes)}")
    
    for i, plan in enumerate(planes, 1):
        print(f"\nüìã PLAN {i}: {plan.titulo}")
        print(f"   Nivel de evidencia: {plan.nivel_evidencia}")
        print(f"   DOI: {plan.doi_referencia}")
        print(f"   Contraindicaciones: {', '.join(plan.contraindicaciones)}")
        
        # Mostrar descripci√≥n detallada si es un plan de intervenci√≥n
        if "intervenci√≥n" in plan.titulo.lower():
            print(f"   ‚úÖ PLAN DE INTERVENCI√ìN ESPEC√çFICO DETECTADO")
            print(f"   Descripci√≥n detallada:")
            print(f"   {plan.descripcion}")
        else:
            print(f"   Descripci√≥n: {plan.descripcion[:200]}...")
    
    print("\n" + "="*60)

def test_mejoras_busqueda():
    """Prueba las mejoras en la b√∫squeda de condiciones espec√≠ficas"""
    print("\nüîç Probando mejoras en la b√∫squeda de condiciones espec√≠ficas...")
    
    casos_prueba = [
        {
            'motivo': 'Lactante con s√≠ndrome moebius con dificultad en lactancia materna y bajo peso',
            'tipo_atencion': 'fonoaudiologia',
            'condicion_esperada': 'sindrome_moebius'
        },
        {
            'motivo': 'Paciente con frenillo lingual corto y dificultad para tragar',
            'tipo_atencion': 'fonoaudiologia',
            'condicion_esperada': 'anquiloglosia'
        },
        {
            'motivo': 'Adulto con dolor lumbar cr√≥nico de 3 meses',
            'tipo_atencion': 'fisioterapia',
            'condicion_esperada': 'dolor_lumbar'
        },
        {
            'motivo': 'Paciente con disfagia post-ictus',
            'tipo_atencion': 'fonoaudiologia',
            'condicion_esperada': 'disfagia'
        }
    ]
    
    for i, caso in enumerate(casos_prueba, 1):
        print(f"\nüìã Caso {i}: {caso['motivo']}")
        print(f"   Tipo de atenci√≥n: {caso['tipo_atencion']}")
        print(f"   Condici√≥n esperada: {caso['condicion_esperada']}")
        
        # Analizar el motivo de consulta
        resultado = copilot_health.analizar_motivo_consulta(caso['motivo'], caso['tipo_atencion'])
        
        # Generar planes de tratamiento
        planes = copilot_health.sugerir_planes_tratamiento(
            diagnostico=caso['motivo'],
            especialidad=resultado.especialidad_detectada,
            edad=35
        )
        
        # Verificar si se gener√≥ un plan de intervenci√≥n espec√≠fico
        planes_intervencion = [p for p in planes if "intervenci√≥n" in p.titulo.lower()]
        
        print(f"   ‚úÖ Planes de tratamiento: {len(planes)}")
        print(f"   ‚úÖ Planes de intervenci√≥n espec√≠ficos: {len(planes_intervencion)}")
        
        if planes_intervencion:
            print(f"   üéØ PLAN DE INTERVENCI√ìN ESPEC√çFICO GENERADO:")
            plan = planes_intervencion[0]
            print(f"      T√≠tulo: {plan.titulo}")
            print(f"      Nivel de evidencia: {plan.nivel_evidencia}")
            
            # Verificar si contiene t√©cnicas espec√≠ficas
            if "t√©cnicas espec√≠ficas" in plan.descripcion.lower():
                print(f"      ‚úÖ Contiene t√©cnicas espec√≠ficas")
            if "aplicaciones pr√°cticas" in plan.descripcion.lower():
                print(f"      ‚úÖ Contiene aplicaciones pr√°cticas")
            if "masaje" in plan.descripcion.lower():
                print(f"      ‚úÖ Contiene t√©cnicas de masaje")
            if "ejercicios" in plan.descripcion.lower():
                print(f"      ‚úÖ Contiene ejercicios espec√≠ficos")
        
        print("-" * 40)

def test_comparacion_antes_despues():
    """Compara el sistema antes y despu√©s de las mejoras"""
    print("\nüîÑ Comparando sistema antes y despu√©s de las mejoras...")
    
    motivo = "Lactante con s√≠ndrome moebius con dificultad en lactancia materna y bajo peso"
    tipo_atencion = "fonoaudiologia"
    
    print(f"üìã Caso de prueba: {motivo}")
    print(f"üè• Tipo de atenci√≥n: {tipo_atencion}")
    
    # Analizar con el sistema mejorado
    resultado = copilot_health.analizar_motivo_consulta(motivo, tipo_atencion)
    planes = copilot_health.sugerir_planes_tratamiento(
        diagnostico=motivo,
        especialidad=resultado.especialidad_detectada,
        edad=6
    )
    
    print(f"\n‚úÖ RESULTADOS DEL SISTEMA MEJORADO:")
    print(f"   ‚Ä¢ Especialidad detectada: {resultado.especialidad_detectada}")
    print(f"   ‚Ä¢ S√≠ntomas detectados: {len(resultado.sintomas_principales)}")
    print(f"   ‚Ä¢ Preguntas sugeridas: {len(resultado.preguntas_sugeridas)}")
    print(f"   ‚Ä¢ Planes de tratamiento: {len(planes)}")
    
    # Contar planes de intervenci√≥n espec√≠ficos
    planes_intervencion = [p for p in planes if "intervenci√≥n" in p.titulo.lower()]
    print(f"   ‚Ä¢ Planes de intervenci√≥n espec√≠ficos: {len(planes_intervencion)}")
    
    if planes_intervencion:
        plan = planes_intervencion[0]
        print(f"\nüéØ PLAN DE INTERVENCI√ìN ESPEC√çFICO:")
        print(f"   T√≠tulo: {plan.titulo}")
        print(f"   Nivel de evidencia: {plan.nivel_evidencia}")
        
        # Verificar contenido espec√≠fico
        contenido_especifico = []
        if "t√©cnicas espec√≠ficas" in plan.descripcion.lower():
            contenido_especifico.append("T√©cnicas espec√≠ficas")
        if "aplicaciones pr√°cticas" in plan.descripcion.lower():
            contenido_especifico.append("Aplicaciones pr√°cticas")
        if "masaje" in plan.descripcion.lower():
            contenido_especifico.append("T√©cnicas de masaje")
        if "ejercicios" in plan.descripcion.lower():
            contenido_especifico.append("Ejercicios espec√≠ficos")
        if "protocolo" in plan.descripcion.lower():
            contenido_especifico.append("Protocolo de tratamiento")
        
        print(f"   Contenido espec√≠fico: {', '.join(contenido_especifico)}")
    
    print(f"\nüìä MEJORAS IMPLEMENTADAS:")
    print(f"   ‚úÖ Detecci√≥n autom√°tica de condiciones espec√≠ficas (s√≠ndrome de Moebius)")
    print(f"   ‚úÖ B√∫squeda mejorada con t√©rminos MeSH espec√≠ficos")
    print(f"   ‚úÖ Generaci√≥n de planes de intervenci√≥n con t√©cnicas espec√≠ficas")
    print(f"   ‚úÖ Aplicaciones pr√°cticas y protocolos de tratamiento")
    print(f"   ‚úÖ T√©cnicas de masaje y ejercicios espec√≠ficos")
    print(f"   ‚úÖ Frecuencia y duraci√≥n de tratamiento")

def main():
    """Funci√≥n principal de pruebas"""
    print("ü§ñ PRUEBAS DEL SISTEMA MEJORADO - S√çNDROME DE MOEBIUS")
    print("=" * 60)
    
    try:
        # Prueba 1: Caso espec√≠fico de s√≠ndrome de Moebius
        test_sindrome_moebius()
        
        # Prueba 2: Mejoras en la b√∫squeda de condiciones espec√≠ficas
        test_mejoras_busqueda()
        
        # Prueba 3: Comparaci√≥n antes y despu√©s
        test_comparacion_antes_despues()
        
        print("\n‚úÖ Todas las pruebas completadas exitosamente!")
        print("\nüéØ RESUMEN DE MEJORAS IMPLEMENTADAS:")
        print("   ‚Ä¢ Detecci√≥n autom√°tica de condiciones m√©dicas espec√≠ficas")
        print("   ‚Ä¢ B√∫squeda mejorada con t√©rminos MeSH espec√≠ficos")
        print("   ‚Ä¢ Generaci√≥n de planes de intervenci√≥n con t√©cnicas concretas")
        print("   ‚Ä¢ Aplicaciones pr√°cticas y protocolos de tratamiento")
        print("   ‚Ä¢ T√©cnicas de masaje y ejercicios espec√≠ficos")
        print("   ‚Ä¢ Frecuencia y duraci√≥n de tratamiento")
        print("   ‚Ä¢ Mejor manejo de casos complejos como s√≠ndrome de Moebius")
        
    except Exception as e:
        print(f"\n‚ùå Error durante las pruebas: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 