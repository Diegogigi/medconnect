#!/usr/bin/env python3
"""
Script para verificar qu√© est√° devolviendo la p√°gina professional
"""

import requests

def verificar_pagina_professional():
    """Verifica qu√© est√° devolviendo la p√°gina professional"""
    
    print("üîç VERIFICACI√ìN DE LA P√ÅGINA PROFESSIONAL")
    print("=" * 50)
    
    try:
        # Probar sin autenticaci√≥n
        print("üîç Probando sin autenticaci√≥n...")
        response = requests.get("http://localhost:5000/professional", timeout=10)
        
        print(f"   Status Code: {response.status_code}")
        print(f"   Content-Type: {response.headers.get('Content-Type', 'No especificado')}")
        
        # Verificar si es HTML o JSON
        content = response.text[:500]
        print(f"   Primeros 500 caracteres:")
        print(f"   {content}")
        
        # Verificar si es p√°gina de login
        if 'login' in content.lower() or 'iniciar sesi√≥n' in content.lower():
            print("   ‚úÖ Es p√°gina de login (esperado sin autenticaci√≥n)")
        elif 'sugerenciasTratamiento' in content:
            print("   ‚úÖ Es p√°gina professional (inesperado sin autenticaci√≥n)")
        else:
            print("   ‚ùì Contenido no identificado")
        
        print()
        
        # Probar con autenticaci√≥n
        print("üîç Probando con autenticaci√≥n...")
        session = requests.Session()
        
        # Login
        login_data = {
            'email': 'giselle.arratia@gmail.com',
            'password': 'Gigi2025'
        }
        
        login_response = session.post(
            "http://localhost:5000/login",
            data=login_data,
            timeout=10
        )
        
        print(f"   Login Status: {login_response.status_code}")
        
        # Obtener p√°gina professional autenticada
        prof_response = session.get("http://localhost:5000/professional", timeout=10)
        
        print(f"   Professional Status: {prof_response.status_code}")
        print(f"   Content-Type: {prof_response.headers.get('Content-Type', 'No especificado')}")
        
        # Verificar contenido
        content = prof_response.text[:1000]
        print(f"   Primeros 1000 caracteres:")
        print(f"   {content}")
        
        # Verificar elementos espec√≠ficos
        elementos_buscar = [
            'sugerenciasTratamiento',
            'listaSugerenciasTratamiento',
            'sugerirTratamientoConIA',
            'realizarBusquedaPersonalizada',
            'obtenerTerminosSeleccionados'
        ]
        
        print("\nüîç Verificando elementos espec√≠ficos:")
        for elemento in elementos_buscar:
            if elemento in prof_response.text:
                print(f"   ‚úÖ {elemento}")
            else:
                print(f"   ‚ùå {elemento}")
        
        # Verificar si es p√°gina de login
        if 'login' in prof_response.text.lower() or 'iniciar sesi√≥n' in prof_response.text.lower():
            print("\n‚ùå PROBLEMA: A√∫n devuelve p√°gina de login despu√©s de autenticaci√≥n")
            return False
        elif 'sugerenciasTratamiento' in prof_response.text:
            print("\n‚úÖ √âXITO: Es la p√°gina professional correcta")
            return True
        else:
            print("\n‚ùì Contenido no identificado")
            return False
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ INICIANDO VERIFICACI√ìN DE P√ÅGINA PROFESSIONAL")
    print("=" * 60)
    
    resultado = verificar_pagina_professional()
    
    print(f"\nüìä RESULTADO: {'OK' if resultado else 'ERROR'}")
    
    if resultado:
        print("üéØ La p√°gina professional est√° funcionando correctamente")
    else:
        print("üéØ Hay un problema con la autenticaci√≥n o la p√°gina professional") 