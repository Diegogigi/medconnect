#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Bot de Telegram independiente para MedConnect
Funciona directamente con Google Sheets sin necesidad de servidor web local
"""

import os
import json
import logging
from datetime import datetime
import gspread
from google.oauth2.service_account import Credentials
import requests
import time

# Configuraci√≥n de logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Configuraci√≥n del bot
TELEGRAM_BOT_TOKEN = "7618933472:AAEYCYi9Sso9YVP9aB8dLWvlZ-1hxqgdhck"
GOOGLE_SHEETS_ID = "1UvnO2lpZSyv13Hf2eG--kQcTff5BBh7jrZ6taFLJypU"

# Credenciales de Google Service Account (reales)
GOOGLE_SERVICE_ACCOUNT_JSON = {
    "type": "service_account",
    "project_id": "sincere-mission-463804-h9",
    "private_key_id": "95d16ea62efca929d5ba7b73a14bb07e0b28eb48",
    "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCkF61+dbK/uXup\nwh2Mwt8bLAEHgOgywXOMhDlR/Xhnyos3my8Q+ovx5rpYE822YqA/BhRVhYoBr1A2\nXkYimPiD514PZ/3eLw+flhAVGlOvbWULGDfZFQNFT1+yzbKds+HNjD6p3mr5lGcz\nnPJS2x4rzEQlJQVG8r5RbiM5vmKxGMBG41mzhlFUCenXta+jgdaRlVQWmjsxY3RM\nIIgiCi8/2UO1RebSyGHQ1SXVXcDuvzDlcNSreg/dZQmyDUlqje4uu4qDYf0p/oC/\nw7W6lzE22WrEsRSmGVVpxftXKNsCDOt8ubQbpko9kVj14Br0Bvh24VqTTW7HJ/wL\nIBcFva/nAgMBAAECggEAAyZZNDY6Kif7UbTiMFOFSNY9ZtF4o5DHEQlwuDwvVX6z\n0WtvKdpFWW1eYlZu+nNGNC9/sGyRy5p75a9FlWBuVMnaKl2Kp/srR5rv0BfjR1jI\nOcBLQiV/HJN7eMkuBozvZqysf0I/t2671GfM1v5Rw/F11WiygzwhnxqIHpGi/1c8\naDKZTFlw+xmv29tsrG32K0P7/aCQAgChV1j4TFuapSvH181B5Uv/FEixP2HcPHic\ntLHx064uVmtlN0QWgw5KM0z95qlXsdq3cYvqESh5OmQ9ALscBzZazyPztjzYGIHv\nuamL92Njd69vV5qc9rU7DlNq6o0oIEKNP+qiGWE8EQKBgQDYmnEtv31N+/erD4S2\ni3wehrYPfQY4I/MqnGhYPqY4RrsVrU8zRwnVyl8ilqB66rCpsZRp4sEDVITKwFua\nngOXIEw7RJXJfqaTUnBvbeDpz4X4lK5v+A8SwYRlK07qmep9soB79IMQeiMFVVz7\n5ojieJMVY7mtwy9nm9SBeS3FewKBgQDB8DWhyfbVpnxGm5FSqZjt7FD4kiPBaUop\n8f8TiQ6y2ODslwCH4nTN5sMHtPMTEvFkV4tRoG3ATep+tTGGRhGdJJOxzwckxh8X\nS0SzkCnJd06vclPjSqfDXteYKuyX0FGXysdWFIwOZ0QycvAUm+a7Ut1HolXAuiq9\ncisFeFkVhQKBgF4chI5nBA+tKcgWXwhdhJlS2KnUHa6o2A+sk5274sbS3Jini6Dw\n/bH5UuqZXbLqY8XnVV/IWSqUP3pEp8h/XXn9W4Ho49f/gmrCR/3yVOXh+AiwuTYH\nJq10jYzTi19dbsgclbzF2WiAWNUJaPQ+Dz2vO+DwSo3YH7G5wFRdDWkfAoGAMXCO\nC4+T+EU32zwfYOZRUR30Slne+Zhgyq6haxZ+g8NcG5QnE3z8b90LDPTpHoyusvjK\nUGXIdMSoKeMBHAzSwq+nYyW22X4UQPj0K55tuKlMitdnYUMP33NXHLicldsKYdrU\n1DHqvmU+8mlwoKBZwplORcuxdq8+5Aqtwvg6JY0CgYAxp/xa94PNFp4FO6LSQcNd\ngB4XZpj0AMlZqf70v7/0P1GU3aaSaLBEOUr4EzvyN7Jqd0WjSd0D+Z7R5XWFGbxu\nzuzj/OGWV0GDBppWfY4FwIYx9b564abDbhchqF0a3jYTMsUxk3J8cbLwoqzOU8sE\nym0W+E4k/xHFdwNtunoySw==\n-----END PRIVATE KEY-----\n",
    "client_email": "medconnect@sincere-mission-463804-h9.iam.gserviceaccount.com",
    "client_id": "109935890158775682198",
    "auth_uri": "https://accounts.google.com/o/oauth2/auth",
    "token_uri": "https://oauth2.googleapis.com/token",
    "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
    "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/medconnect%40sincere-mission-463804-h9.iam.gserviceaccount.com",
    "universe_domain": "googleapis.com"
}

class MedConnectBot:
    def __init__(self):
        self.bot_token = TELEGRAM_BOT_TOKEN
        self.sheets_id = GOOGLE_SHEETS_ID
        self.last_update_id = 0
        self.setup_google_sheets()
        
    def setup_google_sheets(self):
        """Configura la conexi√≥n con Google Sheets"""
        try:
            # Usar las credenciales del service account
            credentials = Credentials.from_service_account_info(
                GOOGLE_SERVICE_ACCOUNT_JSON,
                scopes=['https://www.googleapis.com/auth/spreadsheets']
            )
            
            self.gc = gspread.authorize(credentials)
            self.spreadsheet = self.gc.open_by_key(self.sheets_id)
            logger.info("‚úÖ Conexi√≥n con Google Sheets establecida")
            
        except Exception as e:
            logger.error(f"‚ùå Error conectando con Google Sheets: {e}")
            self.gc = None
            self.spreadsheet = None
    
    def log_interaction(self, user_id, username, message, response, action_type="message"):
        """Registra la interacci√≥n en Google Sheets"""
        try:
            if not self.spreadsheet:
                return
                
            worksheet = self.spreadsheet.worksheet('Interacciones_Bot')
            
            # Obtener el siguiente ID
            all_values = worksheet.get_all_values()
            next_id = len(all_values)  # El header cuenta como 1
            
            row_data = [
                next_id,
                user_id,
                username or 'Sin username',
                message,
                response,
                datetime.now().isoformat(),
                action_type,
                'processed'
            ]
            
            worksheet.append_row(row_data)
            logger.info(f"‚úÖ Interacci√≥n registrada para usuario {user_id}")
            
        except Exception as e:
            logger.error(f"‚ùå Error registrando interacci√≥n: {e}")
    
    def send_message(self, chat_id, text):
        """Env√≠a un mensaje a trav√©s del bot de Telegram"""
        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            data = {
                'chat_id': chat_id,
                'text': text,
                'parse_mode': 'HTML'
            }
            
            response = requests.post(url, json=data)
            response.raise_for_status()
            
            logger.info(f"‚úÖ Mensaje enviado a chat {chat_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error enviando mensaje: {e}")
            return False
    
    def process_message(self, message):
        """Procesa los mensajes recibidos"""
        text = message.get('text', '').lower().strip()
        chat_id = message['chat']['id']
        user_id = message['from']['id']
        username = message['from'].get('username', '')
        
        # Procesar comandos y mensajes
        if text.startswith('/start'):
            response = """¬°Hola! üëã Bienvenido a MedConnect

Soy tu asistente personal de salud. Puedo ayudarte con:

üìã Registrar consultas m√©dicas
üíä Gestionar medicamentos  
ü©∫ Registrar ex√°menes
üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Notificar a familiares
üìä Consultar tu historial

¬øEn qu√© puedo ayudarte hoy?

<i>Escribe palabras como "consulta", "medicamento", "examen" o "historial" para comenzar.</i>"""
        
        elif 'consulta' in text or 'm√©dico' in text or 'doctor' in text:
            response = """üìã <b>Registrar Consulta M√©dica</b>

Para registrar una consulta m√©dica, necesito la siguiente informaci√≥n:

1Ô∏è‚É£ <b>Fecha de la consulta</b> (ej: 15/06/2024)
2Ô∏è‚É£ <b>Nombre del m√©dico</b>
3Ô∏è‚É£ <b>Especialidad</b> (ej: Cardiolog√≠a, Medicina General)
4Ô∏è‚É£ <b>Diagn√≥stico</b> o motivo de consulta
5Ô∏è‚É£ <b>Tratamiento indicado</b>

¬øPodr√≠as proporcionarme esta informaci√≥n paso a paso?

<i>Ejemplo: "Consulta del 15/06/2024 con Dr. Garc√≠a, cardi√≥logo, por control de presi√≥n arterial, medicamento Losart√°n 50mg"</i>"""
        
        elif 'medicamento' in text or 'medicina' in text or 'pastilla' in text:
            response = """üíä <b>Registrar Medicamento</b>

Para registrar un medicamento, necesito:

1Ô∏è‚É£ <b>Nombre del medicamento</b>
2Ô∏è‚É£ <b>Dosis</b> (ej: 50mg, 10ml)
3Ô∏è‚É£ <b>Frecuencia</b> (ej: cada 8 horas, 2 veces al d√≠a)
4Ô∏è‚É£ <b>M√©dico que lo prescribi√≥</b>
5Ô∏è‚É£ <b>Fecha de inicio</b>

¬øTienes esta informaci√≥n?

<i>Ejemplo: "Medicamento Losart√°n 50mg, cada 12 horas, prescrito por Dr. Garc√≠a, desde el 15/06/2024"</i>"""
        
        elif 'examen' in text or 'an√°lisis' in text or 'laboratorio' in text:
            response = """ü©∫ <b>Registrar Examen</b>

Para registrar un examen m√©dico, necesito:

1Ô∏è‚É£ <b>Tipo de examen</b> (ej: An√°lisis de sangre, Electrocardiograma)
2Ô∏è‚É£ <b>Fecha realizada</b>
3Ô∏è‚É£ <b>Laboratorio o centro m√©dico</b>
4Ô∏è‚É£ <b>Resultados principales</b>
5Ô∏è‚É£ <b>M√©dico que lo solicit√≥</b>

¬øTienes esta informaci√≥n?

<i>Ejemplo: "An√°lisis de sangre del 10/06/2024 en Lab Central, colesterol 180, solicitado por Dr. Garc√≠a"</i>"""
        
        elif 'historial' in text or 'ver' in text or 'consultar' in text:
            response = """üìä <b>Consultar Historial M√©dico</b>

Tu informaci√≥n m√©dica est√° guardada de forma segura. Puedes consultar:

üè• <b>√öltimas consultas m√©dicas</b>
üíä <b>Medicamentos activos</b>
ü©∫ <b>Resultados de ex√°menes</b>
üë®‚Äç‚öïÔ∏è <b>M√©dicos tratantes</b>

Para ver tu historial completo, visita:
üåê <b>Portal Web:</b> https://medconnect.cl/patient

¬øQu√© informaci√≥n espec√≠fica te gustar√≠a consultar?

<i>Tambi√©n puedes preguntar: "¬øcu√°les son mis medicamentos?" o "¬øcu√°ndo fue mi √∫ltima consulta?"</i>"""
        
        elif 'familia' in text or 'familiar' in text or 'compartir' in text:
            response = """üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <b>Acceso Familiar</b>

Puedes autorizar a tus familiares para que accedan a tu informaci√≥n m√©dica:

‚úÖ <b>Beneficios:</b>
‚Ä¢ Familiares pueden estar informados
‚Ä¢ Apoyo en emergencias m√©dicas
‚Ä¢ Recordatorios de medicamentos
‚Ä¢ Acompa√±amiento en consultas

üìù <b>Para autorizar acceso:</b>
Proporciona el nombre, parentesco y tel√©fono del familiar.

<i>Ejemplo: "Autorizar a Mar√≠a Gonz√°lez, mi hija, tel√©fono +56912345678"</i>

üîí <b>Tu privacidad est√° protegida.</b> Solo t√∫ decides qui√©n puede acceder."""
        
        elif 'ayuda' in text or 'help' in text:
            response = """‚ùì <b>Centro de Ayuda - MedConnect</b>

<b>Comandos disponibles:</b>
‚Ä¢ /start - Mensaje de bienvenida
‚Ä¢ "consulta" - Registrar consulta m√©dica
‚Ä¢ "medicamento" - Registrar medicamentos
‚Ä¢ "examen" - Registrar ex√°menes
‚Ä¢ "historial" - Ver tu informaci√≥n
‚Ä¢ "familia" - Gestionar acceso familiar

<b>¬øC√≥mo funciona?</b>
1Ô∏è‚É£ Escribe qu√© quieres hacer
2Ô∏è‚É£ Sigue las instrucciones
3Ô∏è‚É£ Tu informaci√≥n se guarda autom√°ticamente

<b>Soporte t√©cnico:</b>
üìß soporte@medconnect.cl
üì± WhatsApp: +56912345678

<b>Horario de atenci√≥n:</b>
üïí Lunes a Viernes: 8:00 - 18:00
üïí S√°bados: 9:00 - 13:00"""
        
        else:
            response = """ü§î No estoy seguro de c√≥mo ayudarte con eso.

<b>Puedes preguntarme sobre:</b>
üìã <b>"consulta"</b> - Registrar consultas m√©dicas
üíä <b>"medicamento"</b> - Gestionar medicamentos
ü©∫ <b>"examen"</b> - Registrar ex√°menes
üìä <b>"historial"</b> - Ver tu informaci√≥n m√©dica
üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <b>"familia"</b> - Acceso familiar

O escribe <b>/start</b> para ver todas las opciones.

<i>Tip: Usa palabras clave simples como "consulta", "medicina" o "examen"</i>"""
        
        # Enviar respuesta
        self.send_message(chat_id, response)
        
        # Registrar interacci√≥n
        self.log_interaction(user_id, username, message.get('text', ''), response)
    
    def get_updates(self):
        """Obtiene actualizaciones del bot"""
        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/getUpdates"
            params = {
                'offset': self.last_update_id + 1,
                'timeout': 30
            }
            
            response = requests.get(url, params=params)
            response.raise_for_status()
            
            data = response.json()
            
            if data['ok']:
                return data['result']
            else:
                logger.error(f"‚ùå Error en respuesta de Telegram: {data}")
                return []
                
        except Exception as e:
            logger.error(f"‚ùå Error obteniendo actualizaciones: {e}")
            return []
    
    def run(self):
        """Ejecuta el bot en modo polling"""
        logger.info("üöÄ Iniciando MedConnect Bot...")
        logger.info("üì± Bot disponible en: https://t.me/medconnect_bot")
        logger.info("‚èπÔ∏è  Presiona Ctrl+C para detener")
        
        try:
            while True:
                updates = self.get_updates()
                
                for update in updates:
                    self.last_update_id = update['update_id']
                    
                    if 'message' in update:
                        message = update['message']
                        logger.info(f"üì® Mensaje recibido de {message['from'].get('username', 'usuario')}: {message.get('text', '')}")
                        self.process_message(message)
                
                time.sleep(1)  # Peque√±a pausa para no saturar la API
                
        except KeyboardInterrupt:
            logger.info("üõë Bot detenido por el usuario")
        except Exception as e:
            logger.error(f"‚ùå Error ejecutando bot: {e}")

if __name__ == "__main__":
    bot = MedConnectBot()
    bot.run() 