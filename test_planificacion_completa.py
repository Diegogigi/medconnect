#!/usr/bin/env python3
"""
Script de prueba para verificar la planificaci√≥n completa de tratamiento
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from copilot_health import CopilotHealth
import json

def test_planificacion_completa():
    """Prueba la generaci√≥n de planificaci√≥n completa de tratamiento"""
    print("üß™ PRUEBAS DE PLANIFICACI√ìN COMPLETA DE TRATAMIENTO")
    print("=" * 60)
    
    try:
        copilot = CopilotHealth()
        print("‚úÖ Copilot Health inicializado correctamente")
        
        # Casos de prueba con diferentes tipos de atenci√≥n
        casos_prueba = [
            {
                "motivo_atencion": "Dolor lumbar cr√≥nico con irradiaci√≥n a miembro inferior derecho",
                "tipo_atencion": "fisioterapia",
                "evaluacion_observaciones": "Paciente presenta dolor lumbar de 6 meses de evoluci√≥n, con irradiaci√≥n a miembro inferior derecho. Limitaci√≥n funcional para actividades de la vida diaria.",
                "descripcion": "Fisioterapia - Dolor lumbar cr√≥nico"
            },
            {
                "motivo_atencion": "Problemas de pronunciaci√≥n y dificultades en la comunicaci√≥n",
                "tipo_atencion": "fonoaudiologia",
                "evaluacion_observaciones": "Paciente presenta dificultades en la pronunciaci√≥n de ciertos fonemas y problemas en la comunicaci√≥n oral.",
                "descripcion": "Fonoaudiolog√≠a - Problemas de pronunciaci√≥n"
            },
            {
                "motivo_atencion": "Ansiedad y estr√©s laboral con s√≠ntomas de depresi√≥n",
                "tipo_atencion": "psicologia",
                "evaluacion_observaciones": "Paciente refiere ansiedad, estr√©s laboral y s√≠ntomas depresivos de 3 meses de evoluci√≥n.",
                "descripcion": "Psicolog√≠a - Ansiedad y estr√©s"
            }
        ]
        
        for i, caso in enumerate(casos_prueba, 1):
            print(f"\nüìã CASO {i}: {caso['descripcion']}")
            print(f"   Motivo de atenci√≥n: '{caso['motivo_atencion']}'")
            print(f"   Tipo de atenci√≥n: '{caso['tipo_atencion']}'")
            print(f"   Evaluaci√≥n/Observaciones: '{caso['evaluacion_observaciones']}'")
            
            try:
                planificacion = copilot.generar_planificacion_tratamiento_completa(
                    motivo_atencion=caso['motivo_atencion'],
                    tipo_atencion=caso['tipo_atencion'],
                    evaluacion_observaciones=caso['evaluacion_observaciones'],
                    edad=35
                )
                
                print(f"   ‚úÖ Planificaci√≥n generada exitosamente")
                
                # Verificar estructura de la planificaci√≥n
                print(f"\n   üìã ESTRUCTURA DE PLANIFICACI√ìN:")
                print(f"      ‚úÖ Resumen cl√≠nico: {'Presente' if planificacion.get('resumen_clinico') else 'Faltante'}")
                print(f"      ‚úÖ Objetivos: {len(planificacion.get('objetivos_tratamiento', []))} objetivos")
                print(f"      ‚úÖ Intervenciones: {len(planificacion.get('intervenciones_especificas', []))} intervenciones")
                print(f"      ‚úÖ Cronograma: {len(planificacion.get('cronograma_tratamiento', []))} fases")
                print(f"      ‚úÖ Criterios evaluaci√≥n: {len(planificacion.get('criterios_evaluacion', []))} criterios")
                print(f"      ‚úÖ Estudios basados: {len(planificacion.get('estudios_basados', []))} estudios")
                print(f"      ‚úÖ Aclaraci√≥n legal: {'Presente' if planificacion.get('aclaracion_legal') else 'Faltante'}")
                
                # Mostrar detalles espec√≠ficos
                print(f"\n   üéØ OBJETIVOS DEL TRATAMIENTO:")
                for j, objetivo in enumerate(planificacion.get('objetivos_tratamiento', []), 1):
                    print(f"      {j}. {objetivo}")
                
                if planificacion.get('intervenciones_especificas'):
                    print(f"\n   üî¨ INTERVENCIONES ESPEC√çFICAS:")
                    for j, intervencion in enumerate(planificacion['intervenciones_especificas'], 1):
                        print(f"      {j}. {intervencion['titulo']}")
                        print(f"         Descripci√≥n: {intervencion['descripcion']}")
                        print(f"         Evidencia: {intervencion['evidencia']}")
                        print(f"         DOI: {intervencion['doi']}")
                
                if planificacion.get('estudios_basados'):
                    print(f"\n   üìö ESTUDIOS CIENT√çFICOS:")
                    for j, estudio in enumerate(planificacion['estudios_basados'], 1):
                        print(f"      {j}. {estudio['titulo']}")
                        print(f"         Autores: {estudio['autores']}")
                        print(f"         DOI: {estudio['doi']}")
                        print(f"         Fecha: {estudio['fecha']}")
                        print(f"         Fuente: {estudio['fuente']}")
                
                print(f"\n   ‚ö†Ô∏è ACLARACI√ìN LEGAL:")
                print(f"      {planificacion.get('aclaracion_legal', 'No disponible')}")
                
            except Exception as e:
                print(f"   ‚ùå Error en caso {i}: {e}")
        
        # Probar formato JSON para frontend
        print(f"\n\nüîç PROBANDO FORMATO JSON PARA FRONTEND")
        print("=" * 50)
        
        planificacion = copilot.generar_planificacion_tratamiento_completa(
            motivo_atencion="Dolor lumbar",
            tipo_atencion="fisioterapia",
            evaluacion_observaciones="Paciente con dolor lumbar cr√≥nico",
            edad=40
        )
        
        print("üìã Formato JSON generado:")
        print(json.dumps(planificacion, indent=2, ensure_ascii=False))
        
        # Verificar que todos los campos necesarios est√©n presentes
        campos_requeridos = [
            'resumen_clinico', 'objetivos_tratamiento', 'intervenciones_especificas',
            'cronograma_tratamiento', 'criterios_evaluacion', 'estudios_basados', 'aclaracion_legal'
        ]
        
        print(f"\n‚úÖ VERIFICACI√ìN DE CAMPOS:")
        for campo in campos_requeridos:
            presente = campo in planificacion and planificacion[campo] is not None
            print(f"   {campo}: {'‚úÖ' if presente else '‚ùå'}")
        
    except Exception as e:
        print(f"‚ùå Error en pruebas de planificaci√≥n completa: {e}")
        return False
    
    return True

def test_apis_medicas_estudios():
    """Prueba espec√≠ficamente la obtenci√≥n de estudios de las APIs m√©dicas"""
    print(f"\n\nüî¨ PRUEBAS DE ESTUDIOS DE APIS M√âDICAS (2020-2025)")
    print("=" * 70)
    
    try:
        from medical_apis_integration import MedicalAPIsIntegration
        
        apis = MedicalAPIsIntegration()
        print("‚úÖ APIs m√©dicas inicializadas correctamente")
        
        # Probar b√∫squeda en PubMed con filtro de fecha
        print("\nüîç Probando b√∫squeda en PubMed (2020-2025)...")
        tratamientos_pubmed = apis.buscar_tratamiento_pubmed("dolor lumbar", "fisioterapia")
        
        if tratamientos_pubmed:
            print(f"   ‚úÖ Encontrados {len(tratamientos_pubmed)} tratamientos en PubMed (2020-2025)")
            
            for i, tratamiento in enumerate(tratamientos_pubmed, 1):
                print(f"\n   üìã Tratamiento {i} de PubMed:")
                print(f"      T√≠tulo: {tratamiento.titulo}")
                print(f"      DOI: {tratamiento.doi}")
                print(f"      Fuente: {tratamiento.fuente}")
                print(f"      Tipo de evidencia: {tratamiento.tipo_evidencia}")
                print(f"      Fecha: {tratamiento.fecha_publicacion}")
                print(f"      Autores: {', '.join(tratamiento.autores)}")
                
                # Verificar que el DOI sea v√°lido
                if tratamiento.doi and tratamiento.doi != "Sin DOI":
                    print(f"      ‚úÖ DOI v√°lido: {tratamiento.doi}")
                    print(f"      üîó Link: https://doi.org/{tratamiento.doi}")
                else:
                    print(f"      ‚ö†Ô∏è DOI no disponible")
        else:
            print("   ‚ö†Ô∏è No se encontraron tratamientos en PubMed (2020-2025)")
        
        # Probar b√∫squeda en Europe PMC con filtro de fecha
        print("\nüîç Probando b√∫squeda en Europe PMC (2020-2025)...")
        tratamientos_europepmc = apis.buscar_europepmc("dolor lumbar", "fisioterapia")
        
        if tratamientos_europepmc:
            print(f"   ‚úÖ Encontrados {len(tratamientos_europepmc)} tratamientos en Europe PMC (2020-2025)")
            
            for i, tratamiento in enumerate(tratamientos_europepmc, 1):
                print(f"\n   üìã Tratamiento {i} de Europe PMC:")
                print(f"      T√≠tulo: {tratamiento.titulo}")
                print(f"      DOI: {tratamiento.doi}")
                print(f"      Fuente: {tratamiento.fuente}")
                print(f"      Tipo de evidencia: {tratamiento.tipo_evidencia}")
                print(f"      Fecha: {tratamiento.fecha_publicacion}")
                
                # Verificar que el DOI sea v√°lido
                if tratamiento.doi and tratamiento.doi != "Sin DOI":
                    print(f"      ‚úÖ DOI v√°lido: {tratamiento.doi}")
                    print(f"      üîó Link: https://doi.org/{tratamiento.doi}")
                else:
                    print(f"      ‚ö†Ô∏è DOI no disponible")
        else:
            print("   ‚ö†Ô∏è No se encontraron tratamientos en Europe PMC (2020-2025)")
        
    except Exception as e:
        print(f"‚ùå Error en pruebas de APIs m√©dicas: {e}")
        return False
    
    return True

def main():
    """Funci√≥n principal"""
    print("üöÄ INICIANDO PRUEBAS DE PLANIFICACI√ìN COMPLETA DE TRATAMIENTO")
    print("=" * 80)
    
    try:
        # Ejecutar todas las pruebas
        success1 = test_planificacion_completa()
        success2 = test_apis_medicas_estudios()
        
        if success1 and success2:
            print("\n\n‚úÖ TODAS LAS PRUEBAS COMPLETADAS EXITOSAMENTE")
            print("üéØ La planificaci√≥n completa de tratamiento est√° funcionando correctamente")
            
            print("\nüìã RESUMEN DE VERIFICACIONES:")
            print("   ‚úÖ Planificaci√≥n completa basada en m√∫ltiples fuentes")
            print("   ‚úÖ Estudios cient√≠ficos de 2020-2025")
            print("   ‚úÖ Objetivos espec√≠ficos por tipo de atenci√≥n")
            print("   ‚úÖ Intervenciones basadas en evidencia")
            print("   ‚úÖ Cronograma de tratamiento estructurado")
            print("   ‚úÖ Criterios de evaluaci√≥n")
            print("   ‚úÖ Aclaraci√≥n legal incluida")
            print("   ‚úÖ Formato JSON para frontend")
            print("   ‚úÖ APIs m√©dicas con filtros de fecha")
            
        else:
            print("\n‚ùå ALGUNAS PRUEBAS FALLARON")
            return False
        
    except Exception as e:
        print(f"\n‚ùå ERROR EN LAS PRUEBAS: {e}")
        return False
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 