#!/usr/bin/env python3
"""
Reparar hashes vac√≠os/corruptos en Google Sheets
"""

import bcrypt
from auth_manager import AuthManager

def inspect_and_fix_hashes():
    """Inspeccionar y reparar todos los hashes vac√≠os/corruptos"""
    print("üîç INSPECCIONAR Y REPARAR HASHES EN GOOGLE SHEETS")
    print("=" * 60)
    
    try:
        # Conectar a AuthManager
        auth = AuthManager()
        print("‚úÖ Conectado a AuthManager")
        
        # Obtener todos los registros
        all_records = auth.users_sheet.get_all_records()
        print(f"üìä Total de usuarios encontrados: {len(all_records)}")
        
        # Contrase√±a temporal para usuarios sin hash
        temp_password = "MedConnect2025!"
        temp_hash = auth.hash_password(temp_password)
        
        print(f"\nüîí Hash temporal generado: {temp_hash[:30]}...")
        
        # Inspeccionar cada usuario
        fixed_count = 0
        
        for i, record in enumerate(all_records):
            row_index = i + 2  # +2 por header y √≠ndice 0
            email = record.get('email', 'Sin email')
            stored_hash = record.get('password', '')
            
            print(f"\nüë§ Usuario {i+1}: {email}")
            print(f"   Hash actual: '{stored_hash}'")
            print(f"   Longitud hash: {len(stored_hash)}")
            
            # Verificar si el hash est√° vac√≠o o corrupto
            needs_fix = False
            
            if not stored_hash:
                print("   ‚ùå PROBLEMA: Hash completamente vac√≠o")
                needs_fix = True
            elif len(stored_hash) < 20:
                print("   ‚ùå PROBLEMA: Hash demasiado corto")
                needs_fix = True
            elif not stored_hash.startswith('$'):
                print("   ‚ùå PROBLEMA: Hash no parece bcrypt")
                needs_fix = True
            else:
                print("   ‚úÖ Hash parece v√°lido")
            
            # Reparar si es necesario
            if needs_fix:
                try:
                    print(f"   üîß REPARANDO: Aplicando hash temporal")
                    
                    # Actualizar en Google Sheets
                    cell_range = f'F{row_index}'
                    auth.users_sheet.update(cell_range, [[temp_hash]], value_input_option='RAW')
                    
                    print(f"   ‚úÖ REPARADO: Hash actualizado en fila {row_index}")
                    print(f"   üîë Contrase√±a temporal: {temp_password}")
                    fixed_count += 1
                    
                except Exception as e:
                    print(f"   ‚ùå ERROR reparando: {e}")
            
        print(f"\nüìä RESUMEN:")
        print(f"   Total usuarios: {len(all_records)}")
        print(f"   Usuarios reparados: {fixed_count}")
        print(f"   Contrase√±a temporal para reparados: {temp_password}")
        
        if fixed_count > 0:
            print(f"\nüéØ INSTRUCCIONES PARA USUARIOS:")
            print(f"   1. Usar contrase√±a temporal: {temp_password}")
            print(f"   2. Cambiar contrase√±a en el perfil despu√©s del login")
            print(f"   3. La funci√≥n de cambio de contrase√±a ya est√° implementada")
        
    except Exception as e:
        print(f"‚ùå Error general: {e}")

def test_hash_generation():
    """Probar que la generaci√≥n de hashes funciona"""
    print("\nüß™ PROBAR GENERACI√ìN DE HASHES")
    print("=" * 40)
    
    try:
        auth = AuthManager()
        
        test_passwords = ["MedConnect2025!", "test123", "password"]
        
        for password in test_passwords:
            hash_generated = auth.hash_password(password)
            print(f"Contrase√±a: {password}")
            print(f"Hash: {hash_generated}")
            print(f"Longitud: {len(hash_generated)}")
            
            # Verificar que el hash funciona
            verification = auth.verify_password(password, hash_generated)
            print(f"Verificaci√≥n: {verification}")
            print()
            
    except Exception as e:
        print(f"‚ùå Error probando hashes: {e}")

if __name__ == "__main__":
    test_hash_generation()
    print("\n" + "="*60)
    
    confirm = input("¬øProceder a inspeccionar y reparar hashes? (y/N): ")
    if confirm.lower() == 'y':
        inspect_and_fix_hashes()
    else:
        print("Operaci√≥n cancelada.") 