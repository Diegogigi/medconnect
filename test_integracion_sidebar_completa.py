#!/usr/bin/env python3
"""
Script para verificar la integraci√≥n completa de Copilot Health en la sidebar
"""

import requests
import time

def test_integracion_sidebar_completa():
    """Verifica la integraci√≥n completa de Copilot Health en la sidebar"""
    print("üéØ VERIFICACI√ìN DE INTEGRACI√ìN COMPLETA EN SIDEBAR")
    print("=" * 60)
    
    try:
        # URL base
        base_url = "http://localhost:5000"
        
        # 1. Verificar que la p√°gina professional est√© disponible
        print("\n1. üîç Verificando p√°gina professional...")
        response = requests.get(f"{base_url}/professional", timeout=10)
        
        if response.status_code == 200:
            print("‚úÖ P√°gina professional accesible")
            
            # 2. Verificar que el archivo JavaScript est√© cargado con la versi√≥n correcta
            if 'professional.js?v=1.7' in response.text:
                print("‚úÖ Script professional.js versi√≥n 1.7 detectado")
            else:
                print("‚ö†Ô∏è Script professional.js no tiene la versi√≥n esperada")
                print("   Versiones encontradas:")
                import re
                versions = re.findall(r'professional\.js\?v=(\d+\.\d+)', response.text)
                for version in versions:
                    print(f"   - v{version}")
        else:
            print(f"‚ùå Error accediendo a la p√°gina: {response.status_code}")
            return
        
        # 3. Verificar que el archivo JavaScript est√© disponible
        print("\n2. üîç Verificando archivo JavaScript...")
        js_response = requests.get(f"{base_url}/static/js/professional.js", timeout=10)
        
        if js_response.status_code == 200:
            print("‚úÖ Archivo professional.js accesible")
            
            # 4. Verificar que las funciones del chat integrado est√©n presentes
            js_content = js_response.text
            
            print("\n3. üîç Verificando funciones del chat integrado...")
            
            funciones_chat_integrado = [
                'agregarMensajeSidebar',
                'mostrarTypingSidebar',
                'removerTypingSidebar',
                'limpiarChatSidebar',
                'toggleChatSidebar',
                'activarCopilotHealthSidebar',
                'realizarAnalisisCompletoSidebar',
                'mostrarSeccionPapersSidebar',
                'inicializarObservadorFormulario'
            ]
            
            funciones_encontradas = []
            funciones_faltantes = []
            
            for funcion in funciones_chat_integrado:
                if funcion in js_content:
                    funciones_encontradas.append(funcion)
                    print(f"‚úÖ Funci√≥n '{funcion}' encontrada")
                else:
                    funciones_faltantes.append(funcion)
                    print(f"‚ùå Funci√≥n '{funcion}' NO encontrada")
            
            # 5. Verificar estilos CSS del chat integrado
            print("\n4. üîç Verificando estilos CSS del chat integrado...")
            estilos_chat_integrado = [
                'copilot-chat-integrated',
                'chat-header',
                'chat-messages-container',
                'chat-messages',
                'chat-message',
                'message-content',
                'message-time',
                'chat-typing',
                'typing-indicator',
                'typing-dots',
                'dynamic-content-area',
                'content-section',
                'chat-activation'
            ]
            
            estilos_encontrados = []
            estilos_faltantes = []
            
            for estilo in estilos_chat_integrado:
                if estilo in js_content or estilo in response.text:
                    estilos_encontrados.append(estilo)
                    print(f"‚úÖ Estilo '{estilo}' encontrado")
                else:
                    estilos_faltantes.append(estilo)
                    print(f"‚ùå Estilo '{estilo}' NO encontrado")
            
            # 6. Verificar estructura HTML del chat integrado
            print("\n5. üîç Verificando estructura HTML del chat integrado...")
            elementos_html = [
                'copilotChatIntegrated',
                'chatMessages',
                'chatTyping',
                'dynamicContentArea',
                'sidebarTerminos',
                'sidebarPapers'
            ]
            
            elementos_encontrados = []
            elementos_faltantes = []
            
            for elemento in elementos_html:
                if elemento in response.text:
                    elementos_encontrados.append(elemento)
                    print(f"‚úÖ Elemento '{elemento}' encontrado")
                else:
                    elementos_faltantes.append(elemento)
                    print(f"‚ùå Elemento '{elemento}' NO encontrado")
            
            # 7. Verificar funcionalidades espec√≠ficas
            print("\n6. üîç Verificando funcionalidades espec√≠ficas...")
            funcionalidades = [
                'sidebarChatMessages',
                'sidebarChatActive',
                'MutationObserver',
                'DOMContentLoaded',
                'addEventListener'
            ]
            
            funcionalidades_encontradas = []
            funcionalidades_faltantes = []
            
            for funcionalidad in funcionalidades:
                if funcionalidad in js_content:
                    funcionalidades_encontradas.append(funcionalidad)
                    print(f"‚úÖ Funcionalidad '{funcionalidad}' encontrada")
                else:
                    funcionalidades_faltantes.append(funcionalidad)
                    print(f"‚ùå Funcionalidad '{funcionalidad}' NO encontrada")
            
            # 8. Resumen
            print("\n" + "="*60)
            print("üìä RESUMEN DE VERIFICACI√ìN COMPLETA")
            print("="*60)
            
            print(f"‚úÖ Funciones del chat integrado: {len(funciones_encontradas)}/{len(funciones_chat_integrado)}")
            print(f"‚úÖ Estilos CSS: {len(estilos_encontrados)}/{len(estilos_chat_integrado)}")
            print(f"‚úÖ Elementos HTML: {len(elementos_encontrados)}/{len(elementos_html)}")
            print(f"‚úÖ Funcionalidades: {len(funcionalidades_encontradas)}/{len(funcionalidades)}")
            
            total_verificaciones = len(funciones_chat_integrado) + len(estilos_chat_integrado) + len(elementos_html) + len(funcionalidades)
            total_encontradas = len(funciones_encontradas) + len(estilos_encontrados) + len(elementos_encontrados) + len(funcionalidades_encontradas)
            
            print(f"\nüìà PROGRESO GENERAL: {total_encontradas}/{total_verificaciones} ({total_encontradas/total_verificaciones*100:.1f}%)")
            
            if len(funciones_faltantes) == 0 and len(estilos_faltantes) == 0 and len(elementos_faltantes) == 0 and len(funcionalidades_faltantes) == 0:
                print("\nüéâ ¬°INTEGRACI√ìN COMPLETA FUNCIONAL!")
                print("   - Todas las funciones del chat integrado est√°n presentes")
                print("   - Todos los estilos CSS est√°n definidos")
                print("   - Todos los elementos HTML est√°n en su lugar")
                print("   - Todas las funcionalidades est√°n activas")
                print("\nüí° Para probar la integraci√≥n:")
                print("   1. Ve a la p√°gina professional")
                print("   2. Abre la sidebar de Copilot Health")
                print("   3. Completa el formulario")
                print("   4. Haz clic en 'Activar An√°lisis con IA'")
                print("   5. Observa el chat en tiempo real en la sidebar")
                print("   6. Verifica que detecta cambios en el formulario")
                print("   7. Comprueba que muestra papers al final")
                
                print("\nüöÄ CARACTER√çSTICAS IMPLEMENTADAS:")
                print("   ‚úÖ Chat integrado en la sidebar")
                print("   ‚úÖ Comunicaci√≥n en tiempo real")
                print("   ‚úÖ Detecci√≥n de cambios en formulario")
                print("   ‚úÖ Mensajes paso a paso del proceso")
                print("   ‚úÖ Indicadores de typing")
                print("   ‚úÖ Diferentes tipos de mensajes")
                print("   ‚úÖ Timestamps en mensajes")
                print("   ‚úÖ Scroll autom√°tico")
                print("   ‚úÖ Animaciones suaves")
                print("   ‚úÖ Controles de chat (limpiar, minimizar)")
                print("   ‚úÖ √Årea de contenido din√°mico")
                print("   ‚úÖ Secci√≥n de papers integrada")
                
            else:
                print("\n‚ö†Ô∏è PROBLEMAS DETECTADOS:")
                if funciones_faltantes:
                    print(f"   - Funciones faltantes: {', '.join(funciones_faltantes)}")
                if estilos_faltantes:
                    print(f"   - Estilos faltantes: {', '.join(estilos_faltantes)}")
                if elementos_faltantes:
                    print(f"   - Elementos faltantes: {', '.join(elementos_faltantes)}")
                if funcionalidades_faltantes:
                    print(f"   - Funcionalidades faltantes: {', '.join(funcionalidades_faltantes)}")
                
        else:
            print(f"‚ùå Error accediendo al archivo JavaScript: {js_response.status_code}")
            
    except requests.exceptions.ConnectionError:
        print("‚ùå Error de conexi√≥n. Aseg√∫rate de que el servidor est√© ejecut√°ndose.")
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")

if __name__ == "__main__":
    test_integracion_sidebar_completa() 