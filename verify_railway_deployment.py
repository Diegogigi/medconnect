#!/usr/bin/env python3
"""
Script para verificar el despliegue en Railway
"""

import requests
import time
import json


def verify_railway_deployment():
    """Verifica que el despliegue en Railway est√© funcionando"""

    print("üîç Verificando despliegue en Railway...")
    print("=" * 60)

    # URLs a verificar
    urls_to_check = [
        {
            "url": "https://www.medconnect.cl",
            "name": "P√°gina Principal",
            "expected_status": 200,
        },
        {
            "url": "https://www.medconnect.cl/login",
            "name": "P√°gina de Login",
            "expected_status": 200,
        },
        {
            "url": "https://www.medconnect.cl/api/health",
            "name": "Health Endpoint",
            "expected_status": 200,
        },
    ]

    print("‚è≥ Esperando que Railway procese el despliegue...")
    print("üîß Esto puede tomar 2-3 minutos...")

    # Esperar un poco para que Railway procese
    time.sleep(30)

    results = []

    for check in urls_to_check:
        print(f"\nüåê Verificando: {check['name']}")
        print(f"   URL: {check['url']}")

        try:
            response = requests.get(check["url"], timeout=15)

            if response.status_code == check["expected_status"]:
                print(f"  ‚úÖ Status: {response.status_code} - OK")
                results.append(True)

                # Informaci√≥n adicional para health endpoint
                if "/api/health" in check["url"]:
                    try:
                        health_data = response.json()
                        print(f"  üìä Database: {health_data.get('database', 'N/A')}")
                        print(f"  üìä Mode: {health_data.get('mode', 'N/A')}")
                        print(f"  üìä Status: {health_data.get('status', 'N/A')}")
                    except:
                        print(f"  üìÑ Response: {response.text[:100]}...")

            else:
                print(f"  ‚ùå Status: {response.status_code} - ERROR")
                print(f"  üìÑ Response: {response.text[:200]}...")
                results.append(False)

        except requests.exceptions.Timeout:
            print(f"  ‚è∞ Timeout - La aplicaci√≥n no responde")
            results.append(False)
        except requests.exceptions.ConnectionError:
            print(f"  üîå Connection Error - No se puede conectar")
            results.append(False)
        except Exception as e:
            print(f"  ‚ùå Error: {e}")
            results.append(False)

    # Resumen de verificaci√≥n
    print("\n" + "=" * 60)
    print("üìã RESUMEN DE VERIFICACI√ìN:")

    success_count = sum(results)
    total_count = len(results)

    if success_count == total_count:
        print("üéâ ¬°TODAS LAS VERIFICACIONES EXITOSAS!")
        print("‚úÖ El despliegue en Railway est√° funcionando correctamente")

        print("\nüîß PR√ìXIMOS PASOS:")
        print("1. Configura las variables de entorno en Railway Dashboard")
        print("2. Ejecuta los scripts de migraci√≥n de usuarios")
        print("3. Prueba el login con las credenciales de prueba")

    elif success_count > 0:
        print(f"‚ö†Ô∏è VERIFICACI√ìN PARCIAL: {success_count}/{total_count} exitosas")
        print("üîß Algunos endpoints funcionan, otros necesitan configuraci√≥n")

        print("\nüîß ACCIONES RECOMENDADAS:")
        print("1. Configura las variables de entorno en Railway")
        print("2. Revisa los logs de Railway para errores")
        print("3. Espera unos minutos y vuelve a verificar")

    else:
        print("‚ùå VERIFICACI√ìN FALLIDA: Ning√∫n endpoint responde correctamente")
        print("üîß El despliegue puede estar fallando")

        print("\nüîß ACCIONES RECOMENDADAS:")
        print("1. Revisa los logs de Railway Dashboard")
        print("2. Verifica que las variables de entorno est√©n configuradas")
        print("3. Espera m√°s tiempo para que Railway procese el despliegue")
        print("4. Contacta soporte de Railway si persiste el problema")

    return success_count == total_count


def show_railway_config_instructions():
    """Muestra instrucciones para configurar Railway"""

    print("\nüìã CONFIGURACI√ìN REQUERIDA EN RAILWAY:")
    print("=" * 50)

    print("\n1Ô∏è‚É£ Ve a Railway Dashboard:")
    print("   https://railway.app/dashboard")

    print("\n2Ô∏è‚É£ Selecciona tu proyecto MedConnect")

    print("\n3Ô∏è‚É£ Ve a la pesta√±a 'Variables'")

    print("\n4Ô∏è‚É£ Agrega estas variables (CR√çTICAS):")
    print()
    print("   DATABASE_URL")
    print(
        "   = postgresql://postgres:SBbyfurhbJUJsFbelYJCcOvkSpXDCNZd@hopper.proxy.rlwy.net:51396/railway"
    )
    print()
    print("   SECRET_KEY")
    print("   = medconnect-secret-key-2025-railway-production-ultra-secure")
    print()
    print("   FLASK_ENV")
    print("   = production")
    print()
    print("   OPENROUTER_API_KEY")
    print(
        "   = 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"
    )
    print()
    print("   PORT")
    print("   = 5000")

    print("\n5Ô∏è‚É£ Guarda los cambios")
    print("   Railway redeployear√° autom√°ticamente")

    print("\n6Ô∏è‚É£ Espera 2-3 minutos y vuelve a verificar")


if __name__ == "__main__":
    print("üöÄ VERIFICACI√ìN DESPLIEGUE RAILWAY")
    print("=" * 60)

    success = verify_railway_deployment()

    if not success:
        show_railway_config_instructions()

    print("\nüéØ RESULTADO FINAL:")
    if success:
        print("‚úÖ Despliegue exitoso - Aplicaci√≥n funcionando")
    else:
        print("‚ö†Ô∏è Despliegue necesita configuraci√≥n adicional")
        print("üîß Sigue las instrucciones de configuraci√≥n")
