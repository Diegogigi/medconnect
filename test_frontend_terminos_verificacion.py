#!/usr/bin/env python3
"""
Script para verificar que el frontend est√© mostrando correctamente los t√©rminos de b√∫squeda
"""

import requests
import json
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_frontend_terminos_display():
    """Prueba la visualizaci√≥n de t√©rminos en el frontend"""
    print("üîç VERIFICACI√ìN DE FRONTEND - T√âRMINOS DE B√öSQUEDA")
    print("=" * 60)
    
    # Verificar que el servidor est√© corriendo
    try:
        health_response = requests.get("http://localhost:5000/", timeout=5)
        if health_response.status_code != 200:
            print("‚ùå El servidor no est√° corriendo en http://localhost:5000")
            print("   Por favor, inicia el servidor con: python app.py")
            return False
        print("‚úÖ Servidor corriendo correctamente")
    except Exception as e:
        print("‚ùå No se puede conectar al servidor")
        print("   Por favor, inicia el servidor con: python app.py")
        return False
    
    # Verificar que la p√°gina professional.html est√© disponible
    try:
        professional_response = requests.get("http://localhost:5000/professional", timeout=5)
        if professional_response.status_code != 200:
            print("‚ùå La p√°gina professional no est√° disponible")
            return False
        print("‚úÖ P√°gina professional disponible")
    except Exception as e:
        print(f"‚ùå Error accediendo a la p√°gina professional: {e}")
        return False
    
    # Verificar elementos HTML necesarios
    html_content = professional_response.text
    
    # Verificar contenedor de sugerencias
    if 'id="sugerenciasTratamiento"' in html_content:
        print("‚úÖ Contenedor de sugerencias encontrado")
    else:
        print("‚ùå Contenedor de sugerencias NO encontrado")
        return False
    
    # Verificar contenedor de lista de sugerencias
    if 'id="listaSugerenciasTratamiento"' in html_content:
        print("‚úÖ Contenedor de lista de sugerencias encontrado")
    else:
        print("‚ùå Contenedor de lista de sugerencias NO encontrado")
        return False
    
    # Verificar bot√≥n de sugerir tratamiento
    if 'sugerirTratamientoConIA()' in html_content:
        print("‚úÖ Bot√≥n de sugerir tratamiento encontrado")
    else:
        print("‚ùå Bot√≥n de sugerir tratamiento NO encontrado")
        return False
    
    return True

def test_backend_endpoints():
    """Prueba los endpoints del backend para t√©rminos de b√∫squeda"""
    print("\nüîß VERIFICACI√ìN DE ENDPOINTS BACKEND")
    print("=" * 50)
    
    # Probar endpoint de generaci√≥n de t√©rminos
    print("üìã Probando endpoint de generaci√≥n de t√©rminos...")
    try:
        response = requests.post(
            "http://localhost:5000/api/copilot/generate-search-terms",
            json={
                'condicion': 'Dolor lumbar de 3 semanas',
                'especialidad': 'kinesiologia',
                'edad': 70
            },
            timeout=10
        )
        
        print(f"üìä Status Code: {response.status_code}")
        
        if response.status_code == 200:
            try:
                data = response.json()
                if data.get('success'):
                    terminos = data.get('terminos_disponibles', {})
                    print("‚úÖ Endpoint de generaci√≥n de t√©rminos funcionando")
                    print(f"üìã T√©rminos b√°sicos: {len(terminos.get('terminos_basicos', []))}")
                    print(f"üè• T√©rminos de especialidad: {len(terminos.get('terminos_especialidad', []))}")
                    print(f"üë§ T√©rminos por edad: {len(terminos.get('terminos_edad', []))}")
                    print(f"‚≠ê T√©rminos recomendados: {len(terminos.get('terminos_recomendados', []))}")
                    return True
                else:
                    print(f"‚ùå Error en endpoint: {data.get('message', 'Error desconocido')}")
                    return False
            except json.JSONDecodeError:
                print("‚ùå Respuesta no es JSON v√°lido")
                print(f"Respuesta: {response.text[:200]}...")
                return False
        else:
            print(f"‚ùå Error HTTP {response.status_code}")
            print(f"Respuesta: {response.text[:200]}...")
            return False
            
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False

def test_frontend_javascript():
    """Verifica que el JavaScript del frontend est√© cargado correctamente"""
    print("\nüñ•Ô∏è VERIFICACI√ìN DE JAVASCRIPT FRONTEND")
    print("=" * 50)
    
    try:
        # Verificar que el archivo professional.js est√© disponible
        js_response = requests.get("http://localhost:5000/static/js/professional.js", timeout=5)
        if js_response.status_code != 200:
            print("‚ùå Archivo professional.js no disponible")
            return False
        
        js_content = js_response.text
        
        # Verificar funciones necesarias
        funciones_requeridas = [
            'mostrarTerminosDisponibles',
            'realizarBusquedaPersonalizada',
            'realizarBusquedaAutomatica',
            'obtenerTerminosSeleccionados',
            'seleccionarTodosTerminos',
            'deseleccionarTodosTerminos'
        ]
        
        funciones_encontradas = []
        for funcion in funciones_requeridas:
            if funcion in js_content:
                funciones_encontradas.append(funcion)
                print(f"‚úÖ Funci√≥n {funcion} encontrada")
            else:
                print(f"‚ùå Funci√≥n {funcion} NO encontrada")
        
        if len(funciones_encontradas) == len(funciones_requeridas):
            print("‚úÖ Todas las funciones JavaScript est√°n presentes")
            return True
        else:
            print(f"‚ùå Faltan {len(funciones_requeridas) - len(funciones_encontradas)} funciones")
            return False
            
    except Exception as e:
        print(f"‚ùå Error verificando JavaScript: {e}")
        return False

def test_complete_flow():
    """Prueba el flujo completo de t√©rminos de b√∫squeda"""
    print("\nüîÑ PRUEBA DE FLUJO COMPLETO")
    print("=" * 40)
    
    # Simular el flujo completo
    print("1Ô∏è‚É£ Generando t√©rminos disponibles...")
    try:
        terminos_response = requests.post(
            "http://localhost:5000/api/copilot/generate-search-terms",
            json={
                'condicion': 'Dificultad para tragar alimentos',
                'especialidad': 'fonoaudiologia',
                'edad': 8
            },
            timeout=10
        )
        
        if terminos_response.status_code == 200:
            terminos_data = terminos_response.json()
            if terminos_data.get('success'):
                terminos = terminos_data.get('terminos_disponibles', {})
                recomendados = terminos.get('terminos_recomendados', [])
                print(f"   ‚úÖ {len(recomendados)} t√©rminos recomendados generados")
                
                # Simular selecci√≥n de t√©rminos
                terminos_seleccionados = recomendados[:3] if len(recomendados) >= 3 else recomendados
                print(f"2Ô∏è‚É£ Simulando selecci√≥n: {terminos_seleccionados}")
                
                # Probar b√∫squeda con t√©rminos seleccionados
                print("3Ô∏è‚É£ Probando b√∫squeda con t√©rminos seleccionados...")
                busqueda_response = requests.post(
                    "http://localhost:5000/api/copilot/search-with-terms",
                    json={
                        'condicion': 'Dificultad para tragar alimentos',
                        'especialidad': 'fonoaudiologia',
                        'edad': 8,
                        'terminos_seleccionados': terminos_seleccionados
                    },
                    timeout=10
                )
                
                if busqueda_response.status_code == 200:
                    busqueda_data = busqueda_response.json()
                    if busqueda_data.get('success'):
                        total_resultados = busqueda_data.get('total_resultados', 0)
                        print(f"   ‚úÖ B√∫squeda exitosa: {total_resultados} tratamientos encontrados")
                        print("   ‚úÖ Flujo completo funcionando correctamente")
                        return True
                    else:
                        print(f"   ‚ùå Error en b√∫squeda: {busqueda_data.get('message')}")
                        return False
                else:
                    print(f"   ‚ùå Error HTTP en b√∫squeda: {busqueda_response.status_code}")
                    return False
            else:
                print(f"   ‚ùå Error generando t√©rminos: {terminos_data.get('message')}")
                return False
        else:
            print(f"   ‚ùå Error HTTP generando t√©rminos: {terminos_response.status_code}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Error en flujo completo: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üîç VERIFICACI√ìN COMPLETA DE FRONTEND - T√âRMINOS DE B√öSQUEDA")
    print("=" * 70)
    
    # Ejecutar todas las verificaciones
    resultados = []
    
    # Verificar frontend
    resultados.append(("Frontend HTML", test_frontend_terminos_display()))
    
    # Verificar endpoints backend
    resultados.append(("Endpoints Backend", test_backend_endpoints()))
    
    # Verificar JavaScript
    resultados.append(("JavaScript Frontend", test_frontend_javascript()))
    
    # Verificar flujo completo
    resultados.append(("Flujo Completo", test_complete_flow()))
    
    # Mostrar resumen
    print("\nüìä RESUMEN DE VERIFICACI√ìN")
    print("=" * 40)
    
    exitos = 0
    for nombre, resultado in resultados:
        if resultado:
            print(f"‚úÖ {nombre}: OK")
            exitos += 1
        else:
            print(f"‚ùå {nombre}: FALLO")
    
    print(f"\nüéØ Resultado: {exitos}/{len(resultados)} verificaciones exitosas")
    
    if exitos == len(resultados):
        print("‚úÖ TODAS LAS VERIFICACIONES EXITOSAS")
        print("‚úÖ El frontend deber√≠a estar mostrando los t√©rminos correctamente")
        print("\nüí° Para probar manualmente:")
        print("   1. Ve a http://localhost:5000/professional")
        print("   2. Llena un diagn√≥stico (ej: 'Dolor lumbar')")
        print("   3. Haz clic en 'Sugerir Tratamiento con IA'")
        print("   4. Deber√≠as ver los t√©rminos de b√∫squeda para seleccionar")
    else:
        print("‚ùå ALGUNAS VERIFICACIONES FALLARON")
        print("‚ùå Revisa los errores anteriores")

if __name__ == "__main__":
    main() 