#!/usr/bin/env python3
"""
Script de prueba para verificar la normalizaci√≥n de sin√≥nimos y variaciones regionales
en el m√≥dulo Copilot Health.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from copilot_health import CopilotHealth
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_normalizacion_tipos_atencion():
    """Prueba la normalizaci√≥n de tipos de atenci√≥n con variaciones regionales"""
    print("üß™ PRUEBAS DE NORMALIZACI√ìN REGIONAL")
    print("=" * 50)
    
    copilot = CopilotHealth()
    
    # Casos de prueba para fisioterapia/kinesiolog√≠a
    casos_fisio = [
        "fisioterapia",
        "fisio", 
        "fisioterapeuta",
        "fisioterap√©utico",
        "kinesiologia",
        "kinesiolog√≠a",
        "kinesi√≥logo",
        "kinesio",
        "kinesiologo"
    ]
    
    print("\nüè• CASOS FISIOTERAPIA/KINESIOLOG√çA:")
    for caso in casos_fisio:
        normalizado = copilot._normalizar_tipo_atencion(caso)
        print(f"  '{caso}' -> '{normalizado}'")
    
    # Casos de prueba para fonoaudiolog√≠a/logopedia
    casos_fono = [
        "fonoaudiologia",
        "fonoaudiolog√≠a",
        "fonoaudi√≥logo",
        "fono",
        "logopeda",
        "logopedia",
        "terapia del habla",
        "patolog√≠a del habla"
    ]
    
    print("\nüó£Ô∏è CASOS FONOAUDIOLOG√çA/LOGOPEDIA:")
    for caso in casos_fono:
        normalizado = copilot._normalizar_tipo_atencion(caso)
        print(f"  '{caso}' -> '{normalizado}'")
    
    # Casos de prueba para terapia ocupacional
    casos_to = [
        "terapia ocupacional",
        "terapeuta ocupacional",
        "t.o.",
        "to",
        "ergoterapia",
        "ergoterapeuta"
    ]
    
    print("\nüõ†Ô∏è CASOS TERAPIA OCUPACIONAL:")
    for caso in casos_to:
        normalizado = copilot._normalizar_tipo_atencion(caso)
        print(f"  '{caso}' -> '{normalizado}'")
    
    # Casos de prueba para psicolog√≠a
    casos_psico = [
        "psicologia",
        "psicolog√≠a",
        "psic√≥logo",
        "psic√≥loga",
        "psico",
        "psicoterapia",
        "psicoterapeuta"
    ]
    
    print("\nüß† CASOS PSICOLOG√çA:")
    for caso in casos_psico:
        normalizado = copilot._normalizar_tipo_atencion(caso)
        print(f"  '{caso}' -> '{normalizado}'")
    
    # Casos de prueba para nutrici√≥n
    casos_nutri = [
        "nutricion",
        "nutrici√≥n",
        "nutricionista",
        "nutri√≥logo",
        "nutri√≥loga",
        "dietista",
        "diet√≥logo",
        "diet√≥loga"
    ]
    
    print("\nü•ó CASOS NUTRICI√ìN:")
    for caso in casos_nutri:
        normalizado = copilot._normalizar_tipo_atencion(caso)
        print(f"  '{caso}' -> '{normalizado}'")
    
    # Casos de prueba para medicina general
    casos_med = [
        "medicina general",
        "m√©dico general",
        "m√©dica general",
        "medicina familiar",
        "m√©dico de familia",
        "medicina primaria",
        "m√©dico primario"
    ]
    
    print("\nüë®‚Äç‚öïÔ∏è CASOS MEDICINA GENERAL:")
    for caso in casos_med:
        normalizado = copilot._normalizar_tipo_atencion(caso)
        print(f"  '{caso}' -> '{normalizado}'")
    
    # Casos de prueba para urgencia
    casos_urgencia = [
        "urgencia",
        "emergencia",
        "urgencias",
        "emergencias",
        "m√©dico de urgencia",
        "emergenci√≥logo"
    ]
    
    print("\nüö® CASOS URGENCIA:")
    for caso in casos_urgencia:
        normalizado = copilot._normalizar_tipo_atencion(caso)
        print(f"  '{caso}' -> '{normalizado}'")

def test_analisis_con_variaciones_regionales():
    """Prueba el an√°lisis completo con variaciones regionales"""
    print("\n\nüîç PRUEBAS DE AN√ÅLISIS CON VARIACIONES REGIONALES")
    print("=" * 60)
    
    copilot = CopilotHealth()
    
    # Casos de prueba combinando tipos de atenci√≥n con motivos
    casos_prueba = [
        {
            "tipo_atencion": "fisio",
            "motivo": "Dolor lumbar de 3 semanas tras cargar peso",
            "descripcion": "Fisio + Dolor lumbar"
        },
        {
            "tipo_atencion": "kinesiologia",
            "motivo": "Dificultad para caminar despu√©s de una ca√≠da",
            "descripcion": "Kinesiolog√≠a + Dificultad para caminar"
        },
        {
            "tipo_atencion": "fono",
            "motivo": "Dificultad para tragar alimentos",
            "descripcion": "Fono + Dificultad para tragar"
        },
        {
            "tipo_atencion": "logopeda",
            "motivo": "Problemas de pronunciaci√≥n en ni√±os",
            "descripcion": "Logopeda + Problemas de pronunciaci√≥n"
        },
        {
            "tipo_atencion": "psicologo",
            "motivo": "Ansiedad y estr√©s laboral",
            "descripcion": "Psic√≥logo + Ansiedad laboral"
        },
        {
            "tipo_atencion": "nutricionista",
            "motivo": "P√©rdida de peso y fatiga",
            "descripcion": "Nutricionista + P√©rdida de peso"
        },
        {
            "tipo_atencion": "dietista",
            "motivo": "Necesito plan de alimentaci√≥n para diabetes",
            "descripcion": "Dietista + Plan alimentaci√≥n diabetes"
        },
        {
            "tipo_atencion": "medico general",
            "motivo": "Consulta general por malestar",
            "descripcion": "M√©dico general + Consulta general"
        }
    ]
    
    for i, caso in enumerate(casos_prueba, 1):
        print(f"\nüìã CASO {i}: {caso['descripcion']}")
        print(f"   Tipo de atenci√≥n: '{caso['tipo_atencion']}'")
        print(f"   Motivo: '{caso['motivo']}'")
        
        try:
            resultado = copilot.analizar_motivo_consulta(caso['motivo'], caso['tipo_atencion'])
            print(f"   ‚úÖ Especialidad detectada: {resultado.especialidad_detectada}")
            print(f"   ‚úÖ Categor√≠a: {resultado.categoria}")
            print(f"   ‚úÖ Urgencia: {resultado.urgencia}")
            print(f"   ‚úÖ S√≠ntomas: {', '.join(resultado.sintomas_principales)}")
            print(f"   ‚úÖ Preguntas sugeridas: {len(resultado.preguntas_sugeridas)} preguntas")
            
            # Mostrar las primeras 2 preguntas como ejemplo
            for j, pregunta in enumerate(resultado.preguntas_sugeridas[:2], 1):
                print(f"      {j}. {pregunta}")
            
        except Exception as e:
            print(f"   ‚ùå Error: {e}")

def test_casos_limite():
    """Prueba casos l√≠mite y edge cases"""
    print("\n\n‚ö†Ô∏è PRUEBAS DE CASOS L√çMITE")
    print("=" * 40)
    
    copilot = CopilotHealth()
    
    casos_limite = [
        {"tipo": "", "motivo": "Dolor de cabeza", "desc": "Tipo vac√≠o"},
        {"tipo": "   ", "motivo": "Dolor de espalda", "desc": "Tipo solo espacios"},
        {"tipo": "FISIO", "motivo": "Dolor muscular", "desc": "Tipo en may√∫sculas"},
        {"tipo": "fisio", "motivo": "", "desc": "Motivo vac√≠o"},
        {"tipo": "invalid_type", "motivo": "Dolor", "desc": "Tipo inv√°lido"},
        {"tipo": "fisioterapia", "motivo": "Dolor lumbar", "desc": "Caso v√°lido normal"}
    ]
    
    for caso in casos_limite:
        print(f"\nüîç {caso['desc']}:")
        print(f"   Tipo: '{caso['tipo']}'")
        print(f"   Motivo: '{caso['motivo']}'")
        
        try:
            resultado = copilot.analizar_motivo_consulta(caso['motivo'], caso['tipo'])
            print(f"   ‚úÖ Especialidad: {resultado.especialidad_detectada}")
        except Exception as e:
            print(f"   ‚ùå Error: {e}")

def main():
    """Funci√≥n principal que ejecuta todas las pruebas"""
    print("üöÄ INICIANDO PRUEBAS DE NORMALIZACI√ìN REGIONAL")
    print("=" * 60)
    
    try:
        # Ejecutar todas las pruebas
        test_normalizacion_tipos_atencion()
        test_analisis_con_variaciones_regionales()
        test_casos_limite()
        
        print("\n\n‚úÖ TODAS LAS PRUEBAS COMPLETADAS EXITOSAMENTE")
        print("üéØ El sistema ahora reconoce variaciones regionales y sin√≥nimos")
        
    except Exception as e:
        print(f"\n‚ùå ERROR EN LAS PRUEBAS: {e}")
        return False
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 