#!/usr/bin/env python3
"""
Script para probar que el an√°lisis funcione correctamente
"""

import requests
import json
import time


def test_analysis():
    """Prueba el an√°lisis unificado"""

    print("üß™ Probando an√°lisis unificado...")

    # Esperar a que el servidor est√© listo
    print("‚è≥ Esperando que el servidor est√© listo...")
    time.sleep(5)

    # Datos de prueba
    test_data = {
        "consulta": "Paciente con dolor lumbar agudo por esfuerzo f√≠sico",
        "contexto_clinico": {
            "motivoConsulta": "Dolor lumbar agudo",
            "sintomasPrincipales": "Dolor intenso en regi√≥n lumbar, limitaci√≥n de movimiento",
            "antecedentesMedicos": "Sin antecedentes relevantes",
        },
    }

    try:
        # Hacer petici√≥n al endpoint
        print("üì° Enviando petici√≥n al endpoint...")
        response = requests.post(
            "http://localhost:5000/api/copilot/analyze-enhanced",
            json=test_data,
            headers={"Content-Type": "application/json"},
            timeout=30,
        )

        if response.status_code == 200:
            result = response.json()
            print("‚úÖ Endpoint responde correctamente")

            # Verificar estructura de respuesta
            if result.get("success"):
                print("‚úÖ Respuesta exitosa")

                # Verificar componentes
                nlp_analysis = result.get("nlp_analysis", {})
                if nlp_analysis:
                    print(
                        f"‚úÖ An√°lisis NLP: {len(nlp_analysis.get('palabras_clave', []))} palabras clave"
                    )
                    print(
                        f"   Palabras clave: {nlp_analysis.get('palabras_clave', [])}"
                    )
                    print(f"   S√≠ntomas: {nlp_analysis.get('sintomas', [])}")

                evidence = result.get("evidence", [])
                if evidence:
                    print(f"‚úÖ Evidencia cient√≠fica: {len(evidence)} art√≠culos")
                else:
                    print("‚ö†Ô∏è No se encontr√≥ evidencia cient√≠fica")

                clinical_analysis = result.get("clinical_analysis", {})
                if clinical_analysis:
                    print(
                        f"‚úÖ An√°lisis cl√≠nico: {len(clinical_analysis.get('recomendaciones', []))} recomendaciones"
                    )
                    print(
                        f"   Recomendaciones: {clinical_analysis.get('recomendaciones', [])}"
                    )

                print("\nüìä Resumen de la respuesta:")
                print(f"   - Consulta: {result.get('consulta_original', 'N/A')}")
                print(f"   - Sistema: {result.get('sistema', 'N/A')}")
                print(f"   - Timestamp: {result.get('timestamp', 'N/A')}")

                return True
            else:
                print(
                    f"‚ùå Respuesta no exitosa: {result.get('message', 'Sin mensaje')}"
                )
                return False
        else:
            print(f"‚ùå Error HTTP: {response.status_code}")
            print(f"   Respuesta: {response.text}")
            return False

    except requests.exceptions.ConnectionError:
        print("‚ùå No se puede conectar al servidor")
        print(
            "   Aseg√∫rate de que el servidor est√© ejecut√°ndose en http://localhost:5000"
        )
        return False
    except requests.exceptions.Timeout:
        print("‚ùå Timeout en la petici√≥n")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return False


def verify_server_status():
    """Verifica el estado del servidor"""

    print("üîç Verificando estado del servidor...")

    try:
        response = requests.get("http://localhost:5000/", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Servidor ejecut√°ndose correctamente")
            return True
        else:
            print(f"‚ö†Ô∏è Servidor responde con c√≥digo: {response.status_code}")
            return True  # No es un error cr√≠tico
    except Exception as e:
        print(f"‚ùå No se puede conectar al servidor: {e}")
        return False


def main():
    """Funci√≥n principal"""
    print("üîß Probando an√°lisis unificado...")

    if verify_server_status():
        print("‚úÖ Servidor verificado")

        if test_analysis():
            print("\nüéâ ¬°An√°lisis unificado funcionando correctamente!")
            print("‚úÖ Todos los componentes est√°n operativos")
            print("‚úÖ El an√°lisis devuelve resultados completos")
            print("‚úÖ No hay errores en el procesamiento")
        else:
            print("\n‚ùå Error en el an√°lisis")
            print("‚ö†Ô∏è Revisa los logs del servidor para m√°s detalles")
    else:
        print("\n‚ùå Servidor no disponible")
        print("‚ö†Ô∏è Aseg√∫rate de que el servidor est√© ejecut√°ndose")


if __name__ == "__main__":
    main()
