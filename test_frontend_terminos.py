#!/usr/bin/env python3
"""
Script para probar la funcionalidad de t√©rminos de b√∫squeda en el frontend
"""

import requests
import json
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_generate_search_terms():
    """Prueba la generaci√≥n de t√©rminos de b√∫squeda"""
    print("üîç PRUEBA DE GENERACI√ìN DE T√âRMINOS DE B√öSQUEDA")
    print("=" * 60)
    
    url = "http://localhost:5000/api/copilot/generate-search-terms"
    data = {
        'condicion': 'Dolor lumbar de 3 semanas',
        'especialidad': 'kinesiologia',
        'edad': 70
    }
    
    try:
        print("üîç Enviando solicitud de t√©rminos...")
        response = requests.post(url, json=data, timeout=30)
        print(f"üìä Status Code: {response.status_code}")
        
        if response.status_code == 200:
            try:
                result = response.json()
                if result.get('success'):
                    terminos = result.get('terminos_disponibles', {})
                    print("‚úÖ T√©rminos generados exitosamente")
                    print(f"üìã T√©rminos b√°sicos: {len(terminos.get('terminos_basicos', []))}")
                    print(f"üè• T√©rminos de especialidad: {len(terminos.get('terminos_especialidad', []))}")
                    print(f"üë§ T√©rminos por edad: {len(terminos.get('terminos_edad', []))}")
                    print(f"‚≠ê T√©rminos recomendados: {len(terminos.get('terminos_recomendados', []))}")
                    
                    # Mostrar algunos t√©rminos recomendados
                    recomendados = terminos.get('terminos_recomendados', [])
                    if recomendados:
                        print("\n‚≠ê T√©rminos recomendados:")
                        for i, termino in enumerate(recomendados[:5], 1):
                            print(f"   {i}. {termino}")
                else:
                    print(f"‚ùå Error: {result.get('message', 'Error desconocido')}")
            except json.JSONDecodeError as e:
                print(f"‚ùå Error decodificando JSON: {e}")
                print(f"Respuesta: {response.text[:200]}...")
        else:
            print(f"‚ùå Error HTTP {response.status_code}")
            print(f"Respuesta: {response.text[:200]}...")
            
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")

def test_search_with_terms():
    """Prueba la b√∫squeda con t√©rminos seleccionados"""
    print("\nüë®‚Äç‚öïÔ∏è PRUEBA DE B√öSQUEDA CON T√âRMINOS SELECCIONADOS")
    print("=" * 60)
    
    url = "http://localhost:5000/api/copilot/search-with-terms"
    data = {
        'condicion': 'Dolor lumbar de 3 semanas',
        'especialidad': 'kinesiologia',
        'edad': 70,
        'terminos_seleccionados': [
            'geriatric rehabilitation',
            'elderly physical therapy',
            'back pain',
            'rehabilitation'
        ]
    }
    
    try:
        print("üîç Enviando b√∫squeda con t√©rminos personalizados...")
        response = requests.post(url, json=data, timeout=30)
        print(f"üìä Status Code: {response.status_code}")
        
        if response.status_code == 200:
            try:
                result = response.json()
                if result.get('success'):
                    planes = result.get('planes_tratamiento', [])
                    total = result.get('total_resultados', 0)
                    print("‚úÖ B√∫squeda personalizada exitosa")
                    print(f"üìÑ Total tratamientos encontrados: {total}")
                    
                    if planes:
                        print("\nüìÑ Primeros tratamientos:")
                        for i, plan in enumerate(planes[:3], 1):
                            print(f"   {i}. {plan.get('titulo', 'Sin t√≠tulo')[:80]}...")
                            print(f"      DOI: {plan.get('doi', 'Sin DOI')}")
                            print(f"      Fuente: {plan.get('fuente', 'Sin fuente')}")
                            print()
                else:
                    print(f"‚ùå Error: {result.get('message', 'Error desconocido')}")
            except json.JSONDecodeError as e:
                print(f"‚ùå Error decodificando JSON: {e}")
                print(f"Respuesta: {response.text[:200]}...")
        else:
            print(f"‚ùå Error HTTP {response.status_code}")
            print(f"Respuesta: {response.text[:200]}...")
            
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")

def test_comparison_automatic_vs_personalized():
    """Compara b√∫squeda autom√°tica vs personalizada"""
    print("\nüîÑ COMPARACI√ìN DE B√öSQUEDAS")
    print("=" * 50)
    
    # B√∫squeda autom√°tica
    print("\nüìä B√öSQUEDA AUTOM√ÅTICA:")
    auto_url = "http://localhost:5000/api/copilot/suggest-treatment"
    auto_data = {
        'diagnostico': 'Dolor lumbar de 3 semanas',
        'especialidad': 'kinesiologia',
        'edad': 70
    }
    
    try:
        response = requests.post(auto_url, json=auto_data, timeout=30)
        if response.status_code == 200:
            result = response.json()
            if result.get('success'):
                planes_auto = result.get('planes_tratamiento', [])
                print(f"   Total resultados autom√°ticos: {len(planes_auto)}")
            else:
                print(f"   Error autom√°tico: {result.get('message')}")
        else:
            print(f"   Error HTTP {response.status_code}")
    except Exception as e:
        print(f"   Error: {e}")
    
    # B√∫squeda personalizada
    print("\nüìä B√öSQUEDA PERSONALIZADA:")
    personal_url = "http://localhost:5000/api/copilot/search-with-terms"
    personal_data = {
        'condicion': 'Dolor lumbar de 3 semanas',
        'especialidad': 'kinesiologia',
        'edad': 70,
        'terminos_seleccionados': ['geriatric rehabilitation', 'elderly physical therapy']
    }
    
    try:
        response = requests.post(personal_url, json=personal_data, timeout=30)
        if response.status_code == 200:
            result = response.json()
            if result.get('success'):
                planes_personal = result.get('planes_tratamiento', [])
                print(f"   Total resultados personalizados: {len(planes_personal)}")
                print(f"   T√©rminos seleccionados: {personal_data['terminos_seleccionados']}")
            else:
                print(f"   Error personalizado: {result.get('message')}")
        else:
            print(f"   Error HTTP {response.status_code}")
    except Exception as e:
        print(f"   Error: {e}")

def test_frontend_integration():
    """Simula la integraci√≥n completa del frontend"""
    print("\nüñ•Ô∏è SIMULACI√ìN DE INTEGRACI√ìN FRONTEND")
    print("=" * 50)
    
    # Paso 1: Generar t√©rminos
    print("1Ô∏è‚É£ Generando t√©rminos disponibles...")
    terminos_response = requests.post(
        "http://localhost:5000/api/copilot/generate-search-terms",
        json={
            'condicion': 'Dificultad para tragar alimentos',
            'especialidad': 'fonoaudiologia',
            'edad': 8
        },
        timeout=30
    )
    
    if terminos_response.status_code == 200:
        terminos_data = terminos_response.json()
        if terminos_data.get('success'):
            terminos = terminos_data.get('terminos_disponibles', {})
            recomendados = terminos.get('terminos_recomendados', [])
            print(f"   ‚úÖ {len(recomendados)} t√©rminos recomendados generados")
            
            # Paso 2: Simular selecci√≥n del profesional
            print("2Ô∏è‚É£ Simulando selecci√≥n del profesional...")
            terminos_seleccionados = recomendados[:3]  # Seleccionar los primeros 3
            print(f"   üë®‚Äç‚öïÔ∏è T√©rminos seleccionados: {terminos_seleccionados}")
            
            # Paso 3: Realizar b√∫squeda personalizada
            print("3Ô∏è‚É£ Realizando b√∫squeda personalizada...")
            busqueda_response = requests.post(
                "http://localhost:5000/api/copilot/search-with-terms",
                json={
                    'condicion': 'Dificultad para tragar alimentos',
                    'especialidad': 'fonoaudiologia',
                    'edad': 8,
                    'terminos_seleccionados': terminos_seleccionados
                },
                timeout=30
            )
            
            if busqueda_response.status_code == 200:
                busqueda_data = busqueda_response.json()
                if busqueda_data.get('success'):
                    total_resultados = busqueda_data.get('total_resultados', 0)
                    print(f"   ‚úÖ B√∫squeda completada: {total_resultados} tratamientos encontrados")
                    print("   ‚úÖ Integraci√≥n frontend-backend funcionando correctamente")
                else:
                    print(f"   ‚ùå Error en b√∫squeda: {busqueda_data.get('message')}")
            else:
                print(f"   ‚ùå Error HTTP en b√∫squeda: {busqueda_response.status_code}")
        else:
            print(f"   ‚ùå Error generando t√©rminos: {terminos_data.get('message')}")
    else:
        print(f"   ‚ùå Error HTTP generando t√©rminos: {terminos_response.status_code}")

def main():
    """Funci√≥n principal"""
    print("üîç PRUEBAS DE T√âRMINOS DE B√öSQUEDA EN FRONTEND")
    print("=" * 60)
    
    # Verificar que el servidor est√© corriendo
    try:
        health_response = requests.get("http://localhost:5000/health", timeout=5)
        if health_response.status_code != 200:
            print("‚ùå El servidor no est√° corriendo en http://localhost:5000")
            print("   Por favor, inicia el servidor con: python app.py")
            return
        print("‚úÖ Servidor corriendo correctamente")
    except Exception as e:
        print("‚ùå No se puede conectar al servidor")
        print("   Por favor, inicia el servidor con: python app.py")
        return
    
    # Ejecutar pruebas
    test_generate_search_terms()
    test_search_with_terms()
    test_comparison_automatic_vs_personalized()
    test_frontend_integration()
    
    print("\n‚úÖ Todas las pruebas completadas")

if __name__ == "__main__":
    main() 