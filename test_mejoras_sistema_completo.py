#!/usr/bin/env python3
"""
Script de prueba para verificar las mejoras completas del sistema Copilot Health
"""

import requests
import json
import time

def test_mejoras_sistema_completo():
    """Prueba todas las mejoras del sistema Copilot Health"""
    
    print("üß™ PRUEBA COMPLETA DEL SISTEMA COPILOT HEALTH")
    print("=" * 70)
    
    # Configuraci√≥n
    base_url = "http://localhost:5000"
    
    # Caso de prueba realista
    caso_prueba = {
        "tipo_atencion": "kinesiologia",
        "motivo_consulta": "Dolor de rodilla por golpe en el trabajo",
        "evaluacion": "¬øEn qu√© momento del d√≠a es peor el dolor? cuando me levanto ¬øQu√© actividades agravan el dolor? pasar mucho tiempo de pie ¬øQu√© actividades alivian el dolor? tener la rodilla en reposo ¬øHay hinchaz√≥n o calor en la rodilla? hay hinchaz√≥n ¬øHa tenido lesiones previas en la rodilla? no ¬øEl dolor es constante o intermitente? es intermitente ¬øHay bloqueos o sensaci√≥n de inestabilidad? sensaci√≥n de inestabilidad ¬øPuede subir y bajar escaleras sin dolor? bajar duele la rodilla",
        "edad": "35"
    }
    
    print(f"üìã CASO DE PRUEBA:")
    print(f"   Tipo de atenci√≥n: {caso_prueba['tipo_atencion']}")
    print(f"   Motivo de consulta: {caso_prueba['motivo_consulta']}")
    print(f"   Evaluaci√≥n: {caso_prueba['evaluacion'][:100]}...")
    print(f"   Edad: {caso_prueba['edad']} a√±os")
    
    # 1. Probar an√°lisis de motivo de consulta
    print("\nüîç 1. PROBANDO AN√ÅLISIS DE MOTIVO DE CONSULTA")
    print("-" * 50)
    
    try:
        response = requests.post(f"{base_url}/api/copilot/analyze-motivo", 
                               json={"motivo_consulta": caso_prueba["motivo_consulta"]},
                               timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ An√°lisis de motivo exitoso")
            print(f"   Especialidad detectada: {data.get('analisis', {}).get('especialidad_detectada', 'N/A')}")
            print(f"   Categor√≠a: {data.get('analisis', {}).get('categoria', 'N/A')}")
            print(f"   Urgencia: {data.get('analisis', {}).get('urgencia', 'N/A')}")
        else:
            print(f"‚ùå Error en an√°lisis de motivo: {response.status_code}")
            print(f"   Respuesta: {response.text}")
    except Exception as e:
        print(f"‚ùå Error conectando con el servidor: {e}")
        return
    
    # 2. Probar generaci√≥n de preguntas
    print("\nüìù 2. PROBANDO GENERACI√ìN DE PREGUNTAS")
    print("-" * 50)
    
    try:
        response = requests.post(f"{base_url}/api/copilot/generate-evaluation-questions", 
                               json={
                                   "motivo_consulta": caso_prueba["motivo_consulta"],
                                   "tipo_atencion": caso_prueba["tipo_atencion"],
                                   "edad": caso_prueba["edad"]
                               },
                               timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Generaci√≥n de preguntas exitosa")
            if data.get('preguntas'):
                print(f"   Preguntas generadas: {len(data['preguntas'])}")
                for i, pregunta in enumerate(data['preguntas'][:3], 1):
                    print(f"   {i}. {pregunta}")
            else:
                print("   ‚ö†Ô∏è No se generaron preguntas")
        else:
            print(f"‚ùå Error en generaci√≥n de preguntas: {response.status_code}")
            print(f"   Respuesta: {response.text}")
    except Exception as e:
        print(f"‚ùå Error en generaci√≥n de preguntas: {e}")
    
    # 3. Probar b√∫squeda de evidencia cient√≠fica
    print("\nüî¨ 3. PROBANDO B√öSQUEDA DE EVIDENCIA CIENT√çFICA")
    print("-" * 50)
    
    try:
        # Probar endpoint principal
        response = requests.post(f"{base_url}/api/copilot/search-enhanced", 
                               json={
                                   "motivo_consulta": caso_prueba["motivo_consulta"],
                                   "terminos_clave": ["rodilla", "dolor", "fisioterapia"],
                                   "especialidad": "fisioterapia",
                                   "contexto_clinico": ["dolor en rodilla", "lesi√≥n laboral"]
                               },
                               timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ B√∫squeda de evidencia exitosa")
            if data.get('evidencia_cientifica'):
                print(f"   Papers encontrados: {len(data['evidencia_cientifica'])}")
                for i, paper in enumerate(data['evidencia_cientifica'][:3], 1):
                    titulo = paper.get('titulo', 'Sin t√≠tulo')
                    autores = paper.get('autores', [])
                    ano = paper.get('a√±o_publicacion', 'N/A')
                    doi = paper.get('doi', 'Sin DOI')
                    print(f"   {i}. {titulo}")
                    print(f"      Autores: {', '.join(autores) if autores else 'Sin autores'}")
                    print(f"      A√±o: {ano} | DOI: {doi}")
            else:
                print("   ‚ö†Ô∏è No se encontraron papers")
        else:
            print(f"‚ùå Error en b√∫squeda de evidencia: {response.status_code}")
            print(f"   Respuesta: {response.text}")
            
            # Probar endpoint alternativo
            print("   üîÑ Probando endpoint alternativo...")
            response = requests.post(f"{base_url}/api/copilot/search-with-terms", 
                                   json={
                                       "condicion": caso_prueba["motivo_consulta"],
                                       "especialidad": "fisioterapia",
                                       "edad": caso_prueba["edad"],
                                       "terminos_seleccionados": ["rodilla", "dolor", "fisioterapia"]
                                   },
                                   timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                print("‚úÖ B√∫squeda alternativa exitosa")
                if data.get('resultados'):
                    print(f"   Papers encontrados: {len(data['resultados'])}")
                else:
                    print("   ‚ö†Ô∏è No se encontraron papers")
            else:
                print(f"‚ùå Error en b√∫squeda alternativa: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Error en b√∫squeda de evidencia: {e}")
    
    # 4. Probar an√°lisis completo
    print("\nüß† 4. PROBANDO AN√ÅLISIS COMPLETO")
    print("-" * 50)
    
    try:
        response = requests.post(f"{base_url}/api/copilot/complete-analysis", 
                               json={
                                   "motivo_consulta": caso_prueba["motivo_consulta"],
                                   "tipo_atencion": caso_prueba["tipo_atencion"],
                                   "edad": caso_prueba["edad"],
                                   "antecedentes": "Sin antecedentes relevantes",
                                   "evaluacion": caso_prueba["evaluacion"]
                               },
                               timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ An√°lisis completo exitoso")
            if data.get('resumen'):
                print(f"   Resumen generado: {len(data['resumen'])} caracteres")
                print(f"   Palabras clave: {data.get('palabras_clave', [])}")
                print(f"   Patolog√≠as: {data.get('patologias', [])}")
            else:
                print("   ‚ö†Ô∏è No se gener√≥ resumen")
        else:
            print(f"‚ùå Error en an√°lisis completo: {response.status_code}")
            print(f"   Respuesta: {response.text}")
    except Exception as e:
        print(f"‚ùå Error en an√°lisis completo: {e}")
    
    # 5. Verificar que no hay b√∫squedas duplicadas
    print("\nüîÑ 5. VERIFICANDO QUE NO HAY B√öSQUEDAS DUPLICADAS")
    print("-" * 50)
    
    print("‚úÖ El sistema debe ejecutar solo una b√∫squeda por an√°lisis")
    print("‚úÖ El sistema debe usar t√©rminos mejorados (rodilla, fisioterapia, etc.)")
    print("‚úÖ Los papers deben tener informaci√≥n completa (autores, a√±o, DOI)")
    
    # Resumen final
    print("\n" + "=" * 70)
    print("üìä RESUMEN DE PRUEBAS")
    print("=" * 70)
    
    print("‚úÖ Pruebas completadas.")
    print("\nüéØ MEJORAS IMPLEMENTADAS:")
    print("   ‚Ä¢ Control de estado para evitar b√∫squedas duplicadas")
    print("   ‚Ä¢ T√©rminos de b√∫squeda mejorados y contextuales")
    print("   ‚Ä¢ Extracci√≥n de t√©rminos anat√≥micos espec√≠ficos")
    print("   ‚Ä¢ An√°lisis de s√≠ntomas por profesi√≥n")
    print("   ‚Ä¢ Informaci√≥n completa en papers cient√≠ficos")
    print("   ‚Ä¢ B√∫squeda multi-endpoint con fallback")

if __name__ == "__main__":
    test_mejoras_sistema_completo() 