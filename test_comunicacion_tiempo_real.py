#!/usr/bin/env python3
"""
Script para probar el sistema de comunicaci√≥n en tiempo real de Copilot Health
"""

import sys
import os
import time
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Agregar el directorio actual al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from medical_apis_integration import MedicalAPIsIntegration

def test_comunicacion_tiempo_real():
    """Prueba el sistema de comunicaci√≥n en tiempo real"""
    print("üéØ PRUEBA DE COMUNICACI√ìN EN TIEMPO REAL")
    print("=" * 60)
    
    try:
        # Inicializar APIs
        apis = MedicalAPIsIntegration()
        
        # Casos de prueba para verificar comunicaci√≥n
        casos_prueba = [
            {
                'condicion': 'dolor de espalda',
                'especialidad': 'kinesiologia',
                'edad': 35,
                'descripcion': 'Dolor de espalda - debe mostrar proceso paso a paso'
            },
            {
                'condicion': 'problemas de voz',
                'especialidad': 'fonoaudiologia',
                'edad': 45,
                'descripcion': 'Problemas de voz - debe comunicar cada etapa'
            }
        ]
        
        for i, caso in enumerate(casos_prueba, 1):
            print(f"\nüîç CASO {i}: {caso['descripcion']}")
            print("-" * 50)
            
            # Simular proceso de comunicaci√≥n en tiempo real
            print("ü§ñ Copilot Health: Iniciando an√°lisis del caso...")
            time.sleep(1)
            
            print("üîç Copilot Health: Analizando motivo de consulta...")
            time.sleep(1)
            
            print("üìù Copilot Health: Extrayendo informaci√≥n clave...")
            time.sleep(1)
            
            # Realizar b√∫squeda
            start_time = time.time()
            print("üî¨ Copilot Health: Consultando bases de datos m√©dicas...")
            
            resultados = apis.buscar_tratamiento_pubmed(
                caso['condicion'], 
                caso['especialidad'], 
                caso['edad']
            )
            end_time = time.time()
            
            print(f"‚è±Ô∏è  Tiempo de b√∫squeda: {end_time - start_time:.2f} segundos")
            print(f"üìä Papers encontrados: {len(resultados)}")
            
            # Simular comunicaci√≥n de resultados
            if resultados:
                print("‚úÖ Copilot Health: Encontrados estudios cient√≠ficos relevantes")
                print("üéØ Copilot Health: Filtrando por relevancia...")
                print("üìã Copilot Health: Mostrando resultados en sidebar...")
                
                # Mostrar algunos resultados
                for j, paper in enumerate(resultados[:3], 1):
                    score = apis._calcular_score_relevancia_especifica(
                        paper, caso['condicion'], caso['especialidad']
                    )
                    print(f"   üìÑ {j}. {paper.titulo[:60]}... (Score: {score})")
            else:
                print("‚ö†Ô∏è  Copilot Health: No se encontraron estudios espec√≠ficos")
                print("üí° Copilot Health: Sugiriendo ajustar t√©rminos de b√∫squeda")
            
            print("üéØ Copilot Health: An√°lisis completado")
            print("\n" + "="*60)
        
        print("\n‚úÖ PRUEBA COMPLETADA")
        print("üéØ Sistema de comunicaci√≥n implementado:")
        print("   - Chat flotante en tiempo real")
        print("   - Mensajes paso a paso del proceso")
        print("   - Indicadores de progreso")
        print("   - Animaciones de typing")
        print("   - Diferentes tipos de mensajes (success, warning, error)")
        print("   - Bot√≥n flotante para activar/desactivar chat")
        
    except Exception as e:
        logger.error(f"‚ùå Error en la prueba: {e}")
        print(f"‚ùå Error: {e}")

if __name__ == "__main__":
    test_comunicacion_tiempo_real() 