#!/usr/bin/env python3
"""
Diagn√≥stico del bug de registro - Por qu√© usuarios nuevos reciben mensaje de contrase√±a temporal
"""

import bcrypt
import logging
from auth_manager import AuthManager

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_bcrypt_functions():
    """Probar las funciones de bcrypt paso a paso"""
    print("üîç DIAGN√ìSTICO: Funciones de bcrypt")
    print("=" * 50)
    
    # Crear instancia de AuthManager
    try:
        auth = AuthManager()
        print("‚úÖ AuthManager inicializado correctamente")
    except Exception as e:
        print(f"‚ùå Error inicializando AuthManager: {e}")
        return
    
    # Probar hash_password
    test_password = "MiContrase√±aTest123"
    print(f"\nüß™ Probando hash_password con: '{test_password}'")
    
    try:
        hashed = auth.hash_password(test_password)
        print(f"‚úÖ Hash generado: {hashed}")
        print(f"   Longitud: {len(hashed)}")
        print(f"   Comienza con: {hashed[:4]}")
        
        # Probar is_valid_bcrypt_hash inmediatamente
        is_valid = auth.is_valid_bcrypt_hash(hashed)
        print(f"   ¬øEs v√°lido seg√∫n is_valid_bcrypt_hash? {is_valid}")
        
        if not is_valid:
            print("‚ùå ¬°PROBLEMA ENCONTRADO! El hash reci√©n creado es considerado inv√°lido")
            print("   Esto explica por qu√© los usuarios nuevos reciben el mensaje temporal")
            
            # Analizar por qu√© falla
            print(f"\nüîç An√°lisis detallado del hash:")
            print(f"   - Longitud: {len(hashed)} (debe ser 60)")
            print(f"   - Prefijo: {hashed[:4]} (debe empezar con $2a$, $2b$, $2x$ o $2y$)")
            
            # Verificar caracteres
            valid_chars = set('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789./$')
            invalid_chars = set(hashed) - valid_chars
            if invalid_chars:
                print(f"   - Caracteres inv√°lidos encontrados: {invalid_chars}")
        else:
            print("‚úÖ Hash considerado v√°lido")
        
        # Probar verify_password
        verification = auth.verify_password(test_password, hashed)
        print(f"   ¬øVerificaci√≥n exitosa? {verification}")
        
    except Exception as e:
        print(f"‚ùå Error en hash_password: {e}")

def test_registration_simulation():
    """Simular el proceso completo de registro + login"""
    print("\nüé≠ SIMULACI√ìN: Registro + Login inmediato")
    print("=" * 50)
    
    try:
        auth = AuthManager()
        
        # Simular datos de registro
        user_data = {
            'email': 'test.diagnostico@gmail.com',
            'password': 'MiContrase√±aTest123',
            'nombre': 'Usuario',
            'apellido': 'Prueba',
            'telefono': '+56912345678',
            'tipo_usuario': 'paciente'
        }
        
        print(f"üìù Simulando registro con:")
        print(f"   Email: {user_data['email']}")
        print(f"   Contrase√±a: {user_data['password']}")
        
        # Paso 1: Hashear contrase√±a (como en register_user)
        hashed_password = auth.hash_password(user_data['password'])
        print(f"\n1Ô∏è‚É£ Hash generado durante registro: {hashed_password}")
        
        # Paso 2: Simular lo que pasa en login_user
        print(f"\n2Ô∏è‚É£ Simulando login inmediato...")
        
        # Verificar si el hash ser√≠a considerado v√°lido
        is_valid = auth.is_valid_bcrypt_hash(hashed_password)
        print(f"   ¬øHash considerado v√°lido en login? {is_valid}")
        
        if not is_valid:
            print("‚ùå ¬°PROBLEMA CONFIRMADO!")
            print("   El hash creado en registro es rechazado en login")
            print("   Por eso aparece el mensaje de contrase√±a temporal")
        else:
            # Probar verificaci√≥n de contrase√±a
            verification = auth.verify_password(user_data['password'], hashed_password)
            print(f"   ¬øContrase√±a verificada correctamente? {verification}")
            
            if verification:
                print("‚úÖ El proceso deber√≠a funcionar correctamente")
            else:
                print("‚ùå Problema en verify_password")
        
    except Exception as e:
        print(f"‚ùå Error en simulaci√≥n: {e}")

def analyze_is_valid_bcrypt_hash():
    """Analizar la funci√≥n is_valid_bcrypt_hash en detalle"""
    print("\nüî¨ AN√ÅLISIS: Funci√≥n is_valid_bcrypt_hash")
    print("=" * 50)
    
    try:
        auth = AuthManager()
        
        # Crear varios hashes de prueba
        test_passwords = ["password123", "test", "MedConnect2025!", "MiContrase√±aTest123"]
        
        for password in test_passwords:
            print(f"\nüß™ Probando con: '{password}'")
            hashed = auth.hash_password(password)
            
            print(f"   Hash: {hashed}")
            print(f"   Longitud: {len(hashed)}")
            print(f"   Prefijo: {hashed[:4]}")
            
            # Verificar cada condici√≥n de is_valid_bcrypt_hash
            checks = {
                "No vac√≠o": bool(hashed),
                "Longitud = 60": len(hashed) == 60,
                "Prefijo v√°lido": hashed.startswith(('$2a$', '$2b$', '$2x$', '$2y$')),
                "Caracteres v√°lidos": True  # Verificaremos esto por separado
            }
            
            # Verificar caracteres
            valid_chars = set('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789./$')
            invalid_chars = set(hashed) - valid_chars
            checks["Caracteres v√°lidos"] = len(invalid_chars) == 0
            
            if invalid_chars:
                print(f"   ‚ö†Ô∏è Caracteres inv√°lidos: {invalid_chars}")
            
            # Resultado final
            is_valid = auth.is_valid_bcrypt_hash(hashed)
            print(f"   Resultado is_valid_bcrypt_hash: {is_valid}")
            
            # Mostrar qu√© checks fallan
            failed_checks = [check for check, result in checks.items() if not result]
            if failed_checks:
                print(f"   ‚ùå Checks que fallan: {failed_checks}")
            else:
                print("   ‚úÖ Todos los checks pasan")
                
    except Exception as e:
        print(f"‚ùå Error en an√°lisis: {e}")

if __name__ == "__main__":
    test_bcrypt_functions()
    test_registration_simulation()
    analyze_is_valid_bcrypt_hash()
    
    print("\n" + "="*50)
    print("üéØ CONCLUSI√ìN:")
    print("Si este diagn√≥stico muestra que los hashes reci√©n creados")
    print("son considerados 'inv√°lidos', entonces tenemos el bug.")
    print("La soluci√≥n ser√° corregir is_valid_bcrypt_hash o hash_password.") 