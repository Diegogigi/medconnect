#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para limpiar datos corruptos en Google Sheets
Corrige tel√©fonos encriptados y regenera contrase√±as correctamente
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from auth_manager import AuthManager
import bcrypt
import re

def fix_corrupted_data():
    """Limpiar datos corruptos en Google Sheets"""
    print("üîß INICIANDO LIMPIEZA DE DATOS CORRUPTOS")
    print("=" * 50)
    
    try:
        # Inicializar AuthManager
        auth = AuthManager()
        if not auth.users_sheet:
            print("‚ùå Error: No se pudo conectar a Google Sheets")
            return False
        
        # Obtener todos los usuarios
        all_records = auth.users_sheet.get_all_records()
        print(f"üìä Total de usuarios encontrados: {len(all_records)}")
        
        usuarios_corregidos = 0
        
        for i, record in enumerate(all_records):
            row_index = i + 2  # +2 por header y √≠ndice 0
            email = record.get('email', '')
            telefono = record.get('telefono', '')
            password_hash = record.get('password', '')
            
            print(f"\nüë§ Procesando usuario: {email}")
            
            # **1. CORREGIR TEL√âFONO ENCRIPTADO**
            if telefono and telefono.startswith('$2b$'):
                print(f"  üì± Tel√©fono encriptado detectado: {telefono[:20]}...")
                
                # Limpiar tel√©fono (dejar vac√≠o para que el usuario lo actualice)
                try:
                    auth.users_sheet.update(f'D{row_index}', [[""]], value_input_option='RAW')
                    print(f"  ‚úÖ Tel√©fono limpiado - Usuario deber√° actualizarlo")
                    usuarios_corregidos += 1
                except Exception as e:
                    print(f"  ‚ùå Error limpiando tel√©fono: {e}")
            
            # **2. CORREGIR HASH DE CONTRASE√ëA CORRUPTO**
            if password_hash and not auth.is_valid_bcrypt_hash(password_hash):
                print(f"  üîí Hash corrupto detectado para: {email}")
                
                # Generar nueva contrase√±a temporal
                temp_password = "MedConnect2025!"
                new_hash = auth.hash_password(temp_password)
                
                try:
                    # Actualizar con formato correcto
                    auth.users_sheet.update(f'F{row_index}', [[new_hash]], value_input_option='RAW')
                    print(f"  ‚úÖ Hash regenerado - Contrase√±a temporal: {temp_password}")
                    usuarios_corregidos += 1
                except Exception as e:
                    print(f"  ‚ùå Error regenerando hash: {e}")
            
            # **3. CORREGIR EMAIL CON TYPO (si existe)**
            if 'laagos' in email:  # diego.castro.laagos -> diego.castro.lagos  
                correct_email = email.replace('laagos', 'lagos')
                print(f"  üìß Corrigiendo email: {email} -> {correct_email}")
                
                try:
                    auth.users_sheet.update(f'C{row_index}', [[correct_email]], value_input_option='RAW')
                    print(f"  ‚úÖ Email corregido")
                    usuarios_corregidos += 1
                except Exception as e:
                    print(f"  ‚ùå Error corrigiendo email: {e}")
        
        print(f"\nüéØ LIMPIEZA COMPLETADA")
        print(f"‚úÖ Usuarios corregidos: {usuarios_corregidos}")
        print(f"üìã Instrucciones para usuarios:")
        print(f"   - Contrase√±a temporal: MedConnect2025!")
        print(f"   - Actualizar tel√©fono en perfil")
        print(f"   - Cambiar contrase√±a despu√©s del login")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error general: {e}")
        return False

def test_password_functionality():
    """Probar funcionalidad de contrase√±as despu√©s de la limpieza"""
    print("\nüß™ PROBANDO FUNCIONALIDAD DE CONTRASE√ëAS")
    print("=" * 50)
    
    try:
        auth = AuthManager()
        
        # Probar hash v√°lido
        test_password = "MedConnect2025!"
        test_hash = auth.hash_password(test_password)
        
        if auth.is_valid_bcrypt_hash(test_hash):
            print("‚úÖ Generaci√≥n de hash: FUNCIONANDO")
        else:
            print("‚ùå Generaci√≥n de hash: FALLA")
            return False
        
        # Probar verificaci√≥n
        if auth.verify_password(test_password, test_hash):
            print("‚úÖ Verificaci√≥n de contrase√±a: FUNCIONANDO")
        else:
            print("‚ùå Verificaci√≥n de contrase√±a: FALLA")
            return False
        
        print("üéâ TODAS LAS FUNCIONES DE CONTRASE√ëA FUNCIONAN CORRECTAMENTE")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en pruebas: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ SCRIPT DE LIMPIEZA DE DATOS CORRUPTOS")
    print("Este script corregir√°:")
    print("1. Tel√©fonos encriptados incorrectamente")
    print("2. Hashes de contrase√±a corruptos")
    print("3. Emails con typos")
    print("")
    
    # Ejecutar limpieza
    if fix_corrupted_data():
        print("\n" + "="*50)
        
        # Probar funcionalidad
        if test_password_functionality():
            print("\nüéØ RESULTADO FINAL:")
            print("‚úÖ Datos corruptos CORREGIDOS")
            print("‚úÖ Sistema de contrase√±as FUNCIONANDO")
            print("‚úÖ Cambio de contrase√±as HABILITADO")
            print("")
            print("üîÑ REINICIA el servidor:")
            print("python app.py")
            print("")
            print("üîë Para login usa:")
            print("Email: diego.castro.lagos@gmail.com")
            print("Contrase√±a: MedConnect2025!")
            print("Luego cambia tu contrase√±a en Perfil > Configuraci√≥n")
        else:
            print("‚ùå Fall√≥ la verificaci√≥n de funcionalidades")
    else:
        print("‚ùå Fall√≥ la limpieza de datos") 