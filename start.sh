#!/bin/bash
# MedConnect - Script de inicio optimizado para Railway

echo "üè• === INICIANDO MEDCONNECT ==="
echo "üìÖ Fecha: $(date)"
echo ""

# Verificar variables de entorno cr√≠ticas
echo "üîç === VERIFICANDO VARIABLES DE ENTORNO ==="
if [ -z "$PORT" ]; then
    echo "‚ùå Error: Variable PORT no configurada"
    exit 1
fi

if [ -z "$TELEGRAM_BOT_TOKEN" ]; then
    echo "‚ùå Error: Variable TELEGRAM_BOT_TOKEN no configurada"
    exit 1
fi

echo "‚úÖ Variables de entorno verificadas"
echo "üåê Puerto: $PORT"
echo "ü§ñ Bot Token: ${TELEGRAM_BOT_TOKEN:0:10}..."

echo ""
echo "üöÄ === INICIANDO SERVICIOS ==="

# Instalar dependencias si es necesario
if [ ! -d "venv" ]; then
    echo "üì¶ Creando entorno virtual..."
    python -m venv venv
    source venv/bin/activate
    pip install -r requirements.txt
else
    source venv/bin/activate
fi

# Configurar puerto para Railway
echo "üîß Puerto configurado: $PORT"
echo "üåê Railway requiere puerto 8080 para exposici√≥n p√∫blica"

# Ejecutar aplicaci√≥n web y bot en paralelo
echo "üåê Iniciando aplicaci√≥n web en puerto $PORT..."
gunicorn app:app --bind 0.0.0.0:$PORT --workers 1 --timeout 120 --keep-alive 2 &
GUNICORN_PID=$!

echo "ü§ñ Iniciando bot corregido de Telegram..."
python bot_fixed.py &
BOT_PID=$!

echo "‚úÖ Servicios iniciados:"
echo "   üåê Web App (PID: $GUNICORN_PID)"
echo "   ü§ñ Bot (PID: $BOT_PID)"

# Funci√≥n para limpiar procesos al salir
cleanup() {
    echo "üõë Deteniendo servicios..."
    kill $GUNICORN_PID 2>/dev/null
    kill $BOT_PID 2>/dev/null
    exit 0
}

# Capturar se√±ales de terminaci√≥n
trap cleanup SIGTERM SIGINT

# Esperar a que los procesos terminen
wait 