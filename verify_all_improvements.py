#!/usr/bin/env python3
"""
Script para verificar que todas las mejoras est√©n implementadas
"""


def verify_all_improvements():
    """Verifica que todas las mejoras est√©n implementadas"""

    print("üîç Verificando todas las mejoras implementadas...")
    print("=" * 60)

    # Leer el archivo app.py
    with open("app.py", "r", encoding="utf-8") as f:
        content = f.read()

    improvements = [
        {
            "name": "Puerto 8000 por defecto",
            "check": 'PORT = int(os.environ.get("PORT", "8000"))',
            "critical": True,
        },
        {
            "name": "ProxyFix para HTTPS",
            "check": "from werkzeug.middleware.proxy_fix import ProxyFix",
            "critical": True,
        },
        {
            "name": "ProxyFix aplicado",
            "check": "app.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)",
            "critical": True,
        },
        {
            "name": "Cookies de sesi√≥n seguras",
            "check": "SESSION_COOKIE_SECURE=True",
            "critical": False,
        },
        {
            "name": "Secrets no hard-coded",
            "check": 'SECRET_KEY = os.environ["SECRET_KEY"]',
            "critical": True,
        },
        {
            "name": "DATABASE_URL requerida",
            "check": 'DATABASE_URL = os.environ["DATABASE_URL"]',
            "critical": True,
        },
        {
            "name": "Manejo de errores mejorado",
            "check": "import traceback",
            "critical": False,
        },
        {
            "name": "Logging de errores 500",
            "check": 'logger.error("500: %s\\n%s", error, traceback.format_exc())',
            "critical": False,
        },
        {
            "name": "Arranque con logging",
            "check": "logger.info(f\"üåê Binding Flask en 0.0.0.0:{app.config['PORT']}\")",
            "critical": True,
        },
    ]

    all_critical_ok = True
    total_improvements = len(improvements)
    implemented_improvements = 0

    print("üìã Verificando mejoras:")
    for improvement in improvements:
        if improvement["check"] in content:
            status = "‚úÖ"
            implemented_improvements += 1
        else:
            status = "‚ùå"
            if improvement["critical"]:
                all_critical_ok = False

        critical_mark = "üî¥" if improvement["critical"] else "üü°"
        print(f"  {status} {critical_mark} {improvement['name']}")

    print()
    print("=" * 60)

    # Verificar Procfile
    try:
        with open("Procfile", "r", encoding="utf-8") as f:
            procfile_content = f.read()

        if "gunicorn" in procfile_content:
            print("‚úÖ Procfile configurado con Gunicorn")
            implemented_improvements += 1
        else:
            print("‚ùå Procfile no configurado correctamente")
            all_critical_ok = False
    except FileNotFoundError:
        print("‚ùå Procfile no encontrado")
        all_critical_ok = False

    print()
    print(
        f"üìä Resumen: {implemented_improvements}/{total_improvements + 1} mejoras implementadas"
    )

    if all_critical_ok:
        print("üéâ ¬°Todas las mejoras cr√≠ticas est√°n implementadas!")
        print("‚úÖ La aplicaci√≥n deber√≠a funcionar correctamente en Railway")
        print("üöÄ Los errores 502 deber√≠an estar resueltos")
        print()
        print("üìù Pr√≥ximos pasos:")
        print("1. Railway redeployar√° autom√°ticamente")
        print("2. Verifica que las variables de entorno est√©n configuradas")
        print("3. Monitorea los logs de Railway")
        print("4. Prueba la aplicaci√≥n en www.medconnect.cl")
    else:
        print("‚ö†Ô∏è Algunas mejoras cr√≠ticas faltan")
        print("üîß Revisa las mejoras marcadas con ‚ùå")

    return all_critical_ok


if __name__ == "__main__":
    verify_all_improvements()
