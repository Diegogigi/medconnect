#!/usr/bin/env python3
"""
Script para probar el flujo completo de t√©rminos con autenticaci√≥n real
"""

import requests
import json
import time

def login_real():
    """Realiza login real con credenciales v√°lidas"""
    print("üîê Realizando login real...")
    
    session = requests.Session()
    
    # Datos de login reales
    login_data = {
        'email': 'giselle.arratia@gmail.com',
        'password': 'Gigi2025',
        'tipo_usuario': 'profesional'
    }
    
    try:
        # Realizar login
        response = session.post('http://localhost:5000/login', data=login_data, allow_redirects=False)
        
        print(f"üìä Status Code: {response.status_code}")
        
        if response.status_code == 302:
            print("‚úÖ Login exitoso - Redirect recibido")
            return session
        elif response.status_code == 200:
            # Verificar si el login fue exitoso
            if "dashboard" in response.text.lower() or "professional" in response.text.lower():
                print("‚úÖ Login exitoso - P√°gina de dashboard detectada")
                return session
            else:
                print("‚ùå Login fall√≥ - P√°gina de login detectada")
                return None
        else:
            print(f"‚ùå Login fall√≥ - Status: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå Error en login: {e}")
        return None

def test_terminos_con_auth():
    """Prueba la generaci√≥n de t√©rminos con autenticaci√≥n real"""
    print("\nüîç PRUEBA DE T√âRMINOS CON AUTENTICACI√ìN REAL")
    print("=" * 60)
    
    # Realizar login
    session = login_real()
    if not session:
        print("‚ùå No se pudo autenticar")
        return False
    
    # Probar endpoint de t√©rminos
    print("\nüìã Probando endpoint de t√©rminos...")
    try:
        response = session.post(
            "http://localhost:5000/api/copilot/generate-search-terms",
            json={
                'condicion': 'Dolor lumbar de 3 semanas',
                'especialidad': 'kinesiologia',
                'edad': 70
            },
            timeout=10
        )
        
        print(f"üìä Status Code: {response.status_code}")
        print(f"üìä Content-Type: {response.headers.get('Content-Type', 'No especificado')}")
        
        if response.status_code == 200:
            try:
                data = response.json()
                print("‚úÖ Respuesta JSON v√°lida")
                
                if data.get('success'):
                    terminos = data.get('terminos_disponibles', {})
                    print("‚úÖ T√©rminos generados exitosamente")
                    
                    # Mostrar estructura de t√©rminos
                    print(f"\nüìã Estructura de t√©rminos:")
                    print(f"   - T√©rminos b√°sicos: {len(terminos.get('terminos_basicos', []))}")
                    print(f"   - T√©rminos de especialidad: {len(terminos.get('terminos_especialidad', []))}")
                    print(f"   - T√©rminos por edad: {len(terminos.get('terminos_edad', []))}")
                    print(f"   - T√©rminos recomendados: {len(terminos.get('terminos_recomendados', []))}")
                    
                    # Mostrar algunos t√©rminos recomendados
                    recomendados = terminos.get('terminos_recomendados', [])
                    if recomendados:
                        print(f"\n‚≠ê T√©rminos recomendados:")
                        for i, termino in enumerate(recomendados[:5], 1):
                            print(f"   {i}. {termino}")
                    
                    return True
                else:
                    print(f"‚ùå Error en respuesta: {data.get('message', 'Error desconocido')}")
                    return False
                    
            except json.JSONDecodeError:
                print("‚ùå Respuesta no es JSON v√°lido")
                print(f"Respuesta: {response.text[:200]}...")
                return False
        else:
            print(f"‚ùå Error HTTP {response.status_code}")
            print(f"Respuesta: {response.text[:200]}...")
            return False
            
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False

def test_busqueda_con_terminos():
    """Prueba la b√∫squeda con t√©rminos seleccionados"""
    print("\nüîç PRUEBA DE B√öSQUEDA CON T√âRMINOS")
    print("=" * 50)
    
    # Realizar login
    session = login_real()
    if not session:
        print("‚ùå No se pudo autenticar")
        return False
    
    # Primero generar t√©rminos
    print("1Ô∏è‚É£ Generando t√©rminos...")
    try:
        terminos_response = session.post(
            "http://localhost:5000/api/copilot/generate-search-terms",
            json={
                'condicion': 'Dificultad para tragar alimentos',
                'especialidad': 'fonoaudiologia',
                'edad': 8
            },
            timeout=10
        )
        
        if terminos_response.status_code == 200:
            terminos_data = terminos_response.json()
            if terminos_data.get('success'):
                terminos = terminos_data.get('terminos_disponibles', {})
                recomendados = terminos.get('terminos_recomendados', [])
                print(f"   ‚úÖ {len(recomendados)} t√©rminos recomendados generados")
                
                # Seleccionar algunos t√©rminos
                terminos_seleccionados = recomendados[:3] if len(recomendados) >= 3 else recomendados
                print(f"2Ô∏è‚É£ T√©rminos seleccionados: {terminos_seleccionados}")
                
                # Probar b√∫squeda con t√©rminos seleccionados
                print("3Ô∏è‚É£ Probando b√∫squeda con t√©rminos...")
                busqueda_response = session.post(
                    "http://localhost:5000/api/copilot/search-with-terms",
                    json={
                        'condicion': 'Dificultad para tragar alimentos',
                        'especialidad': 'fonoaudiologia',
                        'edad': 8,
                        'terminos_seleccionados': terminos_seleccionados
                    },
                    timeout=10
                )
                
                if busqueda_response.status_code == 200:
                    busqueda_data = busqueda_response.json()
                    if busqueda_data.get('success'):
                        planes = busqueda_data.get('planes_tratamiento', [])
                        print(f"   ‚úÖ B√∫squeda exitosa: {len(planes)} tratamientos encontrados")
                        
                        if planes:
                            print("   üìÑ Primeros tratamientos:")
                            for i, plan in enumerate(planes[:3], 1):
                                print(f"      {i}. {plan.get('titulo', 'Sin t√≠tulo')[:60]}...")
                        
                        return True
                    else:
                        print(f"   ‚ùå Error en b√∫squeda: {busqueda_data.get('message')}")
                        return False
                else:
                    print(f"   ‚ùå Error HTTP en b√∫squeda: {busqueda_response.status_code}")
                    return False
            else:
                print(f"   ‚ùå Error generando t√©rminos: {terminos_data.get('message')}")
                return False
        else:
            print(f"   ‚ùå Error HTTP generando t√©rminos: {terminos_response.status_code}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Error en flujo: {e}")
        return False

def test_pagina_professional():
    """Verifica que la p√°gina professional est√© accesible con autenticaci√≥n"""
    print("\nüèóÔ∏è VERIFICACI√ìN DE P√ÅGINA PROFESSIONAL")
    print("=" * 50)
    
    # Realizar login
    session = login_real()
    if not session:
        print("‚ùå No se pudo autenticar")
        return False
    
    try:
        response = session.get("http://localhost:5000/professional", timeout=10)
        
        if response.status_code == 200:
            html_content = response.text
            
            # Verificar elementos cr√≠ticos
            elementos_criticos = [
                'sugerenciasTratamiento',
                'listaSugerenciasTratamiento',
                'sugerirTratamientoConIA'
            ]
            
            elementos_encontrados = []
            for elemento in elementos_criticos:
                if elemento in html_content:
                    elementos_encontrados.append(elemento)
                    print(f"‚úÖ {elemento} presente")
                else:
                    print(f"‚ùå {elemento} NO presente")
            
            # Verificar si es p√°gina de login
            if 'login' in html_content.lower():
                print("‚ö†Ô∏è P√ÅGINA DE LOGIN DETECTADA")
                print("üí° La autenticaci√≥n no funcion√≥ correctamente")
                return False
            else:
                print("‚úÖ NO ES P√ÅGINA DE LOGIN")
                print(f"‚úÖ {len(elementos_encontrados)}/{len(elementos_criticos)} elementos encontrados")
                return len(elementos_encontrados) == len(elementos_criticos)
                
        else:
            print(f"‚ùå Error HTTP: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üîç PRUEBA COMPLETA DE T√âRMINOS CON AUTENTICACI√ìN")
    print("=" * 60)
    
    # Ejecutar todas las pruebas
    resultados = []
    
    # Verificar p√°gina professional
    resultados.append(("P√°gina Professional", test_pagina_professional()))
    
    # Probar t√©rminos con auth
    resultados.append(("T√©rminos con Auth", test_terminos_con_auth()))
    
    # Probar b√∫squeda con t√©rminos
    resultados.append(("B√∫squeda con T√©rminos", test_busqueda_con_terminos()))
    
    # Mostrar resumen
    print("\nüìä RESUMEN DE PRUEBAS")
    print("=" * 40)
    
    exitos = 0
    for nombre, resultado in resultados:
        if resultado:
            print(f"‚úÖ {nombre}: OK")
            exitos += 1
        else:
            print(f"‚ùå {nombre}: FALLO")
    
    print(f"\nüéØ Resultado: {exitos}/{len(resultados)} pruebas exitosas")
    
    if exitos == len(resultados):
        print("‚úÖ TODAS LAS PRUEBAS EXITOSAS")
        print("‚úÖ El backend est√° funcionando correctamente")
        print("\nüí° Para probar en el frontend:")
        print("   1. Abre http://localhost:5000 en el navegador")
        print("   2. Inicia sesi√≥n como profesional")
        print("   3. Ve a la secci√≥n de atenci√≥n")
        print("   4. Llena un diagn√≥stico")
        print("   5. Haz clic en 'Sugerir Tratamiento con IA'")
        print("   6. Abre la consola del navegador (F12) para ver los logs")
    else:
        print("‚ùå ALGUNAS PRUEBAS FALLARON")
        print("‚ùå Revisa los errores anteriores")

if __name__ == "__main__":
    main() 