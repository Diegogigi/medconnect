#!/usr/bin/env python3
"""
Script para verificar el frontend con autenticaci√≥n simulada
"""

import requests
import json
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def login_and_get_session():
    """Realiza login y obtiene la sesi√≥n"""
    print("üîê Realizando login...")
    
    session = requests.Session()
    
    # Datos de login
    login_data = {
        'email': 'giselle.arratia@gmail.com',
        'password': '123456',
        'tipo_usuario': 'profesional'
    }
    
    try:
        # Realizar login
        response = session.post('http://localhost:5000/login', data=login_data, allow_redirects=False)
        
        print(f"üìä Status Code: {response.status_code}")
        print(f"üìä Headers: {dict(response.headers)}")
        
        if response.status_code == 302:  # Redirect despu√©s del login exitoso
            print("‚úÖ Login exitoso - Redirect recibido")
            return session
        elif response.status_code == 200:
            print("‚ö†Ô∏è Login devolvi√≥ 200 - Verificando contenido...")
            if "dashboard" in response.text.lower() or "professional" in response.text.lower():
                print("‚úÖ Login exitoso - P√°gina de dashboard detectada")
                return session
            else:
                print("‚ùå Login fall√≥ - P√°gina de login detectada")
                print(f"Contenido: {response.text[:200]}...")
                return None
        else:
            print(f"‚ùå Login fall√≥ - Status: {response.status_code}")
            print(f"Respuesta: {response.text[:200]}...")
            return None
            
    except Exception as e:
        print(f"‚ùå Error en login: {e}")
        return None

def test_frontend_with_auth():
    """Prueba el frontend con sesi√≥n autenticada"""
    print("\nüîç VERIFICACI√ìN DE FRONTEND CON AUTENTICACI√ìN")
    print("=" * 60)
    
    # Realizar login
    session = login_and_get_session()
    if not session:
        print("‚ùå No se pudo autenticar")
        return False
    
    # Verificar p√°gina professional con sesi√≥n autenticada
    try:
        professional_response = session.get("http://localhost:5000/professional", timeout=10)
        print(f"üìä Status Code: {professional_response.status_code}")
        
        if professional_response.status_code == 200:
            html_content = professional_response.text
            
            # Verificar elementos HTML necesarios
            elementos_requeridos = [
                'id="sugerenciasTratamiento"',
                'id="listaSugerenciasTratamiento"',
                'sugerirTratamientoConIA()'
            ]
            
            elementos_encontrados = []
            for elemento in elementos_requeridos:
                if elemento in html_content:
                    elementos_encontrados.append(elemento)
                    print(f"‚úÖ Elemento encontrado: {elemento}")
                else:
                    print(f"‚ùå Elemento NO encontrado: {elemento}")
            
            if len(elementos_encontrados) == len(elementos_requeridos):
                print("‚úÖ Todos los elementos HTML est√°n presentes")
                return True
            else:
                print(f"‚ùå Faltan {len(elementos_requeridos) - len(elementos_encontrados)} elementos")
                return False
        else:
            print(f"‚ùå Error accediendo a professional: {professional_response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error verificando frontend: {e}")
        return False

def test_endpoints_with_auth():
    """Prueba los endpoints con sesi√≥n autenticada"""
    print("\nüîß VERIFICACI√ìN DE ENDPOINTS CON AUTENTICACI√ìN")
    print("=" * 60)
    
    # Realizar login
    session = login_and_get_session()
    if not session:
        print("‚ùå No se pudo autenticar")
        return False
    
    # Probar endpoint de generaci√≥n de t√©rminos
    print("üìã Probando endpoint de generaci√≥n de t√©rminos...")
    try:
        response = session.post(
            "http://localhost:5000/api/copilot/generate-search-terms",
            json={
                'condicion': 'Dolor lumbar de 3 semanas',
                'especialidad': 'kinesiologia',
                'edad': 70
            },
            timeout=10
        )
        
        print(f"üìä Status Code: {response.status_code}")
        
        if response.status_code == 200:
            try:
                data = response.json()
                if data.get('success'):
                    terminos = data.get('terminos_disponibles', {})
                    print("‚úÖ Endpoint de generaci√≥n de t√©rminos funcionando")
                    print(f"üìã T√©rminos b√°sicos: {len(terminos.get('terminos_basicos', []))}")
                    print(f"üè• T√©rminos de especialidad: {len(terminos.get('terminos_especialidad', []))}")
                    print(f"üë§ T√©rminos por edad: {len(terminos.get('terminos_edad', []))}")
                    print(f"‚≠ê T√©rminos recomendados: {len(terminos.get('terminos_recomendados', []))}")
                    return True
                else:
                    print(f"‚ùå Error en endpoint: {data.get('message', 'Error desconocido')}")
                    return False
            except json.JSONDecodeError:
                print("‚ùå Respuesta no es JSON v√°lido")
                print(f"Respuesta: {response.text[:200]}...")
                return False
        else:
            print(f"‚ùå Error HTTP {response.status_code}")
            print(f"Respuesta: {response.text[:200]}...")
            return False
            
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False

def test_complete_flow_with_auth():
    """Prueba el flujo completo con autenticaci√≥n"""
    print("\nüîÑ PRUEBA DE FLUJO COMPLETO CON AUTENTICACI√ìN")
    print("=" * 60)
    
    # Realizar login
    session = login_and_get_session()
    if not session:
        print("‚ùå No se pudo autenticar")
        return False
    
    # Simular el flujo completo
    print("1Ô∏è‚É£ Generando t√©rminos disponibles...")
    try:
        terminos_response = session.post(
            "http://localhost:5000/api/copilot/generate-search-terms",
            json={
                'condicion': 'Dificultad para tragar alimentos',
                'especialidad': 'fonoaudiologia',
                'edad': 8
            },
            timeout=10
        )
        
        if terminos_response.status_code == 200:
            terminos_data = terminos_response.json()
            if terminos_data.get('success'):
                terminos = terminos_data.get('terminos_disponibles', {})
                recomendados = terminos.get('terminos_recomendados', [])
                print(f"   ‚úÖ {len(recomendados)} t√©rminos recomendados generados")
                
                # Simular selecci√≥n de t√©rminos
                terminos_seleccionados = recomendados[:3] if len(recomendados) >= 3 else recomendados
                print(f"2Ô∏è‚É£ Simulando selecci√≥n: {terminos_seleccionados}")
                
                # Probar b√∫squeda con t√©rminos seleccionados
                print("3Ô∏è‚É£ Probando b√∫squeda con t√©rminos seleccionados...")
                busqueda_response = session.post(
                    "http://localhost:5000/api/copilot/search-with-terms",
                    json={
                        'condicion': 'Dificultad para tragar alimentos',
                        'especialidad': 'fonoaudiologia',
                        'edad': 8,
                        'terminos_seleccionados': terminos_seleccionados
                    },
                    timeout=10
                )
                
                if busqueda_response.status_code == 200:
                    busqueda_data = busqueda_response.json()
                    if busqueda_data.get('success'):
                        total_resultados = busqueda_data.get('total_resultados', 0)
                        print(f"   ‚úÖ B√∫squeda exitosa: {total_resultados} tratamientos encontrados")
                        print("   ‚úÖ Flujo completo funcionando correctamente")
                        return True
                    else:
                        print(f"   ‚ùå Error en b√∫squeda: {busqueda_data.get('message')}")
                        return False
                else:
                    print(f"   ‚ùå Error HTTP en b√∫squeda: {busqueda_response.status_code}")
                    return False
            else:
                print(f"   ‚ùå Error generando t√©rminos: {terminos_data.get('message')}")
                return False
        else:
            print(f"   ‚ùå Error HTTP generando t√©rminos: {terminos_response.status_code}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Error en flujo completo: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üîç VERIFICACI√ìN COMPLETA CON AUTENTICACI√ìN")
    print("=" * 60)
    
    # Ejecutar todas las verificaciones
    resultados = []
    
    # Verificar frontend con auth
    resultados.append(("Frontend con Auth", test_frontend_with_auth()))
    
    # Verificar endpoints con auth
    resultados.append(("Endpoints con Auth", test_endpoints_with_auth()))
    
    # Verificar flujo completo con auth
    resultados.append(("Flujo Completo con Auth", test_complete_flow_with_auth()))
    
    # Mostrar resumen
    print("\nüìä RESUMEN DE VERIFICACI√ìN CON AUTENTICACI√ìN")
    print("=" * 50)
    
    exitos = 0
    for nombre, resultado in resultados:
        if resultado:
            print(f"‚úÖ {nombre}: OK")
            exitos += 1
        else:
            print(f"‚ùå {nombre}: FALLO")
    
    print(f"\nüéØ Resultado: {exitos}/{len(resultados)} verificaciones exitosas")
    
    if exitos == len(resultados):
        print("‚úÖ TODAS LAS VERIFICACIONES EXITOSAS")
        print("‚úÖ El frontend deber√≠a estar mostrando los t√©rminos correctamente")
        print("\nüí° Para probar manualmente:")
        print("   1. Ve a http://localhost:5000")
        print("   2. Inicia sesi√≥n como profesional")
        print("   3. Ve a la secci√≥n de atenci√≥n")
        print("   4. Llena un diagn√≥stico (ej: 'Dolor lumbar')")
        print("   5. Haz clic en 'Sugerir Tratamiento con IA'")
        print("   6. Deber√≠as ver los t√©rminos de b√∫squeda para seleccionar")
    else:
        print("‚ùå ALGUNAS VERIFICACIONES FALLARON")
        print("‚ùå Revisa los errores anteriores")

if __name__ == "__main__":
    main() 