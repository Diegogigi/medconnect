#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para verificar que el header de la sidebar ha sido eliminado
"""

import requests
import re

def verificar_header_eliminado():
    """Verifica que el header de la sidebar ha sido eliminado correctamente"""
    
    print("üóëÔ∏è  VERIFICACI√ìN DE ELIMINACI√ìN DEL HEADER")
    print("=" * 50)
    
    try:
        # Hacer request a la p√°gina professional
        response = requests.get('http://localhost:5000/professional')
        response.raise_for_status()
        
        print("1. üîç Verificando elementos eliminados...")
        
        # Elementos que deber√≠an estar eliminados
        elementos_eliminados = [
            'chat-header-elegant',
            'chat-title',
            'chat-status',
            'status-indicator'
        ]
        
        elementos_encontrados = 0
        for elemento in elementos_eliminados:
            if elemento in response.text:
                print(f"   ‚ùå {elemento} - A√öN PRESENTE")
                elementos_encontrados += 1
            else:
                print(f"   ‚úÖ {elemento} - ELIMINADO CORRECTAMENTE")
        
        print(f"\n   üìä Elementos eliminados: {len(elementos_eliminados) - elementos_encontrados}/{len(elementos_eliminados)}")
        
        print("\n2. üé® Verificando estilos CSS eliminados...")
        
        # Estilos CSS que deber√≠an estar eliminados
        estilos_eliminados = [
            'chat-header-elegant',
            'chat-title',
            'chat-status',
            'status-indicator'
        ]
        
        estilos_encontrados = 0
        for estilo in estilos_eliminados:
            patron = r'\.' + estilo.replace('-', r'\-')
            if re.search(patron, response.text):
                print(f"   ‚ùå {estilo} - A√öN PRESENTE EN CSS")
                estilos_encontrados += 1
            else:
                print(f"   ‚úÖ {estilo} - ELIMINADO DEL CSS")
        
        print(f"\n   üìä Estilos eliminados: {len(estilos_eliminados) - estilos_encontrados}/{len(estilos_eliminados)}")
        
        print("\n3. üéØ Verificando estructura simplificada...")
        
        # Elementos que deber√≠an estar presentes
        elementos_presentes = [
            'copilot-chat-elegant',
            'chat-messages-elegant',
            'messages-container',
            'message-elegant',
            'message-bubble',
            'btn-copilot-primary',
            'main-action'
        ]
        
        elementos_ok = 0
        for elemento in elementos_presentes:
            if elemento in response.text:
                print(f"   ‚úÖ {elemento} - PRESENTE")
                elementos_ok += 1
            else:
                print(f"   ‚ùå {elemento} - NO ENCONTRADO")
        
        print(f"\n   üìä Elementos presentes: {elementos_ok}/{len(elementos_presentes)}")
        
        print("\n4. üìè Verificando espaciado ajustado...")
        
        # Verificar que el espaciado se haya ajustado
        espaciado_ajustado = [
            ('margin: 0 0 20px 0', 'Espaciado superior eliminado'),
            ('margin: 0 0 20px 0', 'Margen ajustado correctamente')
        ]
        
        espaciado_ok = 0
        for patron, descripcion in espaciado_ajustado:
            if re.search(patron, response.text):
                print(f"   ‚úÖ {descripcion}")
                espaciado_ok += 1
            else:
                print(f"   ‚ùå {descripcion} - NO AJUSTADO")
        
        print(f"\n   üìä Espaciado ajustado: {espaciado_ok}/{len(espaciado_ajustado)}")
        
        # Calcular progreso general
        total_eliminaciones = len(elementos_eliminados) + len(estilos_eliminados)
        eliminaciones_exitosas = (len(elementos_eliminados) - elementos_encontrados) + (len(estilos_eliminados) - estilos_encontrados)
        
        total_elementos = len(elementos_presentes) + len(espaciado_ajustado)
        elementos_correctos = elementos_ok + espaciado_ok
        
        print("\n" + "=" * 50)
        print("üìä RESUMEN DE VERIFICACI√ìN")
        print("=" * 50)
        print(f"‚úÖ Elementos eliminados: {eliminaciones_exitosas}/{total_eliminaciones}")
        print(f"‚úÖ Elementos presentes: {elementos_correctos}/{total_elementos}")
        print(f"üìà PROGRESO GENERAL: {(eliminaciones_exitosas + elementos_correctos)}/{(total_eliminaciones + total_elementos)} ({(eliminaciones_exitosas + elementos_correctos)/(total_eliminaciones + total_elementos)*100:.1f}%)")
        
        if eliminaciones_exitosas >= total_eliminaciones * 0.8 and elementos_correctos >= total_elementos * 0.8:
            print("\nüéâ ¬°HEADER ELIMINADO EXITOSAMENTE!")
            print("   La sidebar ahora es m√°s limpia y minimalista.")
        else:
            print("\n‚ö†Ô∏è  ELIMINACI√ìN INCOMPLETA")
            print("   Algunos elementos del header a√∫n est√°n presentes.")
        
        return eliminaciones_exitosas >= total_eliminaciones * 0.8 and elementos_correctos >= total_elementos * 0.8
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return False

if __name__ == "__main__":
    verificar_header_eliminado() 